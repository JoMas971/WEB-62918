// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../rxjs
//   ../keycloak-js
//   ../axios

import { Observable } from 'rxjs';
import { KeycloakInstance } from 'keycloak-js';
import { AxiosRequestConfig, AxiosResponse } from 'axios';


export as namespace KeycloakAuthorization;

export = KeycloakAuthorization;

/**
    * Creates a new Keycloak client instance.
    * @param config Path to a JSON config file or a plain config object.
    */
function KeycloakAuthorization(keycloak: Keycloak.KeycloakInstance): KeycloakAuthorization.KeycloakAuthorizationInstance;

namespace KeycloakAuthorization {
	interface KeycloakAuthorizationPromise {
		then(onGrant: (rpt: string) => void, onDeny: () => void, onError: () => void): void;
	}

        interface AuthorizationRequest {
                /**
                    * An array of objects representing the resource and scopes.
                    */
                permissions?:ResourcePermission[],

                /**
                    * A permission ticket obtained from a resource server when using UMA authorization protocol.
                    */
                ticket?:string,

                /**
                    * A boolean value indicating whether the server should create permission requests to the resources
                    * and scopes referenced by a permission ticket. This parameter will only take effect when used together
                    * with the ticket parameter as part of a UMA authorization process.
                    */
                submitRequest?:boolean,

                /**
                    * Defines additional information about this authorization request in order to specify how it should be processed
                    * by the server.
                    */
                metadata?:AuthorizationRequestMetadata,

                /**
                    * Defines whether or not this authorization request should include the current RPT. If set to true, the RPT will
                    * be sent and permissions in the current RPT will be included in the new RPT. Otherwise, only the permissions referenced in this
                    * authorization request will be granted in the new RPT.
                    */
                incrementalAuthorization?:boolean
        }

        interface AuthorizationRequestMetadata {
                /**
                    * A boolean value indicating to the server if resource names should be included in the RPTâ€™s permissions.
                    * If false, only the resource identifier is included.
                    */
                responseIncludeResourceName?:any,

                /**
                    * An integer N that defines a limit for the amount of permissions an RPT can have. When used together with
                    * rpt parameter, only the last N requested permissions will be kept in the RPT.
                    */
                response_permissions_limit?:number
        }

        interface ResourcePermission {
                /**
                    * The id or name of a resource.
                    */
                id:string,

                /**
                    * An array of strings where each value is the name of a scope associated with the resource.
                    */
                scopes?:string[]
        }

	interface KeycloakAuthorizationInstance {
		rpt: any;
		config: { rpt_endpoint: string };

		init(): void;

		/**
                    * This method enables client applications to better integrate with resource servers protected by a Keycloak
                    * policy enforcer using UMA protocol.
                    *
                    * The authorization request must be provided with a ticket.
                    *
                    * @param authorizationRequest An AuthorizationRequest instance with a valid permission ticket set.
                    * @returns A promise to set functions to be invoked on grant, deny or error.
                    */
		authorize(authorizationRequest: AuthorizationRequest): KeycloakAuthorizationPromise;

		/**
		  * Obtains all entitlements from a Keycloak server based on a given resourceServerId.
                    *
                    * @param resourceServerId The id (client id) of the resource server to obtain permissions from.
                    * @param authorizationRequest An AuthorizationRequest instance.
                    * @returns A promise to set functions to be invoked on grant, deny or error.
		  */
		entitlement(resourceServerId: string, authorizationRequest?: AuthorizationRequest): KeycloakAuthorizationPromise;
	}
}

export as namespace Keycloak;

export = Keycloak;

/**
  * Creates a new Keycloak client instance.
  * @param config A configuration object or path to a JSON config file.
  */
function Keycloak<TPromise extends Keycloak.KeycloakPromiseType = 'legacy'>(config?: Keycloak.KeycloakConfig | string): Keycloak.KeycloakInstance<TPromise>;

namespace Keycloak {
    type KeycloakAdapterName = 'cordova' | 'cordova-native' |'default' | any;
    type KeycloakOnLoad = 'login-required'|'check-sso';
    type KeycloakResponseMode = 'query'|'fragment';
    type KeycloakResponseType = 'code'|'id_token token'|'code id_token token';
    type KeycloakFlow = 'standard'|'implicit'|'hybrid';
    type KeycloakPromiseType = 'legacy' | 'native';
    type KeycloakPkceMethod = 'S256';

    interface KeycloakConfig {
        /**
          * URL to the Keycloak server, for example: http://keycloak-server/auth
          */
        url?: string;
        /**
          * Name of the realm, for example: 'myrealm'
          */
        realm: string;
        /**
          * Client identifier, example: 'myapp'
          */
        clientId: string;
    }

    interface KeycloakInitOptions {
        /**
          * Adds a [cryptographic nonce](https://en.wikipedia.org/wiki/Cryptographic_nonce)
          * to verify that the authentication response matches the request.
          * @default true
          */
        useNonce?: boolean;

        /**
          * Allows to use different adapter:
          * 
          * - {string} default - using browser api for redirects
          * - {string} cordova - using cordova plugins 
          * - {function} - allows to provide custom function as adapter.
          */
        adapter?: KeycloakAdapterName;

        /**
          * Specifies an action to do on load.
          */
        onLoad?: KeycloakOnLoad;

        /**
          * Set an initial value for the token.
          */
        token?: string;

        /**
          * Set an initial value for the refresh token.
          */
        refreshToken?: string;

        /**
          * Set an initial value for the id token (only together with `token` or
          * `refreshToken`).
          */
        idToken?: string;

        /**
          * Set an initial value for skew between local time and Keycloak server in
          * seconds (only together with `token` or `refreshToken`).
          */
        timeSkew?: number;

        /**
          * Set to enable/disable monitoring login state.
          * @default true
          */
        checkLoginIframe?: boolean;

        /**
          * Set the interval to check login state (in seconds).
          * @default 5
          */
        checkLoginIframeInterval?: number;

        /**
          * Set the OpenID Connect response mode to send to Keycloak upon login.
          * @default fragment After successful authentication Keycloak will redirect
          *                   to JavaScript application with OpenID Connect parameters
          *                   added in URL fragment. This is generally safer and
          *                   recommended over query.
          */
        responseMode?: KeycloakResponseMode;

        /**
          * Specifies a default uri to redirect to after login or logout.
          * This is currently supported for adapter 'cordova-native' and 'default'
          */
        redirectUri?: string;

        /**
          * Specifies an uri to redirect to after silent check-sso.
          * Silent check-sso will only happen, when this redirect uri is given and
          * the specified uri is available whithin the application.
          */
        silentCheckSsoRedirectUri?: string;

        /**
          * Set the OpenID Connect flow.
          * @default standard
          */
        flow?: KeycloakFlow;

        /**
          * Set the promise type. If set to `native` all methods returning a promise
          * will return a native JavaScript promise. If not not specified then
          * Keycloak specific legacy promise objects will be returned instead.
          *
          * Since native promises have become the industry standard it is highly
          * recommended that you always specify `native` as the promise type.
          *
          * Note that in upcoming versions of Keycloak the default will be changed
          * to `native`, and support for legacy promises will eventually be removed.
          *
          * @default legacy
          */
        promiseType?: KeycloakPromiseType;

        /**
          * Configures the Proof Key for Code Exchange (PKCE) method to use.
          * The currently allowed method is 'S256'.
          * If not configured, PKCE will not be used.
          */
        pkceMethod?: KeycloakPkceMethod;

        /**
          * Enables logging messages from Keycloak to the console.
          * @default false
          */
        enableLogging?: boolean
    }

    interface KeycloakLoginOptions {
        /**
          * @private Undocumented.
          */
        scope?: string;

        /**
          * Specifies the uri to redirect to after login.
          */
        redirectUri?: string;

        /**
          * By default the login screen is displayed if the user is not logged into
          * Keycloak. To only authenticate to the application if the user is already
          * logged in and not display the login page if the user is not logged in, set
          * this option to `'none'`. To always require re-authentication and ignore
          * SSO, set this option to `'login'`.
          */
        prompt?: 'none'|'login';

        /**
          * If value is `'register'` then user is redirected to registration page,
          * otherwise to login page.
          */
        action?: 'register';

        /**
          * Used just if user is already authenticated. Specifies maximum time since
          * the authentication of user happened. If user is already authenticated for
          * longer time than `'maxAge'`, the SSO is ignored and he will need to
          * authenticate again.
          */
        maxAge?: number;

        /**
          * Used to pre-fill the username/email field on the login form.
          */
        loginHint?: string;

        /**
          * Used to tell Keycloak which IDP the user wants to authenticate with.
          */
        idpHint?: string;

            /**
          * Sets the 'ui_locales' query param in compliance with section 3.1.2.1
                  * of the OIDC 1.0 specification.
          */
        locale?: string;

        /**
          * Specifies arguments that are passed to the Cordova in-app-browser (if applicable).
          * Options 'hidden' and 'location' are not affected by these arguments.
          * All available options are defined at https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-inappbrowser/.
          * Example of use: { zoom: "no", hardwareback: "yes" }
          */
        cordovaOptions?: { [optionName: string]: string };
    }

    type KeycloakPromiseCallback<T> = (result: T) => void;

    interface KeycloakPromise<TSuccess, TError> {
        /**
          * Function to call if the promised action succeeds.
          */
        success(callback: KeycloakPromiseCallback<TSuccess>): KeycloakPromise<TSuccess, TError>;

        /**
          * Function to call if the promised action throws an error.
          */
        error(callback: KeycloakPromiseCallback<TError>): KeycloakPromise<TSuccess, TError>;
    }

    interface KeycloakError {
        error: string;
        error_description: string;
    }

    interface KeycloakAdapter {
        login(options?: KeycloakLoginOptions): KeycloakPromise<void, void>;
        logout(options?: any): KeycloakPromise<void, void>;
        register(options?: KeycloakLoginOptions): KeycloakPromise<void, void>;
        accountManagement(): KeycloakPromise<void, void>;
        redirectUri(options: { redirectUri: string; }, encodeHash: boolean): string;
    }

    interface KeycloakProfile {
        id?: string;
        username?: string;
        email?: string;
        firstName?: string;
        lastName?: string;
        enabled?: boolean;
        emailVerified?: boolean;
        totp?: boolean;
        createdTimestamp?: number;
    }

    interface KeycloakTokenParsed {
        exp?: number;
        iat?: number;
        nonce?: string;
        sub?: string;
        session_state?: string;
        realm_access?: KeycloakRoles;
        resource_access?: KeycloakResourceAccess;
    }

    interface KeycloakResourceAccess {
        [key: string]: KeycloakRoles
    }

    interface KeycloakRoles {
        roles: string[];
    }

    // export interface KeycloakUserInfo {}

    /**
      * Conditional CompatPromise type in order to support
      * both legacy promises and native promises as return types.
      */
    type CompatPromise<TPromiseType extends KeycloakPromiseType, TSuccess, TError> =
        TPromiseType extends 'native' ? Promise<TSuccess> : KeycloakPromise<TSuccess, TError>;

    /**
      * A client for the Keycloak authentication server.
      * @see {@link https://keycloak.gitbooks.io/securing-client-applications-guide/content/topics/oidc/javascript-adapter.html|Keycloak JS adapter documentation}
      */
    interface KeycloakInstance<TPromise extends KeycloakPromiseType = 'legacy'> {
        /**
          * Is true if the user is authenticated, false otherwise.
          */
        authenticated?: boolean;

        /**
          * The user id.
          */
        subject?: string;

        /**
          * Response mode passed in init (default value is `'fragment'`).
          */
        responseMode?: KeycloakResponseMode;

        /**
          * Response type sent to Keycloak with login requests. This is determined
          * based on the flow value used during initialization, but can be overridden
          * by setting this value.
          */
        responseType?: KeycloakResponseType;

        /**
          * Flow passed in init.
          */
        flow?: KeycloakFlow;

        /**
          * The realm roles associated with the token.
          */
        realmAccess?: KeycloakRoles;

        /**
          * The resource roles associated with the token.
          */
        resourceAccess?: KeycloakResourceAccess;

        /**
          * The base64 encoded token that can be sent in the Authorization header in
          * requests to services.
          */
        token?: string;

        /**
          * The parsed token as a JavaScript object.
          */
        tokenParsed?: KeycloakTokenParsed;

        /**
          * The base64 encoded refresh token that can be used to retrieve a new token.
          */
        refreshToken?: string;

        /**
          * The parsed refresh token as a JavaScript object.
          */
        refreshTokenParsed?: KeycloakTokenParsed;

        /**
          * The base64 encoded ID token.
          */
        idToken?: string;

        /**
          * The parsed id token as a JavaScript object.
          */
        idTokenParsed?: KeycloakTokenParsed;

        /**
          * The estimated time difference between the browser time and the Keycloak
          * server in seconds. This value is just an estimation, but is accurate
          * enough when determining if a token is expired or not.
          */
        timeSkew?: number;

        /**
          * @private Undocumented.
          */
        loginRequired?: boolean;

        /**
          * @private Undocumented.
          */
        authServerUrl?: string;

        /**
          * @private Undocumented.
          */
        realm?: string;

        /**
          * @private Undocumented.
          */
        clientId?: string;

        /**
          * @private Undocumented.
          */
        clientSecret?: string;

        /**
          * @private Undocumented.
          */
        redirectUri?: string;

        /**
          * @private Undocumented.
          */
        sessionId?: string;

        /**
          * @private Undocumented.
          */
        profile?: KeycloakProfile;

        /**
          * @private Undocumented.
          */
        userInfo?: {}; // KeycloakUserInfo;

        /**
          * Called when the adapter is initialized.
          */
        onReady?(authenticated?: boolean): void;

        /**
          * Called when a user is successfully authenticated.
          */
        onAuthSuccess?(): void;

        /**
          * Called if there was an error during authentication.
          */
        onAuthError?(errorData: KeycloakError): void;

        /**
          * Called when the token is refreshed.
          */
        onAuthRefreshSuccess?(): void;

        /**
          * Called if there was an error while trying to refresh the token.
          */
        onAuthRefreshError?(): void;

        /**
          * Called if the user is logged out (will only be called if the session
          * status iframe is enabled, or in Cordova mode).
          */
        onAuthLogout?(): void;

        /**
          * Called when the access token is expired. If a refresh token is available
          * the token can be refreshed with Keycloak#updateToken, or in cases where
          * it's not (ie. with implicit flow) you can redirect to login screen to
          * obtain a new access token.
          */
        onTokenExpired?(): void;

        /**
          * Called to initialize the adapter.
          * @param initOptions Initialization options.
          * @returns A promise to set functions to be invoked on success or error.
          */
        init(initOptions: KeycloakInitOptions): CompatPromise<TPromise, boolean, KeycloakError>;

        /**
          * Redirects to login form.
          * @param options Login options.
          */
        login(options?: KeycloakLoginOptions): CompatPromise<TPromise, void, void>;

        /**
          * Redirects to logout.
          * @param options Logout options.
          * @param options.redirectUri Specifies the uri to redirect to after logout.
          */
        logout(options?: any): CompatPromise<TPromise, void, void>;

        /**
          * Redirects to registration form.
          * @param options Supports same options as Keycloak#login but `action` is
          *                set to `'register'`.
          */
        register(options?: any): CompatPromise<TPromise, void, void>;

        /**
          * Redirects to the Account Management Console.
          */
        accountManagement(): CompatPromise<TPromise, void, void>;

        /**
          * Returns the URL to login form.
          * @param options Supports same options as Keycloak#login.
          */
        createLoginUrl(options?: KeycloakLoginOptions): string;

        /**
          * Returns the URL to logout the user.
          * @param options Logout options.
          * @param options.redirectUri Specifies the uri to redirect to after logout.
          */
        createLogoutUrl(options?: any): string;

        /**
          * Returns the URL to registration page.
          * @param options Supports same options as Keycloak#createLoginUrl but
          *                `action` is set to `'register'`.
          */
        createRegisterUrl(options?: KeycloakLoginOptions): string;

        /**
          * Returns the URL to the Account Management Console.
          */
        createAccountUrl(): string;

        /**
          * Returns true if the token has less than `minValidity` seconds left before
          * it expires.
          * @param minValidity If not specified, `0` is used.
          */
        isTokenExpired(minValidity?: number): boolean;

        /**
          * If the token expires within `minValidity` seconds, the token is refreshed.
          * If the session status iframe is enabled, the session status is also
          * checked.
          * @returns A promise to set functions that can be invoked if the token is
          *          still valid, or if the token is no longer valid.
          * @example
          * ```js
          * keycloak.updateToken(5).success(function(refreshed) {
          *   if (refreshed) {
          *     alert('Token was successfully refreshed');
          *   } else {
          *     alert('Token is still valid');
          *   }
          * }).error(function() {
          *   alert('Failed to refresh the token, or the session has expired');
          * });
          */
        updateToken(minValidity: number): CompatPromise<TPromise, boolean, boolean>;

        /**
          * Clears authentication state, including tokens. This can be useful if
          * the application has detected the session was expired, for example if
          * updating token fails. Invoking this results in Keycloak#onAuthLogout
          * callback listener being invoked.
          */
        clearToken(): void;

        /**
          * Returns true if the token has the given realm role.
          * @param role A realm role name.
          */
        hasRealmRole(role: string): boolean;

        /**
          * Returns true if the token has the given role for the resource.
          * @param role A role name.
          * @param resource If not specified, `clientId` is used.
          */
        hasResourceRole(role: string, resource?: string): boolean;

        /**
          * Loads the user's profile.
          * @returns A promise to set functions to be invoked on success or error.
          */
        loadUserProfile(): CompatPromise<TPromise, KeycloakProfile, void>;

        /**
          * @private Undocumented.
          */
        loadUserInfo(): CompatPromise<TPromise, {}, void>;
    }
}

/**
    * Abstract Authorization provider class
    */
export abstract class IlandAbstractAuthProvider implements AuthProvider {
        protected _tokenObservable: Observable<string>;
        abstract getToken(): Promise<string | undefined>;
        abstract getTokenSync(): string | undefined;
        abstract logout(options?: any): Promise<any>;
        abstract getAuthenticatedUsername(): Promise<string>;
        /**
            * Return an Observable to get an up to date token over time.
            * @returns {Observable<string>}
            */
        getTokenObservable(): Observable<string>;
}

/**
    * Authorization Provider interface.
    */
export interface AuthProvider {
        /**
            * Retrieve a token for authenticating with the iland APIs.
            * @returns {Promise<string | undefined>}
            */
        getToken(): Promise<string | undefined>;
        /**
            * Retrieve an Observer to get an up to date token over time.
            * @returns {Observable<string>}
            */
        getTokenObservable(): Observable<string>;
        /**
            * Retrieve the current access token synchronously.
            * @returns {string | undefined}
            */
        getTokenSync(): string | undefined;
        /**
            * Log out the current authentication session.
            * @returns {Promise<null>}
            */
        logout(options?: any): Promise<null>;
        /**
            * Gets the username of the currently authenticated user.
            * @returns {Promise<string>} username
            */
        getAuthenticatedUsername(): Promise<string>;
}
/**
    * Browser Authorization Provider interface.
    */
export interface BrowserAuthProvider extends AuthProvider {
        testRole(roleUuid: string): void;
        endRoleTest(): void;
}
/**
    * Session Authorization Provider interface.
    */
export interface SessionAuthProvider extends BrowserAuthProvider {
        logUserInteraction(): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions, target?: EventTarget | HTMLElement): void;
        removeEventListener(type: string, target?: EventTarget | HTMLElement): void;
        destroy(): void;
}
export interface IlandBrowserAuthConfig {
        clientId: string;
        url?: string;
}
export interface IlandSessionAuthConfig extends IlandBrowserAuthConfig {
        sessionTimeout?: number;
        enableClickListener?: boolean;
        listenerDefaultTarget?: HTMLElement;
}
export interface IlandSessionAuthListener {
        type: string;
        listener: EventListenerOrEventListenerObject;
        options: boolean | AddEventListenerOptions | undefined;
        target: EventTarget | HTMLElement;
}
export interface IlandDirectGrantAuthConfig {
        username: string;
        password: string;
        clientSecret: string;
        clientId: string;
        url?: string;
}
export const DEFAULT_AUTH_URL: string;
export const DEFAULT_REALM = "iland-core";
export const DEFAULT_AUTH_TOKEN_MIN_VALIDITY = 15;

export class IlandBrowserAuthProvider extends IlandAbstractAuthProvider implements BrowserAuthProvider {
        protected _keycloak: KeycloakInstance;
        protected _testingRoleUuid: string | undefined;
        constructor(config: IlandBrowserAuthConfig);
        /**
            * Activate the role testing mode.
            * @param roleUuid
            */
        testRole(roleUuid: string): void;
        /**
            * End role testing session.
            */
        endRoleTest(): void;
        /**
            * Return the current complete access token
            * @returns {string | undefined} the access token
            */
        getTokenSync(): string | undefined;
        /**
            * Get the token. The token will be automatically refreshed when needed.
            * @returns {Promise<string>}
            */
        getToken(): Promise<string | undefined>;
        /**
            * Gets the username of the currently authenticated user.
            * @returns {string} username
            */
        getAuthenticatedUsername(): Promise<string>;
        /**
            * Log out the authenticated user.
            * @returns {Promise<any>} promise that resolves when logout is complete.
            */
        logout(options?: any): Promise<any>;
        /**
            * If we have an impersonated role initialized with the SDK, we need to update all token.
            * @param {string | undefined} token
            * @returns {string | undefined} the complete token.
            */
        protected getImpersonateToken(token?: string | undefined): string | undefined;
        /**
            * Init keycloak.
            * @protected
            * @returns {Promise<boolean>}
            */
        protected _init(): Promise<boolean>;
}

export class IlandDirectGrantAuthProvider extends IlandAbstractAuthProvider implements AuthProvider {
    constructor(_config: IlandDirectGrantAuthConfig);
    getToken(): Promise<string>;
    /**
      * Return the currently used access token synchronously.
      * @return {string | undefined}
      */
    getTokenSync(): string | undefined;
    logout(): Promise<any>;
    getAuthenticatedUsername(): Promise<string>;
    _refreshToken(): Promise<Token>;
}
export interface Token {
    access_token: string;
    expires_in: number;
    refresh_token: string;
    expires_at: number;
}

/**
    * Session Authorization provider
    */
export class IlandSessionAuthProvider extends IlandBrowserAuthProvider implements SessionAuthProvider {
        constructor(config: IlandSessionAuthConfig);
        /**
            * Get the token. We're checking if the user have log interactions and we will just return an automatic refreshed
            * token if he do interact. Otherwise, we just logout the user.
            * @returns {Promise<string | undefined>}
            */
        getToken(): Promise<string | undefined>;
        /**
            * Log user interaction in order to update the token if needed.
            */
        logUserInteraction(): void;
        /**
            * Add an event listener.
            * @param type
            * @param listener
            * @param options
            * @param target
            */
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions, target?: EventTarget | HTMLElement): void;
        /**
            * Remove a specific event listener.
            * @param type
            * @param target
            */
        removeEventListener(type: string, target?: EventTarget | HTMLElement): void;
        /**
            * We remove all event listeners that we may have logged when we destroy the class.
            */
        destroy(): void;
}

/**
    * Wrapper for iland API errors.
    */
export class ApiError extends Error {
        /**
            * Constructor.
            * @param {ApiErrorJson} _json error JSON from the API
            */
        constructor(_json: ApiErrorJson);
        /**
            * Gets the error message.
            * @returns {string}
            */
        getMessage(): string;
        /**
            * Gets the error detail message.
            * @returns {string|any} detailed message or null if none exists
            */
        getDetailMessage(): string | null;
        /**
            * Gets the error type.
            * @returns {ApiErrorType} the type of API error
            */
        getType(): ApiErrorType;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {ApiErrorJson} the API Error JSON object
            */
        getJson(): ApiErrorJson;
}
/**
    * Interface for API errors.
    */
export interface ApiErrorJson {
        message: string;
        detail_message?: string;
        type: ApiErrorType;
}
/**
    * Enumeration of possible API error types.
    */
export type ApiErrorType = 'BadRequestError' | 'NotFoundError' | 'InternalServerError' | 'VCloudDirectorError' | 'VShieldManagerError' | 'UnauthorizedError' | 'UnknownError' | 'ConnectionError';

/**
    * Basic configurations for SDK using environment variables.
    */
export class BasicConfiguration {
        /**
            * Get the default API url.
            * @returns {string}
            */
        static getApiUrl(): string;
        /**
            * Get the default authorisation url.
            * @returns {string}
            */
        static getAuthorizationUrl(): string;
}

export abstract class Iland {
    static baseUrl: string;
    static init(_authProvider: AuthProvider, _config?: IlandSdkConfig, _logger?: Logger): void;
    static getAuthProvider(): AuthProvider;
    static getHttp(): Http;
    /**
      * Get the configured logger.
      * @returns {Logger}
      */
    static getLogger(): Logger;
}
export interface IlandSdkConfig {
    baseUrl: string;
}

/**
  * Interface for logger.
  */
export interface Logger {
    debug(msg: any): void;
    info(msg: any): void;
    warn(msg: any): void;
    error(msg: any): void;
}

/**
  * Backup Group Delete Request JSON.
  */
export interface BackupGroupDeleteRequestJson {
    delete_snapshots: boolean;
}

/**
  * Backup Group Disk Unit JSON.
  */
export interface BackupGroupDiskUnitJson {
    bus_number: number;
    controller_type: string;
    unit_number: number;
}

/**
  * Backup Group Indexing Policy JSON.
  */
export interface BackupGroupIndexingPolicyJson {
    allow_prefixes: Array<string>;
    deny_prefixes: Array<string>;
    disable_indexing: boolean;
}

/**
  * Backup Group JSON.
  */
export interface BackupGroupJson {
    company_id: string;
    uid: string;
    location_id: string;
    name: string;
    creation_time: number;
    modified_time: number;
    description: string;
    end_time: number;
    active: boolean;
    deleted: boolean;
    paused: boolean;
    excluded_disks: Array<BackupGroupDiskUnitJson>;
    fallback_to_crash_consistent: boolean;
    skip_physical_rdm_disks: boolean;
    full_protection_sla_time_mins: number;
    incremental_protection_sla_time_mins: number;
    indexing_policy: BackupGroupIndexingPolicyJson;
    policy_id: string;
    policy_applied_time: number;
    priority: BackupGroupPriority;
    qos_type: BackupGroupQosType;
    excluded_sources: Array<ProtectionSourceJson>;
    protected_sources: Array<ProtectionSourceJson>;
    start_time: TimeOfDayJson;
    timezone: string;
    org_uuid: string;
    vdc_uuid: string;
    abort_in_blackout_period: boolean;
    continue_on_quiesce_failure: boolean;
    quiesce: boolean;
    summary_stats: BackupSummaryStatsJson;
    last_run: BackupGroupRunJson;
    backup_policy: BackupPolicyJson;
}

/**
  * Backup Group List JSON.
  */
export interface BackupGroupListJson {
    data: Array<BackupGroupJson>;
}

/**
  * Backup Group Priority Enum.
  */
export enum BackupGroupPriority {
    LOW = "LOW",
    MEDIUM = "MEDIUM",
    HIGH = "HIGH"
}

/**
  * Backup Group Qos Type Enum.
  */
export enum BackupGroupQosType {
    HDD = "HDD",
    SSD = "SSD"
}

/**
  * Backup Group Source Ref JSON.
  */
export interface BackupGroupSourceRefJson {
    entity_uuid: string;
    entity_type: VCloudProtectionSourceType;
}

/**
  * Backup group storage metric list JSON.
  */
export interface BackupGroupStorageMetricListJson {
    data: Array<BackupGroupStorageMetric>;
}

/**
  * Backup group storage metric enum.
  */
export enum BackupGroupStorageMetric {
    TOTAL_DATA_IN = "TOTAL_DATA_IN",
    TOTAL_LOGICAL_USAGE = "TOTAL_LOGICAL_USAGE"
}

/**
  * Backup group storage sample series JSON.
  */
export interface BackupGroupStorageSampleSeriesJson {
    metric: BackupGroupStorageMetric;
    location_id: string;
    company_id: string;
    org_uuid: string;
    vdc_uuid: string;
    backup_group_uid: string;
    samples: Array<SampleJson>;
    backup_cluster_uid: string;
}

/**
  * Backup Group Update Request JSON.
  */
export interface BackupGroupUpdateRequestJson {
    name: string;
    description: string;
    end_time: number;
    excluded_disks: Array<BackupGroupDiskUnitJson>;
    fallback_to_crash_consistent: boolean;
    skip_physical_rdm_disks: boolean;
    full_protection_sla_time_mins: number;
    incremental_protection_sla_time_mins: number;
    indexing_policy: BackupGroupIndexingPolicyJson;
    policy_id: string;
    priority: BackupGroupPriority;
    qos_type: BackupGroupQosType;
    excluded_sources: Array<BackupGroupSourceRefJson>;
    protected_sources: Array<BackupGroupSourceRefJson>;
    start_time: TimeOfDayJson;
    timezone: string;
    abort_in_blackout_period: boolean;
    continue_on_quiesce_failure: boolean;
    quiesce: boolean;
}

/**
  * IaaS backup bill JSON.
  */
export interface IaasBackupBillJson {
    company_id: string;
    location_id: string;
    org_uuid: string;
    vdc_uuid: string;
    year: number;
    month: number;
    burst_usage_byte_hours: number;
    burst_cost: number;
    reserved_cost: number;
    currency_code: CurrencyCode;
    local_usage_byte_hours: number;
    remote_usage_byte_hours: number;
    total_usage_byte_hours: number;
}

/**
  * IaaS backup subscription JSON.
  */
export interface IaasBackupSubscriptionJson {
    company_id: string;
    location_id: string;
    org_uuid: string;
    vdc_uuid: string;
    activation_time: number;
    deactivation_time?: number;
    reserved_amount_gb: number;
    reserved_cost: number;
    burst_cost_per_gb_hour: number;
    currency_code: CurrencyCode;
}

/**
  * Protection Source JSON.
  */
export interface ProtectionSourceJson {
    entity_uuid?: string;
    entity_type: VCloudProtectionSourceType;
    entity_name: string;
    native_uid: string;
}

/**
  * Sample JSON.
  */
export interface SampleJson {
    components: Record<string, number | null>;
    timestamp: number;
    value?: number;
}

/**
  * Time of Day JSON.
  */
export interface TimeOfDayJson {
    hour: number;
    minute: number;
}

/**
  * VCloud Protection Source Type Enum.
  */
export enum VCloudProtectionSourceType {
    VM = "VM",
    VAPP = "VAPP",
    VDC = "VDC"
}

/**
  * vDC backup storage metric enum.
  */
export enum VdcBackupStorageMetric {
    TOTAL_DATA_IN = "TOTAL_DATA_IN",
    TOTAL_LOGICAL_USAGE = "TOTAL_LOGICAL_USAGE"
}

/**
  * vDC backup storage sample series JSON.
  */
export interface VdcBackupStorageSampleSeriesJson {
    metric: VdcBackupStorageMetric;
    location_id: string;
    company_id: string;
    org_uuid: string;
    vdc_uuid: string;
    samples: Array<SampleJson>;
    backup_cluster_id: string;
}

/**
    * Backup Group Delete Request.
    */
export class BackupGroupDeleteRequest {
        constructor(backupGroupDeleteRequest: BackupGroupDeleteRequest);
        constructor(backupGroupDeleteRequestJson: BackupGroupDeleteRequestJson);
        constructor(deleteSnapshots: boolean);
        /**
            * Get delete snapshots.
            * @returns {boolean | null}
            */
        get deleteSnapshots(): boolean | null;
        /**
            * Get the json representation of this class.
            * @returns {BackupGroupDeleteRequestJson}
            */
        get json(): BackupGroupDeleteRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Backup Group Disk Unit.
    */
export class BackupGroupDiskUnit {
        constructor(_json: BackupGroupDiskUnitJson);
        /**
            * Gets the Id of the controller bus that controls the disk.
            * @returns {number} bus number
            */
        get busNumber(): number;
        /**
            * Gets the controller type like SCSI, or IDE etc.
            * @returns {string} controller type
            */
        get controllerType(): string;
        /**
            * Gets the disk file name. This is the VMDK name and not the flat file name.
            * @returns {number} unit number
            */
        get unitNumber(): number;
        /**
            * Gets the json representation of this class.
            * @returns {BackupGroupDiskUnitJson}
            */
        get json(): BackupGroupDiskUnitJson;
        /**
            * Gets the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Backup Group Disk Unit.
    */
export class BackupGroupIndexingPolicy {
        constructor(_json: BackupGroupIndexingPolicyJson);
        /**
            * Gets a list of directories to index.
            * @returns {Array<string>} allow prefixes
            */
        get allowPrefixes(): Array<string>;
        /**
            * Gets a list of directories to exclude from indexing.
            * @returns {Array<string>} deny prefixes
            */
        get denyPrefixes(): Array<string>;
        /**
            * Indicates if the files found in an Object (such as a VM) should be indexed.
            * @returns {boolean} disable indexing
            */
        get disableIndexing(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {BackupGroupIndexingPolicyJson}
            */
        get json(): BackupGroupIndexingPolicyJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Backup Group List.
    */
export class BackupGroupList {
        constructor(_json: BackupGroupListJson);
        /**
            * Get data.
            * @returns {Array<BackupGroup>}
            */
        get data(): Array<BackupGroup>;
        /**
            * Get the json representation of this class.
            * @returns {BackupGroupListJson}
            */
        get json(): BackupGroupListJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Backup Group Source Ref.
    */
export class BackupGroupSourceRef {
        constructor(_json: BackupGroupSourceRefJson);
        /**
            * Get entity uuid.
            * @returns {string}
            */
        get entityUuid(): string;
        /**
            * Get entity type.
            * @returns {VCloudProtectionSourceType}
            */
        get entityType(): VCloudProtectionSourceType;
        /**
            * Get the json representation of this class.
            * @returns {BackupGroupSourceRef}
            */
        get json(): BackupGroupSourceRefJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Backup group storage metric list.
    */
export class BackupGroupStorageMetricList {
        constructor(_json: BackupGroupStorageMetricListJson);
        /**
            * Get data.
            * @returns {Array<BackupGroupStorageMetric>}
            */
        get data(): Array<BackupGroupStorageMetric>;
        /**
            * Get the json representation of this class.
            * @returns {BackupGroupStorageMetricListJson}
            */
        get json(): BackupGroupStorageMetricListJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Backup group storage sample series.
    */
export class BackupGroupStorageSampleSeries {
        constructor(_json: BackupGroupStorageSampleSeriesJson);
        /**
            * Get metric.
            * @returns {BackupGroupStorageMetric}
            */
        get metric(): BackupGroupStorageMetric;
        /**
            * Get location id.
            * @returns {string}
            */
        get locationId(): string;
        /**
            * Get companyId.
            * @returns {string}
            */
        get companyId(): string;
        /**
            * Get org uuid.
            * @returns {string}
            */
        get orgUuid(): string;
        /**
            * Get vDC uuid.
            * @returns {string}
            */
        get vdcUuid(): string;
        /**
            * Get backup group uid.
            * @returns {string}
            */
        get backupGroupUid(): string;
        /**
            * Get samples.
            * @returns {Array<Sample>}
            */
        get samples(): Array<Sample>;
        /**
            * Get backup cluster uid.
            * @returns {string}
            */
        get backupClusterUid(): string;
        /**
            * Get the json representation of this class.
            * @returns {BackupGroupStorageSampleSeriesJson}
            */
        get json(): BackupGroupStorageSampleSeriesJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Backup Group Update Request.
    */
export class BackupGroupUpdateRequest {
        constructor(backupGroupUpdateRequest: BackupGroupUpdateRequest);
        constructor(backupGroupUpdateRequestJson: BackupGroupUpdateRequestJson);
        constructor(name: string, description: string, endTime: number, excludedDisks: Array<BackupGroupDiskUnitJson>, fallbackToCrashConsistent: boolean, skipPhysicalRdmDisks: boolean, fullProtectionSlaTimeMins: number, incrementalProtectionSlaTimeMins: number, indexingPolicy: BackupGroupIndexingPolicyJson, policyId: string, priority: BackupGroupPriority, qosType: BackupGroupQosType, excludedSources: Array<BackupGroupSourceRefJson>, protectedSources: Array<BackupGroupSourceRefJson>, startTime: TimeOfDayJson, timezone: string, abortInBlackoutPeriod: boolean, continueOnQuiesceFailure: boolean, quiesce: boolean);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string | null}
            */
        get description(): string | null;
        /**
            * Get end time.
            * @returns {number | null}
            */
        get endTime(): number | null;
        /**
            * Get excluded disks.
            * @returns {Array<BackupGroupDiskUnit> | null}
            */
        get excludedDisks(): Array<BackupGroupDiskUnit> | null;
        /**
            * Get fallback to crash consistent.
            * @returns {boolean | null}
            */
        get fallbackToCrashConsistent(): boolean | null;
        /**
            * Get skip physical rdm disks.
            * @returns {boolean | null}
            */
        get skipPhysicalRdmDisks(): boolean | null;
        /**
            * Get full protection sla time mins.
            * @returns {number}
            */
        get fullProtectionSlaTimeMins(): number;
        /**
            * Get incremental protection sla time mins.
            * @returns {number}
            */
        get incrementalProtectionSlaTimeMins(): number;
        /**
            * Get indexing policy.
            * @returns {BackupGroupIndexingPolicy | null}
            */
        get indexingPolicy(): BackupGroupIndexingPolicy | null;
        /**
            * Get policy id.
            * @returns {string}
            */
        get policyId(): string;
        /**
            * Get priority.
            * @returns {BackupGroupPriority}
            */
        get priority(): BackupGroupPriority;
        /**
            * Get qos type.
            * @returns {BackupGroupQosType}
            */
        get qosType(): BackupGroupQosType;
        /**
            * Get excluded sources.
            * @returns {Array<BackupGroupSourceRef>}
            */
        get excludedSources(): Array<BackupGroupSourceRef>;
        /**
            * Get protected sources.
            * @returns {Array<BackupGroupSourceRef>}
            */
        get protectedSources(): Array<BackupGroupSourceRef>;
        /**
            * Get start time.
            * @returns {TimeOfDay}
            */
        get startTime(): TimeOfDay;
        /**
            * Get timezone.
            * @returns {string}
            */
        get timezone(): string;
        /**
            * Get abort in blackout period.
            * @returns {boolean}
            */
        get abortInBlackoutPeriod(): boolean;
        /**
            * Get continue on quiesce failure.
            * @returns {boolean}
            */
        get continueOnQuiesceFailure(): boolean;
        /**
            * Get quiesce.
            * @returns {boolean}
            */
        get quiesce(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {BackupGroupUpdateRequestJson}
            */
        get json(): BackupGroupUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Backup Group.
    */
export class BackupGroup {
        constructor(_json: BackupGroupJson);
        /**
            * Gets the entity type.
            * @returns {EntityType}
            */
        get entityType(): EntityType;
        /**
            * Get company id.
            * @returns {string}
            */
        get companyId(): string;
        /**
            * Get uid.
            * @returns {string}
            */
        get uid(): string;
        /**
            * Get location id.
            * @returns {string}
            */
        get locationId(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get creation time.
            * @returns {number}
            */
        get creationTime(): number;
        /**
            * Get modified time.
            * @returns {number}
            */
        get modifiedTime(): number;
        /**
            * Get description.
            * @returns {string | null}
            */
        get description(): string | null;
        /**
            * Get end time.
            * @returns {number | null}
            */
        get endTime(): number | null;
        /**
            * Get active.
            * @returns {boolean}
            */
        get active(): boolean;
        /**
            * Get deleted.
            * @returns {boolean}
            */
        get deleted(): boolean;
        /**
            * Get paused.
            * @returns {boolean}
            */
        get paused(): boolean;
        /**
            * Get excluded disks.
            * @returns {Array<BackupGroupDiskUnit>}
            */
        get excludedDisks(): Array<BackupGroupDiskUnit>;
        /**
            * Get fallback to crash consistent.
            * @returns {boolean}
            */
        get fallbackToCrashConsistent(): boolean;
        /**
            * Get skip physical rdm disks.
            * @returns {boolean}
            */
        get skipPhysicalRdmDisks(): boolean;
        /**
            * Get full protection sla time mins.
            * @returns {number}
            */
        get fullProtectionSlaTimeMins(): number;
        /**
            * Get incremental protection sla time mins.
            * @returns {number}
            */
        get incrementalProtectionSlaTimeMins(): number;
        /**
            * Get indexing policy.
            * @returns {BackupGroupIndexingPolicy}
            */
        get indexingPolicy(): BackupGroupIndexingPolicy;
        /**
            * Get policy id.
            * @returns {string}
            */
        get policyId(): string;
        /**
            * Get policy applied time.
            * @returns {number}
            */
        get policyAppliedTime(): number;
        /**
            * Get priority.
            * @returns {BackupGroupPriority}
            */
        get priority(): BackupGroupPriority;
        /**
            * Get qos type.
            * @returns {BackupGroupQosType}
            */
        get qosType(): BackupGroupQosType;
        /**
            * Get excluded sources.
            * @returns {Array<ProtectionSource>}
            */
        get excludedSources(): Array<ProtectionSource>;
        /**
            * Get protected sources.
            * @returns {Array<ProtectionSource>}
            */
        get protectedSources(): Array<ProtectionSource>;
        /**
            * Get start time.
            * @returns {TimeOfDay}
            */
        get startTime(): TimeOfDay;
        /**
            * Get timezone.
            * @returns {string}
            */
        get timezone(): string;
        /**
            * Get org uuid.
            * @returns {string}
            */
        get orgUuid(): string;
        /**
            * Get vdc uuid.
            * @returns {string}
            */
        get vdcUuid(): string;
        /**
            * Get abort in blackout period.
            * @returns {boolean}
            */
        get abortInBlackoutPeriod(): boolean;
        /**
            * Get continue on quiesce failure.
            * @returns {boolean}
            */
        get continueOnQuiesceFailure(): boolean;
        /**
            * Get quiesce.
            * @returns {boolean}
            */
        get quiesce(): boolean;
        /**
            * Get summary stats.
            * @returns {BackupSummaryStats | null}
            */
        get summaryStats(): BackupSummaryStats | null;
        /**
            * Get last run.
            * @returns {BackupGroupRun | null}
            */
        get lastRun(): BackupGroupRun | null;
        /**
            * Get backup policy.
            * @returns {BackupPolicy | null}
            */
        get backupPolicy(): BackupPolicy | null;
        /**
            * Get the json representation of this class.
            * @returns {BackupGroupJson}
            */
        get json(): BackupGroupJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
        /**
            * Get details of an individual backup protection group.
            *
            * @param {string} uid
            * @param {boolean} includeSummaryStats Default is false. (Optional)
            * @param {boolean} includeLastRun Default is false. (Optional)
            * @param {boolean} includeBackupPolicy Default is false. (Optional)
            * @return {Promise<BackupGroup>}
            */
        static getBackupGroup(uid: string, includeSummaryStats?: boolean, includeLastRun?: boolean, includeBackupPolicy?: boolean): Promise<BackupGroup>;
        /**
            * Get details for the policy associated with a specified backup group.
            *
            * @return {Promise<BackupPolicy>}
            */
        getBackupGroupPolicy(): Promise<BackupPolicy>;
        /**
            * Get a specific backup group run.
            *
            * @param {string} backupRunUid
            * @return {Promise<BackupGroupRun>}
            */
        getBackupGroupRun(backupRunUid: string): Promise<BackupGroupRun>;
        /**
            * List runs for the specified backup group.
            * Limit defaults to 10 and query time range defaults to last 24 hours.
            *
            * @param {number} startTimeMillis Default is 24 hours ago. (Optional)
            * @param {number} endTimeMillis Default is now. (Optional)
            * @param {number} limit Default is 10. (Optional)
            * @returns {Promise<Array<BackupGroupRun>>}
            */
        listBackupGroupRuns(startTimeMillis?: number, endTimeMillis?: number, limit?: number): Promise<Array<BackupGroupRun>>;
        /**
            * Get summary stats for an individual backup protection group.
            * Stat time-range defaults to the past 24 hours.
            * Both startTimeMillis and endTimeMillis params are required if one is used.
            *
            * @param {number} startTimeMillis Default is 24 hours ago. (Optional)
            * @param {number} endTimeMillis Default is now. (Optional)
            * @return {Promise<BackupGroupSummaryStats>}
            */
        getBackupGroupSummaryStats(startTimeMillis?: number, endTimeMillis?: number): Promise<BackupGroupSummaryStats>;
        /**
            * Update a backup group.
            *
            * @param {BackupGroupUpdateRequest} updateRequest
            * @returns {Promise<BackupGroup>}
            */
        updateBackupGroup(updateRequest: BackupGroupUpdateRequest): Promise<BackupGroup>;
        /**
            * Delete a backup group.
            *
            * @param {BackupGroupDeleteRequest} deleteRequest the deletion request
            * @returns {Promise<unknown>}
            */
        deleteBackupGroup(deleteRequest: BackupGroupDeleteRequest): Promise<unknown>;
        /**
            * Gets the list of storage metrics that are available for the backup group.
            *
            * @return {Promise<Array<BackupGroupStorageMetric>>} the list of storage metrics names
            */
        getBackupStorageMetrics(): Promise<Array<BackupGroupStorageMetric>>;
        /**
            * Gets a series of backup group storage samples for a specified storage
            * metric.
            *
            * @param {BackupGroupStorageMetric} metric the storage metric name
            * @param {number} startTimeMillis start of the series (Optional)
            * @param {number} endTimeMillis end of the series (Optional)
            * @return {Promise<BackupGroupStorageSampleSeries>} the sample series
            */
        getBackupStorageSamples(metric: BackupGroupStorageMetric, startTimeMillis?: number, endTimeMillis?: number): Promise<BackupGroupStorageSampleSeries>;
}

/**
    * IaaS backup bill.
    */
export class IaasBackupBill {
        constructor(_json: IaasBackupBillJson);
        /**
            * Get company id.
            * @returns {string}
            */
        get companyId(): string;
        /**
            * Get location id.
            * @returns {string}
            */
        get locationId(): string;
        /**
            * Get org uuid.
            * @returns {string}
            */
        get orgUuid(): string;
        /**
            * Get vdc uuid.
            * @returns {string}
            */
        get vdcUuid(): string;
        /**
            * Get year.
            * @returns {number}
            */
        get year(): number;
        /**
            * Get month.
            * The billing month, in range 1-12.
            * @returns {number}
            */
        get month(): number;
        /**
            * Get burst usage byte hours.
            * The number of byte-hours that have been consumed as burst.
            * @returns {number}
            */
        get burstUsageByteHours(): number;
        /**
            * Get burst cost.
            * The total cost of burst usage.
            * @returns {number}
            */
        get burstCost(): number;
        /**
            * Get reserved cost.
            * @returns {number}
            */
        get reservedCost(): number;
        /**
            * Get currency code.
            * @returns {CurrencyCode}
            */
        get currencyCode(): CurrencyCode;
        /**
            * Get the total number of byte-hours that have been consumed by local backups
            * @returns {number}
            */
        get localUsageByteHours(): number;
        /**
            * Get the total number of byte-hours that have been consumed by remote backups
            * @returns {number}
            */
        get remoteUsageByteHours(): number;
        /**
            * Get the total number of byte-hours that have been consumed
            * @returns {number}
            */
        get totalUsageByteHours(): number;
        /**
            * Get the json representation of this class.
            * @returns {IaasBackupBillJson}
            */
        get json(): IaasBackupBillJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Iaas backup subscription.
    */
export class IaasBackupSubscription {
        constructor(_json: IaasBackupSubscriptionJson);
        /**
            * Get the json representation of this class.
            * @returns {IaasBackupSubscriptionJson}
            */
        get json(): IaasBackupSubscriptionJson;
        /**
            * Get company id.
            * @returns {string}
            */
        get companyId(): string;
        /**
            * Get location id.
            * @returns {string}
            */
        get locationId(): string;
        /**
            * Get org uuid.
            * @returns {string}
            */
        get orgUuid(): string;
        /**
            * Get vdc uuid.
            * @returns {string}
            */
        get vdcUuid(): string;
        /**
            * Get activation time.
            * @returns {number}
            */
        get activationTime(): number;
        /**
            * Get deactivation time.
            * @returns {number | null}
            */
        get deactivationTime(): number | null;
        /**
            * Get reserved amount gb.
            * @returns {number}
            */
        get reservedAmountGb(): number;
        /**
            * Get reserved cost.
            * @returns {number}
            */
        get reservedCost(): number;
        /**
            * Get burst cost per GB-hour.
            * @returns {number}
            */
        get burstCostPerGbHour(): number;
        /**
            * Get currency code.
            * @returns {CurrencyCode}
            */
        get currencyCode(): CurrencyCode;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Backup Group Disk Unit.
    */
export class ProtectionSource {
        constructor(_json: ProtectionSourceJson);
        /**
            * Gets the iland entity UUID. May be null if the source has been deleted.
            * @returns {string | null} iland entity uuid
            */
        get entityUuid(): string | null;
        /**
            * Gets the type of the associated iland IaaS entity.
            * @returns {VCloudProtectionSourceType} entity type
            */
        get entityType(): VCloudProtectionSourceType;
        /**
            * Gets the name of the associated entity.
            * @returns {string} entity name
            */
        get entityName(): string;
        /**
            * The UID of the associated entity in the backend backup system.
            * @returns {string} native uid
            */
        get nativeUid(): string;
        /**
            * Gets the json representation of this class.
            * @returns {ProtectionSourceJson}
            */
        get json(): ProtectionSourceJson;
        /**
            * Gets the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Sample.
    */
export class Sample {
        constructor(_json: SampleJson);
        /**
            * Get components.
            * The component samples that contribute to the total value. A map of backup
            * cluster UID to value in bytes. Value may be null if the component has no
            * contribution.
            * @returns {Record<string, number | null>}
            */
        get components(): Record<string, number | null>;
        /**
            * Get timestamp.
            * @returns {number}
            */
        get timestamp(): number;
        /**
            * Get value.
            * @returns {number | null}
            */
        get value(): number | null;
        /**
            * Get the json representation of this class.
            * @returns {SampleJson}
            */
        get json(): SampleJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Backup Group Disk Unit.
    */
export class TimeOfDay {
        constructor(_json: TimeOfDayJson);
        /**
            * Gets an (0-23) hour in a day.
            * @returns {number} hour
            */
        get hour(): number;
        /**
            * Gets a (0-59) minute in an hour.
            * @returns {number} minute
            */
        get minute(): number;
        /**
            * Gets the json representation of this class.
            * @returns {TimeOfDayJson}
            */
        get json(): TimeOfDayJson;
        /**
            * Gets the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * vDC backup storage sample series.
    */
export class VdcBackupStorageSampleSeries {
        constructor(_json: VdcBackupStorageSampleSeriesJson);
        /**
            * Get metric.
            * @returns {VdcBackupStorageMetric}
            */
        get metric(): VdcBackupStorageMetric;
        /**
            * Get location id.
            * @returns {string}
            */
        get locationId(): string;
        /**
            * Get company id.
            * @returns {string}
            */
        get companyId(): string;
        /**
            * Get org uuid.
            * @returns {string}
            */
        get orgUuid(): string;
        /**
            * Get vDC uuid.
            * @returns {string}
            */
        get vdcUuid(): string;
        /**
            * Get samples.
            * @returns {Array<Sample>}
            */
        get samples(): Array<Sample>;
        /**
            * Get backup cluster id.
            * @returns {string}
            */
        get backupClusterId(): string;
        /**
            * Get the json representation of this class.
            * @returns {VdcBackupStorageSampleSeriesJson}
            */
        get json(): VdcBackupStorageSampleSeriesJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
  * Archival External Target JSON.
  */
export interface ArchivalExternalTargetJson {
    vault_id: number;
    vault_name: string;
    vault_type: VaultType;
}

/**
  * Backup Policy JSON.
  */
export interface BackupPolicyJson {
    scope: BackupPolicyScopeType;
    blackout_periods: Array<BlackoutPeriodJson>;
    days_to_keep: number;
    days_to_keep_log: number;
    description: string;
    extended_retention_policies: Array<ExtendedRetentionPolicyJson>;
    full_scheduling_policy: SchedulingPolicyJson;
    uid: string;
    incremental_scheduling_policy: SchedulingPolicyJson;
    last_modified_time_msecs: number;
    log_scheduling_policy: SchedulingPolicyJson;
    name: string;
    retries: number;
    retry_interval_mins: number;
    skip_interval_mins: number;
    snapshot_archival_copy_policies: Array<SnapshotArchivalCopyPolicyJson>;
    snapshot_replication_copy_policies: Array<SnapshotReplicationCopyPolicyJson>;
    location_id: string;
    org_uuid: string;
    company_id: string;
    vdc_uuid: string;
}

/**
  * Backup Policy List JSON.
  */
export interface BackupPolicyListJson {
    data: Array<BackupPolicyJson>;
}

/**
  * Backup Policy Scope Type Enum.
  */
export enum BackupPolicyScopeType {
    ORG = "ORG",
    VDC = "VDC"
}

/**
  * Backup Policy Update Request JSON.
  */
export interface BackupPolicyUpdateRequestJson {
    blackout_periods: Array<BlackoutPeriodJson>;
    days_to_keep: number;
    days_to_keep_log: number;
    description: string;
    extended_retention_policies: Array<ExtendedRetentionPolicyJson>;
    full_scheduling_policy: SchedulingPolicyJson;
    incremental_scheduling_policy: SchedulingPolicyJson;
    log_scheduling_policy: SchedulingPolicyJson;
    name: string;
    retries: number;
    retry_interval_mins: number;
    skip_interval_mins: number;
    snapshot_archival_copy_policies: Array<SnapshotArchivalCopyPolicyJson>;
    snapshot_replication_copy_policies: Array<SnapshotReplicationCopyPolicyJson>;
}

/**
  * Blackout Period JSON.
  */
export interface BlackoutPeriodJson {
    day: Day;
    end_time: TimeOfDayJson;
    start_time: TimeOfDayJson;
}

/**
  * Continuous Schedule JSON.
  */
export interface ContinuousScheduleJson {
    backup_interval_mins: number;
}

/**
  * Daily Schedule JSON.
  */
export interface DailyScheduleJson {
    days: Array<Day>;
}

/**
  * Day Count Enum.
  */
export enum DayCount {
    FIRST = "FIRST",
    SECOND = "SECOND",
    THIRD = "THIRD",
    FOURTH = "FOURTH",
    LAST = "LAST"
}

/**
  * Day Enum.
  */
export enum Day {
    SUNDAY = "SUNDAY",
    MONDAY = "MONDAY",
    TUESDAY = "TUESDAY",
    WEDNESDAY = "WEDNESDAY",
    THURSDAY = "THURSDAY",
    FRIDAY = "FRIDAY",
    SATURDAY = "SATURDAY"
}

/**
  * Extended Retention Policy JSON.
  */
export interface ExtendedRetentionPolicyJson {
    backup_run_type: RunType;
    days_to_keep: number;
    multiplier: number;
    periodicity: ReplicationPeriodicity;
}

/**
  * Local vDC Backup Cluster Info JSON.
  */
export interface LocalVdcBackupClusterInfoJson {
    uid: string;
    name: string;
}

/**
  * Monthly Schedule JSON.
  */
export interface MonthlyScheduleJson {
    day: Day;
    day_count: DayCount;
}

/**
  * Periodicity Enum.
  */
export enum Periodicity {
    CONTINUOUS = "CONTINUOUS",
    DAILY = "DAILY",
    MONTHLY = "MONTHLY"
}

/**
  * Remote Backup Cluster Status Enum.
  */
export enum RemoteBackupClusterStatus {
    PAIRED = "PAIRED",
    UNPAIRED = "UNPAIRED"
}

/**
  * Remote vDC Backup Cluster Info JSON.
  */
export interface RemoteVdcBackupClusterInfoJson {
    uid: string;
    name: string;
    status: RemoteBackupClusterStatus;
}

/**
  * Replication Periodicity Enum.
  */
export enum ReplicationPeriodicity {
    EVERY = "EVERY",
    HOUR = "HOUR",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}

/**
  * Replication Target Settings JSON.
  */
export interface ReplicationTargetSettingsJson {
    cluster_id: number;
}

/**
  * Run Type Enum.
  */
export enum RunType {
    REGULAR = "REGULAR",
    FULL = "FULL",
    LOG = "LOG",
    SYSTEM = "SYSTEM"
}

/**
  * Scheduling Policy JSON.
  */
export interface SchedulingPolicyJson {
    continuous_schedule: ContinuousScheduleJson;
    daily_schedule: DailyScheduleJson;
    monthly_schedule: MonthlyScheduleJson;
    periodicity: Periodicity;
}

/**
  * Snapshot Archival Policy JSON.
  */
export interface SnapshotArchivalCopyPolicyJson {
    copy_partial: boolean;
    days_to_keep: number;
    multiplier: number;
    periodicity: ReplicationPeriodicity;
    target: ArchivalExternalTargetJson;
}

/**
  * Snapshot Replication Copy Policy JSON.
  */
export interface SnapshotReplicationCopyPolicyJson {
    copy_partial: boolean;
    days_to_keep: number;
    multiplier: number;
    periodicity: ReplicationPeriodicity;
    target: ReplicationTargetSettingsJson;
}

/**
  * Vault Type Enum.
  */
export enum VaultType {
    CLOUD = "CLOUD",
    TAPE = "TAPE",
    NAS = "NAS"
}

/**
  * vDC Backup Cluster Info JSON.
  */
export interface VdcBackupClusterInfoJson {
    vdc_uuid: string;
    local_cluster: LocalVdcBackupClusterInfoJson;
    remote_clusters: Array<RemoteVdcBackupClusterInfoJson>;
}

/**
    * Archival External Target.
    */
export class ArchivalExternalTarget {
        constructor(_json: ArchivalExternalTargetJson);
        /**
            * Get vault id.
            * @returns {number}
            */
        get vaultId(): number;
        /**
            * Get vault name.
            * @returns {string}
            */
        get vaultName(): string;
        /**
            * Get vault type.
            * @returns {VaultType}
            */
        get vaultType(): VaultType;
        /**
            * Get the json representation of this class.
            * @returns {ArchivalExternalTargetJson}
            */
        get json(): ArchivalExternalTargetJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Backup Policy List.
    */
export class BackupPolicyList {
        constructor(_json: BackupPolicyListJson);
        /**
            * Get data.
            * @returns {Array<BackupPolicy>}
            */
        get data(): Array<BackupPolicy>;
        /**
            * Get the json representation of this class.
            * @returns {BackupPolicyListJson}
            */
        get json(): BackupPolicyListJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Backup Policy Update Request.
    */
export class BackupPolicyUpdateRequest {
        constructor(backupPolicyUpdateRequest: BackupPolicyUpdateRequest);
        constructor(backupPolicyUpdateRequestJson: BackupPolicyUpdateRequestJson);
        constructor(blackoutPeriods: Array<BlackoutPeriodJson>, daysToKeep: number, daysToKeepLog: number, description: string, extendedRetentionPolicies: Array<ExtendedRetentionPolicyJson>, fullSchedulingPolicy: SchedulingPolicyJson, incrementalSchedulingPolicy: SchedulingPolicyJson, logSchedulingPolicy: SchedulingPolicyJson, name: string, retries: number, retryIntervalMins: number, skipIntervalMins: number, snapshotArchivalCopyPolicies: Array<SnapshotArchivalCopyPolicyJson>, snapshotReplicationCopyPolicies: Array<SnapshotReplicationCopyPolicyJson>);
        /**
            * Get blackout periods.
            * @returns {Array<BlackoutPeriod>}
            */
        get blackoutPeriods(): Array<BlackoutPeriod>;
        /**
            * Get days to keep.
            * @returns {number}
            */
        get daysToKeep(): number;
        /**
            * Get days to keep log.
            * @returns {number | null}
            */
        get daysToKeepLog(): number | null;
        /**
            * Get description.
            * @returns {string | null}
            */
        get description(): string | null;
        /**
            * Get extended retention policies.
            * @returns {Array<ExtendedRetentionPolicy>}
            */
        get extendedRetentionPolicies(): Array<ExtendedRetentionPolicy>;
        /**
            * Get full scheduling policy.
            * @returns {SchedulingPolicy | null}
            */
        get fullSchedulingPolicy(): SchedulingPolicy | null;
        /**
            * Get incremental scheduling policy.
            * @returns {SchedulingPolicy}
            */
        get incrementalSchedulingPolicy(): SchedulingPolicy;
        /**
            * Get log scheduling policy.
            * @returns {SchedulingPolicy | null}
            */
        get logSchedulingPolicy(): SchedulingPolicy | null;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get retries.
            * @returns {number}
            */
        get retries(): number;
        /**
            * Get retry interval mins.
            * @returns {number}
            */
        get retryIntervalMins(): number;
        /**
            * Get skip interval mins.
            * @returns {number | null}
            */
        get skipIntervalMins(): number | null;
        /**
            * Get snapshot archival copy policies.
            * @returns {Array<SnapshotArchivalCopyPolicy>}
            */
        get snapshotArchivalCopyPolicies(): Array<SnapshotArchivalCopyPolicy>;
        /**
            * Get snapshot replication copy policies.
            * @returns {Array<SnapshotReplicationCopyPolicy>}
            */
        get snapshotReplicationCopyPolicies(): Array<SnapshotReplicationCopyPolicy>;
        /**
            * Get the json representation of this class.
            * @returns {BackupPolicyUpdateRequestJson}
            */
        get json(): BackupPolicyUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Backup Policy.
    */
export class BackupPolicy {
        constructor(_json: BackupPolicyJson);
        /**
            * Get scope.
            * @returns {BackupPolicyScopeType}
            */
        get scope(): BackupPolicyScopeType;
        /**
            * Get blackout periods.
            * @returns {Array<BlackoutPeriod>}
            */
        get blackoutPeriods(): Array<BlackoutPeriod>;
        /**
            * Get days to keep.
            * @returns {number}
            */
        get daysToKeep(): number;
        /**
            * Get days to keep log.
            * @returns {number | null}
            */
        get daysToKeepLog(): number | null;
        /**
            * Get description.
            * @returns {string | null}
            */
        get description(): string | null;
        /**
            * Get extended retention policies.
            * @returns {Array<ExtendedRetentionPolicy>}
            */
        get extendedRetentionPolicies(): Array<ExtendedRetentionPolicy>;
        /**
            * Get full scheduling policy.
            * @returns {SchedulingPolicy | null}
            */
        get fullSchedulingPolicy(): SchedulingPolicy | null;
        /**
            * Get uid.
            * @returns {string}
            */
        get uid(): string;
        /**
            * Get incremental scheduling policy.
            * @returns {SchedulingPolicy}
            */
        get incrementalSchedulingPolicy(): SchedulingPolicy;
        /**
            * Get last modified time msecs.
            * @returns {number | null}
            */
        get lastModifiedTimeMsecs(): number | null;
        /**
            * Get log scheduling policy.
            * @returns {SchedulingPolicy | null}
            */
        get logSchedulingPolicy(): SchedulingPolicy | null;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get retries.
            * @returns {number}
            */
        get retries(): number;
        /**
            * Get retry interval mins.
            * @returns {number}
            */
        get retryIntervalMins(): number;
        /**
            * Get skip interval mins.
            * @returns {number | null}
            */
        get skipIntervalMins(): number | null;
        /**
            * Get snapshot archival copy policies.
            * @returns {Array<SnapshotArchivalCopyPolicy>}
            */
        get snapshotArchivalCopyPolicies(): Array<SnapshotArchivalCopyPolicy>;
        /**
            * Get snapshot replication copy policies.
            * @returns {Array<SnapshotReplicationCopyPolicy>}
            */
        get snapshotReplicationCopyPolicies(): Array<SnapshotReplicationCopyPolicy>;
        /**
            * Get location id.
            * @returns {string}
            */
        get locationId(): string;
        /**
            * Get org uuid.
            * @returns {string}
            */
        get orgUuid(): string;
        /**
            * Get company id.
            * @returns {string}
            */
        get companyId(): string;
        /**
            * Get vdc uuid.
            * @returns {string | null}
            */
        get vdcUuid(): string | null;
        /**
            * Get the json representation of this class.
            * @returns {BackupPolicyJson}
            */
        get json(): BackupPolicyJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Blackout Period.
    */
export class BlackoutPeriod {
        constructor(_json: BlackoutPeriodJson);
        /**
            * Get day.
            * @returns {Day | null}
            */
        get day(): Day | null;
        /**
            * Get end time.
            * @returns {TimeOfDay}
            */
        get endTime(): TimeOfDay;
        /**
            * Get start time.
            * @returns {TimeOfDay}
            */
        get startTime(): TimeOfDay;
        /**
            * Get the json representation of this class.
            * @returns {BlackoutPeriodJson}
            */
        get json(): BlackoutPeriodJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Continuous Schedule.
    */
export class ContinuousSchedule {
        constructor(_json: ContinuousScheduleJson);
        /**
            * Get backup interval in minutes.
            * @returns {number}
            */
        get backupIntervalMins(): number;
        /**
            * Get the json representation of this class.
            * @returns {ContinuousScheduleJson}
            */
        get json(): ContinuousScheduleJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Daily Schedule.
    */
export class DailySchedule {
        constructor(_json: DailyScheduleJson);
        /**
            * Get days.
            * @returns {Array<Day>}
            */
        get days(): Array<Day>;
        /**
            * Get the json representation of this class.
            * @returns {DailyScheduleJson}
            */
        get json(): DailyScheduleJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Extended Retention Policy.
    */
export class ExtendedRetentionPolicy {
        constructor(_json: ExtendedRetentionPolicyJson);
        /**
            * Get backup run type.
            * @returns {RunType | null}
            */
        get backupRunType(): RunType | null;
        /**
            * Get days to keep.
            * @returns {number}
            */
        get daysToKeep(): number;
        /**
            * Get multiplier.
            * @returns {number}
            */
        get multiplier(): number;
        /**
            * Get periodicity.
            * @returns {ReplicationPeriodicity}
            */
        get periodicity(): ReplicationPeriodicity;
        /**
            * Get the json representation of this class.
            * @returns {ExtendedRetentionPolicyJson}
            */
        get json(): ExtendedRetentionPolicyJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Local vDC Backup Cluster Info.
    */
export class LocalVdcBackupClusterInfo {
        constructor(_json: LocalVdcBackupClusterInfoJson);
        /**
            * Get uid.
            * @returns {string}
            */
        get uid(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get the json representation of this class.
            * @returns {LocalVdcBackupClusterInfoJson}
            */
        get json(): LocalVdcBackupClusterInfoJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Monthly Schedule.
    */
export class MonthlySchedule {
        constructor(_json: MonthlyScheduleJson);
        /**
            * Get day.
            * @returns {Day}
            */
        get day(): Day;
        /**
            * Get day count.
            * @returns {DayCount}
            */
        get dayCount(): DayCount;
        /**
            * Get the json representation of this class.
            * @returns {MonthlyScheduleJson}
            */
        get json(): MonthlyScheduleJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Remote vDC Backup Cluster Info.
    */
export class RemoteVdcBackupClusterInfo {
        constructor(_json: RemoteVdcBackupClusterInfoJson);
        /**
            * Get uid.
            * @returns {string}
            */
        get uid(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get status.
            * @returns {RemoteBackupClusterStatus}
            */
        get status(): RemoteBackupClusterStatus;
        /**
            * Get the json representation of this class.
            * @returns {RemoteVdcBackupClusterInfoJson}
            */
        get json(): RemoteVdcBackupClusterInfoJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Replication Target Settings.
    */
export class ReplicationTargetSettings {
        constructor(_json: ReplicationTargetSettingsJson);
        /**
            * Get cluster ID.
            * @returns {number}
            */
        get clusterId(): number;
        /**
            * Get the json representation of this class.
            * @returns {ReplicationTargetSettingsJson}
            */
        get json(): ReplicationTargetSettingsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Scheduling Policy.
    */
export class SchedulingPolicy {
        constructor(_json: SchedulingPolicyJson);
        /**
            * Get continuous schedule.
            * @returns {ContinuousSchedule | null}
            */
        get continuousSchedule(): ContinuousSchedule | null;
        /**
            * Get daily schedule.
            * @returns {DailySchedule | null}
            */
        get dailySchedule(): DailySchedule | null;
        /**
            * Get monthly schedule.
            * @returns {MonthlySchedule | null}
            */
        get monthlySchedule(): MonthlySchedule | null;
        /**
            * Get periodicity.
            * @returns {Periodicity}
            */
        get periodicity(): Periodicity;
        /**
            * Get the json representation of this class.
            * @returns {SchedulingPolicyJson}
            */
        get json(): SchedulingPolicyJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Snapshot Archival Copy Policy.
    */
export class SnapshotArchivalCopyPolicy {
        constructor(_json: SnapshotArchivalCopyPolicyJson);
        /**
            * Get whether snapshots were not captured for all objects in the group (true) or
            * all objects were successfully captured (false).
            * @returns {boolean}
            */
        get isCopyPartial(): boolean;
        /**
            * Get days to keep.
            * @returns {number}
            */
        get daysToKeep(): number;
        /**
            * Get multiplier.
            * @returns {number}
            */
        get multiplier(): number;
        /**
            * Get periodicity.
            * @returns {ReplicationPeriodicity}
            */
        get periodicity(): ReplicationPeriodicity;
        /**
            * Get archival external target.
            * @returns {ArchivalExternalTarget}
            */
        get target(): ArchivalExternalTarget;
        /**
            * Get the json representation of this class.
            * @returns {SnapshotArchivalCopyPolicyJson}
            */
        get json(): SnapshotArchivalCopyPolicyJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Snapshot Replication Copy Policy.
    */
export class SnapshotReplicationCopyPolicy {
        constructor(_json: SnapshotReplicationCopyPolicyJson);
        /**
            * Get whether snapshots were not captured for all objects in the group (true) or
            * all objects were successfully captured (false).
            * @returns {boolean}
            */
        get isCopyPartial(): boolean;
        /**
            * Get days to keep.
            * @returns {number}
            */
        get daysToKeep(): number;
        /**
            * Get multiplier.
            * @returns {number}
            */
        get multiplier(): number;
        /**
            * Get periodicity.
            * @returns {ReplicationPeriodicity}
            */
        get periodicity(): ReplicationPeriodicity;
        /**
            * Get target.
            * @returns {ReplicationTargetSettings}
            */
        get target(): ReplicationTargetSettings;
        /**
            * Get the json representation of this class.
            * @returns {SnapshotReplicationCopyPolicyJson}
            */
        get json(): SnapshotReplicationCopyPolicyJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * vDC Backup Cluster Info.
    */
export class VdcBackupClusterInfo {
        constructor(_json: VdcBackupClusterInfoJson);
        /**
            * Get vDC uuid.
            * @returns {string}
            */
        get vdcUuid(): string;
        /**
            * Get local cluster.
            * @returns {LocalVdcBackupClusterInfo}
            */
        get localCluster(): LocalVdcBackupClusterInfo;
        /**
            * Get remote clusters.
            * @returns {Array<RemoteVdcBackupClusterInfo>}
            */
        get remoteClusters(): Array<RemoteVdcBackupClusterInfo>;
        /**
            * Get the json representation of this class.
            * @returns {VdcBackupClusterInfoJson}
            */
        get json(): VdcBackupClusterInfoJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
  * Backup Group Run JSON.
  */
export interface BackupGroupRunJson {
    uid: string;
    backup_run: BackupRunJson;
    copy_runs: Array<CopyRunJson>;
    backup_group_uid: string;
    backup_group_name: string;
    org_uuid: string;
    vdc_uuid: string;
    company_id: string;
    location_id: string;
}

/**
  * Backup Group Run List JSON.
  */
export interface BackupGroupRunListJson {
    data: Array<BackupGroupRunJson>;
}

/**
  * Backup Group Summary Stats JSON.
  */
export interface BackupGroupSummaryStatsJson {
    backup_group_uid: string;
    stats: BackupSummaryStatsJson;
}

/**
  * Backup Run JSON.
  */
export interface BackupRunJson {
    error_message?: string;
    success_message?: string;
    metadata_deleted: boolean;
    quiesced: boolean;
    run_type: RunType;
    sla_violated?: boolean;
    snapshots_deleted: boolean;
    snapshots_deleted_time?: number;
    source_backup_status: Array<SourceBackupStatusJson>;
    stats: BackupRunStatsJson;
    status: StatusBackupRun;
    warnings: Array<string>;
}

/**
  * Backup Run Stats JSON.
  */
export interface BackupRunStatsJson {
    admitted_time?: number;
    end_time?: number;
    num_canceled_tasks: number;
    num_failed_tasks: number;
    num_successful_tasks: number;
    start_time_millis: number;
    start_time_usecs: number;
    time_taken_millis?: number;
    total_bytes_read_from_source: number;
    total_bytes_to_read_from_source: number;
    total_logical_backup_size_bytes: number;
    total_physical_backup_size_bytes: number;
    total_source_size_bytes: number;
}

/**
  * Backup Source Stats JSON.
  */
export interface BackupSourceStatsJson {
    admitted_time?: number;
    end_time?: number;
    start_time: number;
    time_taken_millis?: number;
    total_bytes_read_from_source: number;
    total_bytes_to_read_from_source: number;
    total_logical_backup_size_bytes: number;
    total_physical_backup_size_bytes: number;
    total_source_size_bytes: number;
}

/**
  * Backup Summary Stats JSON.
  */
export interface BackupSummaryStatsJson {
    num_canceled_runs: number;
    num_failed_runs: number;
    num_sla_violations: number;
    num_successful_runs: number;
    num_running_runs: number;
    average_run_time_millis: number;
    fastest_run_time_millis: number;
    slowest_run_time_millis: number;
    total_bytes_read_from_source: number;
    total_logical_backup_size_bytes: number;
    total_physical_backup_size_bytes: number;
}

/**
  * Copy Run JSON.
  */
export interface CopyRunJson {
    copy_snapshot_tasks: Array<CopySnapshotTaskStatusJson>;
    error?: string;
    expiry_time?: number;
    run_start_time: number;
    stats?: CopyRunStatsJson;
    status: StatusCopyRun;
    target: SnapshotTargetSettingsJson;
}

/**
  * Copy Run Stats JSON.
  */
export interface CopyRunStatsJson {
    end_time?: number;
    is_incremental?: boolean;
    logical_bytes_transferred: number;
    logical_size_bytes: number;
    logical_transfer_rate_bps: number;
    physical_bytes_transferred: number;
    start_time?: number;
}

/**
  * Copy Snapshot Task Status JSON.
  */
export interface CopySnapshotTaskStatusJson {
    error?: string;
    source: ProtectionSourceJson;
    stats: CopyRunStatsJson;
    status: StatusCopySnapshotTaskStatus;
    task_end_time?: number;
    task_start_time: number;
}

/**
  * Org Backup Summary Stats JSON.
  */
export interface OrgBackupSummaryStatsJson {
    org_uuid: string;
    stats: BackupSummaryStatsJson;
    vdc_stats: Array<VdcBackupSummaryStatsJson>;
}

/**
  * Snapshot Target Settings JSON.
  */
export interface SnapshotTargetSettingsJson {
    archival_target?: ArchivalExternalTargetJson;
    replication_target?: ReplicationTargetSettingsJson;
    type: SnapshotTargetType;
}

/**
  * Snapshot Target Type Enum.
  */
export enum SnapshotTargetType {
    LOCAL = "LOCAL",
    REMOTE = "REMOTE",
    ARCHIVAL = "ARCHIVAL",
    CLOUD_DEPLOY = "CLOUD_DEPLOY"
}

/**
  * Source Backup Status JSON.
  */
export interface SourceBackupStatusJson {
    error?: string;
    is_full_backup: boolean;
    num_restarts: number;
    quiesced: boolean;
    sla_violated: boolean;
    source: ProtectionSourceJson;
    stats: BackupSourceStatsJson;
    status: StatusSourceBackupStatus;
    warnings: Array<string>;
}

/**
  * Status Backup Run Enum.
  */
export enum StatusBackupRun {
    ACCEPTED = "ACCEPTED",
    RUNNING = "RUNNING",
    CANCELING = "CANCELING",
    CANCELED = "CANCELED",
    SUCCESS = "SUCCESS",
    FAILURE = "FAILURE",
    UNKNOWN = "UNKNOWN",
    WARNING = "WARNING"
}

/**
  * Status Copy Run Enum.
  */
export enum StatusCopyRun {
    ACCEPTED = "ACCEPTED",
    RUNNING = "RUNNING",
    CANCELING = "CANCELING",
    CANCELED = "CANCELED",
    SUCCESS = "SUCCESS",
    FAILURE = "FAILURE"
}

/**
  * Status Copy Snapshot Task Status Enum.
  */
export enum StatusCopySnapshotTaskStatus {
    ACCEPTED = "ACCEPTED",
    RUNNING = "RUNNING",
    CANCELING = "CANCELING",
    CANCELED = "CANCELED",
    SUCCESS = "SUCCESS",
    FAILURE = "FAILURE"
}

/**
  * Status Source Backup Status Enum.
  */
export enum StatusSourceBackupStatus {
    ACCEPTED = "ACCEPTED",
    RUNNING = "RUNNING",
    CANCELING = "CANCELING",
    CANCELED = "CANCELED",
    SUCCESS = "SUCCESS",
    FAILURE = "FAILURE"
}

/**
  * vDC Backup Summary Stats JSON.
  */
export interface VdcBackupSummaryStatsJson {
    vdc_uuid: string;
    stats: BackupSummaryStatsJson;
    backup_group_stats: Array<BackupGroupSummaryStatsJson>;
}

/**
    * Backup Group Run List.
    */
export class BackupGroupRunList {
        constructor(_json: BackupGroupRunListJson);
        /**
            * Get data.
            * @returns {Array<BackupGroupRun>}
            */
        get data(): Array<BackupGroupRun>;
        /**
            * Get the json representation of this class.
            * @returns {BackupGroupRunListJson}
            */
        get json(): BackupGroupRunListJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Backup Group Run.
    */
export class BackupGroupRun {
        constructor(_json: BackupGroupRunJson);
        /**
            * Get uid.
            * @returns {string}
            */
        get uid(): string;
        /**
            * Get backup run.
            * @returns {BackupRun}
            */
        get backupRun(): BackupRun;
        /**
            * Get copy runs.
            * @returns {Array<CopyRun>}
            */
        get copyRuns(): Array<CopyRun>;
        /**
            * Get backup group uid.
            * @returns {string}
            */
        get backupGroupUid(): string;
        /**
            * Get backup group name.
            * @returns {string}
            */
        get backupGroupName(): string;
        /**
            * Get org uuid.
            * @returns {string}
            */
        get orgUuid(): string;
        /**
            * Get vdc uuid.
            * @returns {string}
            */
        get vdcUuid(): string;
        /**
            * Get company id.
            * @returns {string}
            */
        get companyId(): string;
        /**
            * Get location id.
            * @returns {string}
            */
        get locationId(): string;
        /**
            * Get the json representation of this class.
            * @returns {BackupGroupRunJson}
            */
        get json(): BackupGroupRunJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Backup Group Summary Stats.
    */
export class BackupGroupSummaryStats {
        constructor(_json: BackupGroupSummaryStatsJson);
        /**
            * Get backup group uid.
            * @returns {string}
            */
        get backupGroupUid(): string;
        /**
            * Get stats.
            * @returns {BackupSummaryStats}
            */
        get stats(): BackupSummaryStats;
        /**
            * Get the json representation of this class.
            * @returns {BackupGroupSummaryStatsJson}
            */
        get json(): BackupGroupSummaryStatsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Backup Run Stats.
    */
export class BackupRunStats {
        constructor(_json: BackupRunStatsJson);
        /**
            * Get admitted time.
            * @returns {number | null}
            */
        get admittedTime(): number | null;
        /**
            * Get end time.
            * @returns {number | null}
            */
        get endTime(): number | null;
        /**
            * Get num canceled tasks.
            * @returns {number}
            */
        get numCanceledTasks(): number;
        /**
            * Get num failed tasks.
            * @returns {number}
            */
        get numFailedTasks(): number;
        /**
            * Get num successful tasks.
            * @returns {number}
            */
        get numSuccessfulTasks(): number;
        /**
            * Get start time in milliseconds.
            * @returns {number}
            */
        get startTimeMillis(): number;
        /**
            * Get start time usecs.
            * @deprecated
            * @returns {number}
            */
        get startTimeUsecs(): number;
        /**
            * Get time taken millis.
            * @returns {number | null}
            */
        get timeTakenMillis(): number | null;
        /**
            * Get total bytes read from source.
            * @returns {number}
            */
        get totalBytesReadFromSource(): number;
        /**
            * Get total bytes to read from source.
            * @returns {number}
            */
        get totalBytesToReadFromSource(): number;
        /**
            * Get total logical backup size bytes.
            * @returns {number}
            */
        get totalLogicalBackupSizeBytes(): number;
        /**
            * Get total physical backup size bytes.
            * @returns {number}
            */
        get totalPhysicalBackupSizeBytes(): number;
        /**
            * Get total source size bytes.
            * @returns {number}
            */
        get totalSourceSizeBytes(): number;
        /**
            * Get the json representation of this class.
            * @returns {BackupRunStatsJson}
            */
        get json(): BackupRunStatsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Backup Run.
    */
export class BackupRun {
        constructor(_json: BackupRunJson);
        /**
            * Get error message.
            * @returns {string | null}
            */
        get errorMessage(): string | null;
        /**
            * Get success message.
            * @returns {string | null}
            */
        get successMessage(): string | null;
        /**
            * Get metadata deleted.
            * @returns {boolean}
            */
        get metadataDeleted(): boolean;
        /**
            * Get quiesced.
            * @returns {boolean}
            */
        get quiesced(): boolean;
        /**
            * Get run type.
            * @returns {RunType}
            */
        get runType(): RunType;
        /**
            * Get sla violated.
            * @returns {boolean | null}
            */
        get slaViolated(): boolean | null;
        /**
            * Get snapshots deleted.
            * @returns {boolean}
            */
        get snapshotsDeleted(): boolean;
        /**
            * Get snapshots deleted time.
            * @returns {number | null}
            */
        get snapshotsDeletedTime(): number | null;
        /**
            * Get source backup status.
            * @returns {Array<SourceBackupStatus>}
            */
        get sourceBackupStatus(): Array<SourceBackupStatus>;
        /**
            * Get stats.
            * @returns {BackupRunStats}
            */
        get stats(): BackupRunStats;
        /**
            * Get status.
            * @returns {StatusBackupRun}
            */
        get status(): StatusBackupRun;
        /**
            * Get warnings.
            * @returns {Array<string>}
            */
        get warnings(): Array<string>;
        /**
            * Get the json representation of this class.
            * @returns {BackupRunJson}
            */
        get json(): BackupRunJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Backup Source Stats.
    */
export class BackupSourceStats {
        constructor(_json: BackupSourceStatsJson);
        /**
            * Get admitted time.
            * @returns {number | null}
            */
        get admittedTime(): number | null;
        /**
            * Get end time.
            * @returns {number | null}
            */
        get endTime(): number | null;
        /**
            * Get start time.
            * @returns {number}
            */
        get startTime(): number;
        /**
            * Get time taken millis.
            * @returns {number | null}
            */
        get timeTakenMillis(): number | null;
        /**
            * Get total bytes read from source.
            * @returns {number}
            */
        get totalBytesReadFromSource(): number;
        /**
            * Get total bytes to read from source.
            * @returns {number}
            */
        get totalBytesToReadFromSource(): number;
        /**
            * Get total logical backup size bytes.
            * @returns {number}
            */
        get totalLogicalBackupSizeBytes(): number;
        /**
            * Get total physical backup size bytes.
            * @returns {number}
            */
        get totalPhysicalBackupSizeBytes(): number;
        /**
            * Get total source size bytes.
            * @returns {number}
            */
        get totalSourceSizeBytes(): number;
        /**
            * Get the json representation of this class.
            * @returns {BackupSourceStatsJson}
            */
        get json(): BackupSourceStatsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Backup Summary Stats.
    */
export class BackupSummaryStats {
        constructor(_json: BackupSummaryStatsJson);
        /**
            * Get number of canceled runs.
            * @returns {number}
            */
        get numCanceledRuns(): number;
        /**
            * Get number of failed runs.
            * @returns {number}
            */
        get numFailedRuns(): number;
        /**
            * Get number of sla violations.
            * @returns {number}
            */
        get numSlaViolations(): number;
        /**
            * Get number of successful runs.
            * @returns {number}
            */
        get numSuccessfulRuns(): number;
        /**
            * Get number of running runs.
            * @returns {number}
            */
        get numRunningRuns(): number;
        /**
            * Get average run time millis.
            * @returns {number | null}
            */
        get averageRunTimeMillis(): number | null;
        /**
            * Get fastest run time millis.
            * @returns {number | null}
            */
        get fastestRunTimeMillis(): number | null;
        /**
            * Get slowest run time millis.
            * @returns {number | null}
            */
        get slowestRunTimeMillis(): number | null;
        /**
            * Get total bytes read from source.
            * @returns {number}
            */
        get totalBytesReadFromSource(): number;
        /**
            * Get total logical backup size bytes.
            * @returns {number}
            */
        get totalLogicalBackupSizeBytes(): number;
        /**
            * Get total physical backup size bytes.
            * @returns {number}
            */
        get totalPhysicalBackupSizeBytes(): number;
        /**
            * Get the json representation of this class.
            * @returns {BackupSummaryStatsJson}
            */
        get json(): BackupSummaryStatsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Copy Run Stats.
    */
export class CopyRunStats {
        constructor(_json: CopyRunStatsJson);
        /**
            * Get end time.
            * @returns {number | null}
            */
        get endTime(): number | null;
        /**
            * Get is incremental.
            * @returns {boolean | null}
            */
        get isIncremental(): boolean | null;
        /**
            * Get logical bytes transferred.
            * @returns {number}
            */
        get logicalBytesTransferred(): number;
        /**
            * Get logical size bytes.
            * @returns {number}
            */
        get logicalSizeBytes(): number;
        /**
            * Get logical transfer rate bps.
            * @returns {number}
            */
        get logicalTransferRateBps(): number;
        /**
            * Get physical bytes transferred.
            * @returns {number}
            */
        get physicalBytesTransferred(): number;
        /**
            * Get start time.
            * @returns {number | null}
            */
        get startTime(): number | null;
        /**
            * Get the json representation of this class.
            * @returns {CopyRunStatsJson}
            */
        get json(): CopyRunStatsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Copy Run.
    */
export class CopyRun {
        constructor(_json: CopyRunJson);
        /**
            * Get copy snapshot tasks.
            * @returns {Array<CopySnapshotTaskStatus>}
            */
        get copySnapshotTasks(): Array<CopySnapshotTaskStatus>;
        /**
            * Get error.
            * @returns {string | null}
            */
        get error(): string | null;
        /**
            * Get expiry time.
            * @returns {number | null}
            */
        get expiryTime(): number | null;
        /**
            * Get run start time.
            * @returns {number}
            */
        get runStartTime(): number;
        /**
            * Get stats.
            * @returns {CopyRunStats | null}
            */
        get stats(): CopyRunStats | null;
        /**
            * Get status.
            * @returns {StatusCopyRun}
            */
        get status(): StatusCopyRun;
        /**
            * Get target.
            * @returns {SnapshotTargetSettings}
            */
        get target(): SnapshotTargetSettings;
        /**
            * Get the json representation of this class.
            * @returns {CopyRunJson}
            */
        get json(): CopyRunJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Copy Snapshot Task Status.
    */
export class CopySnapshotTaskStatus {
        constructor(_json: CopySnapshotTaskStatusJson);
        /**
            * Get error.
            * @returns {string | null}
            */
        get error(): string | null;
        /**
            * Get source.
            * @returns {ProtectionSource}
            */
        get source(): ProtectionSource;
        /**
            * Get stats.
            * @returns {CopyRunStats}
            */
        get stats(): CopyRunStats;
        /**
            * Get status.
            * @returns {StatusCopySnapshotTaskStatus}
            */
        get status(): StatusCopySnapshotTaskStatus;
        /**
            * Get task end time.
            * @returns {number | null}
            */
        get taskEndTime(): number | null;
        /**
            * Get task start time.
            * @returns {number}
            */
        get taskStartTime(): number;
        /**
            * Get the json representation of this class.
            * @returns {CopySnapshotTaskStatusJson}
            */
        get json(): CopySnapshotTaskStatusJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Org Backup Summary Stats.
    */
export class OrgBackupSummaryStats {
        constructor(_json: OrgBackupSummaryStatsJson);
        /**
            * Get org uuid.
            * @returns {string}
            */
        get orgUuid(): string;
        /**
            * Get stats.
            * @returns {BackupSummaryStats}
            */
        get stats(): BackupSummaryStats;
        /**
            * Get vDC stats.
            * @returns {Array<VdcBackupSummaryStats>}
            */
        get vdcStats(): Array<VdcBackupSummaryStats>;
        /**
            * Get the json representation of this class.
            * @returns {OrgBackupSummaryStatsJson}
            */
        get json(): OrgBackupSummaryStatsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Snapshot Target Settings.
    */
export class SnapshotTargetSettings {
        constructor(_json: SnapshotTargetSettingsJson);
        /**
            * Get archival target.
            * @returns {ArchivalExternalTarget | null}
            */
        get archivalTarget(): ArchivalExternalTarget | null;
        /**
            * Get replication target.
            * @returns {ReplicationTargetSettings | null}
            */
        get replicationTarget(): ReplicationTargetSettings | null;
        /**
            * Get type.
            * @returns {SnapshotTargetType}
            */
        get type(): SnapshotTargetType;
        /**
            * Get the json representation of this class.
            * @returns {SnapshotTargetSettingsJson}
            */
        get json(): SnapshotTargetSettingsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Source Backup Status.
    */
export class SourceBackupStatus {
        constructor(_json: SourceBackupStatusJson);
        /**
            * Get error.
            * Specifies if an error occurred (if any) while running this task.
            * This field is populated when the status is equal to 'FAILURE'.
            * @returns {string | null}
            */
        get error(): string | null;
        /**
            * Get is full backup.
            * @returns {boolean}
            */
        get isFullBackup(): boolean;
        /**
            * Get num restarts.
            * @returns {number}
            */
        get numRestarts(): number;
        /**
            * Get quiesced.
            * @returns {boolean}
            */
        get quiesced(): boolean;
        /**
            * Get sla violated.
            * @returns {boolean}
            */
        get slaViolated(): boolean;
        /**
            * Get source.
            * @returns {ProtectionSource}
            */
        get source(): ProtectionSource;
        /**
            * Get stats.
            * @returns {BackupSourceStats}
            */
        get stats(): BackupSourceStats;
        /**
            * Get status.
            * @returns {StatusSourceBackupStatus}
            */
        get status(): StatusSourceBackupStatus;
        /**
            * Get warnings.
            * @returns {Array<string>}
            */
        get warnings(): Array<string>;
        /**
            * Get the json representation of this class.
            * @returns {SourceBackupStatusJson}
            */
        get json(): SourceBackupStatusJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * vDC Backup Summary Stats.
    */
export class VdcBackupSummaryStats {
        constructor(_json: VdcBackupSummaryStatsJson);
        /**
            * Get vdc uuid.
            * @returns {string}
            */
        get vdcUuid(): string;
        /**
            * Get stats.
            * @returns {BackupSummaryStats}
            */
        get stats(): BackupSummaryStats;
        /**
            * Get backup group stats.
            * @returns {Array<BackupGroupSummaryStats>}
            */
        get backupGroupStats(): Array<BackupGroupSummaryStats>;
        /**
            * Get the json representation of this class.
            * @returns {VdcBackupSummaryStatsJson}
            */
        get json(): VdcBackupSummaryStatsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
  * Backup Config Status Enum.
  */
export enum BackupConfigStatus {
    FULL = "FULL",
    PARTIAL = "PARTIAL",
    FULL_AUTO = "FULL_AUTO",
    PARTIAL_AUTO = "PARTIAL_AUTO"
}

/**
  * Backup Group Status Descriptor JSON.
  */
export interface BackupGroupStatusDescriptorJson {
    name: string;
    uid: string;
    backup_status: BackupConfigStatus;
}

/**
  * Company Location Backup Status JSON.
  */
export interface CompanyLocationBackupStatusJson {
    location_id: string;
    company_id: string;
    child_org_statuses: Array<OrgBackupStatusJson>;
}

/**
  * Org Backup Status JSON.
  */
export interface OrgBackupStatusJson {
    uuid: string;
    child_vdc_statuses: Array<VdcBackupStatusJson>;
}

/**
  * vApp backup status detail JSON.
  */
export interface VappBackupStatusDetailJson extends VappBackupStatusJson {
    has_advanced_backups: boolean;
}

/**
  * vApp Backup Status JSON.
  */
export interface VappBackupStatusJson {
    uuid: string;
    backup_groups: Array<BackupGroupStatusDescriptorJson>;
    child_vm_statuses: Array<VmBackupStatusJson>;
}

/**
  * vDC Backup Status JSON.
  */
export interface VdcBackupStatusJson {
    uuid: string;
    backup_groups: Array<BackupGroupStatusDescriptorJson>;
    child_vapp_statuses: Array<VappBackupStatusJson>;
}

/**
  * VM backup status detail JSON.
  */
export interface VmBackupStatusDetailJson extends VmBackupStatusJson {
    has_advanced_backups: boolean;
}

/**
  * VM Backup Status JSON.
  */
export interface VmBackupStatusJson {
    uuid: string;
    backup_groups: Array<BackupGroupStatusDescriptorJson>;
}

/**
    * Backup Group Status Descriptor.
    */
export class BackupGroupStatusDescriptor {
        constructor(_json: BackupGroupStatusDescriptorJson);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get uid.
            * @returns {string}
            */
        get uid(): string;
        /**
            * Get backup status.
            * @returns {BackupConfigStatus}
            */
        get backupStatus(): BackupConfigStatus;
        /**
            * Get the json representation of this class.
            * @returns {BackupGroupStatusDescriptorJson}
            */
        get json(): BackupGroupStatusDescriptorJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Company Location Backup Status.
    */
export class CompanyLocationBackupStatus {
        constructor(_json: CompanyLocationBackupStatusJson);
        /**
            * Get location id.
            * @returns {string}
            */
        get locationId(): string;
        /**
            * Get company id.
            * @returns {string}
            */
        get companyId(): string;
        /**
            * Get child org statuses.
            * @returns {Array<OrgBackupStatus>}
            */
        get childOrgStatuses(): Array<OrgBackupStatus>;
        /**
            * Get the json representation of this class.
            * @returns {CompanyLocationBackupStatusJson}
            */
        get json(): CompanyLocationBackupStatusJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Org Backup Status.
    */
export class OrgBackupStatus {
        constructor(_json: OrgBackupStatusJson);
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get child vDC statuses.
            * @returns {Array<VdcBackupStatus>}
            */
        get childVdcStatuses(): Array<VdcBackupStatus>;
        /**
            * Get the json representation of this class.
            * @returns {OrgBackupStatusJson}
            */
        get json(): OrgBackupStatusJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * vApp backup status detail.
    */
export class VappBackupStatusDetail extends VappBackupStatus {
        constructor(_json: VappBackupStatusDetailJson);
        /**
            * Get has advanced backups.
            * Whether the vApp has the advanced backups offering.
            * @returns {boolean}
            */
        get hasAdvancedBackups(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {VappBackupStatusDetailJson}
            */
        get json(): VappBackupStatusDetailJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * vApp Backup Status.
    */
export class VappBackupStatus {
        constructor(_backupStatusJson: VappBackupStatusJson);
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get backup groups.
            * @returns {Array<BackupGroupStatusDescriptor>}
            */
        get backupGroups(): Array<BackupGroupStatusDescriptor>;
        /**
            * Get child vm statuses.
            * @returns {Array<VmBackupStatus>}
            */
        get childVmStatuses(): Array<VmBackupStatus>;
        /**
            * Get the json representation of this class.
            * @returns {VappBackupStatusJson}
            */
        get json(): VappBackupStatusJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * vDC Backup Status.
    */
export class VdcBackupStatus {
        constructor(_json: VdcBackupStatusJson);
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get backup groups.
            * @returns {Array<BackupGroupStatusDescriptor>}
            */
        get backupGroups(): Array<BackupGroupStatusDescriptor>;
        /**
            * Get child vApp statuses.
            * @returns {Array<VappBackupStatus>}
            */
        get childVAppStatuses(): Array<VappBackupStatus>;
        /**
            * Get the json representation of this class.
            * @returns {VdcBackupStatusJson}
            */
        get json(): VdcBackupStatusJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * VM backup status detail.
    */
export class VmBackupStatusDetail extends VmBackupStatus {
        constructor(_json: VmBackupStatusDetailJson);
        /**
            * Get has advanced backups.
            * Whether the vApp has the advanced backups offering.
            * @returns {boolean}
            */
        get hasAdvancedBackups(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {VmBackupStatusDetailJson}
            */
        get json(): VmBackupStatusDetailJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * VM Backup Status.
    */
export class VmBackupStatus {
        constructor(_backupStatusJson: VmBackupStatusJson);
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get backup groups.
            * @returns {Array<BackupGroupStatusDescriptor>}
            */
        get backupGroups(): Array<BackupGroupStatusDescriptor>;
        /**
            * Get the json representation of this class.
            * @returns {VmBackupStatusJson}
            */
        get json(): VmBackupStatusJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
  * Backup restore task detail JSON.
  */
export interface BackupRestoreTaskDetailJson extends BackupRestoreTaskJson {
    task_uuid?: string;
    username?: string;
    user_full_name?: string;
}

/**
  * Backup restore task JSON.
  */
export interface BackupRestoreTaskJson {
    task_name: string;
    location_id: string;
    company_id: string;
    org_uuid: string;
    vdc_uuid: string;
    uid: string;
    backup_group_uid: string;
    start_time: number;
    end_time?: number;
    type: RestoreTaskType;
    status: RestoreTaskStatus;
    error_message?: string;
    objects: Array<RestoreTaskObjectJson>;
    object_states: Array<RestoreTaskObjectStateJson>;
    vm_recovery_options?: VmRecoveryOptionsJson;
}

/**
  * Backup restore task list JSON.
  */
export interface BackupRestoreTaskListJson {
    data: Array<BackupRestoreTaskJson>;
}

/**
  * Restore task object JSON.
  */
export interface RestoreTaskObjectJson {
    backup_run_uid: string;
    source: ProtectionSourceJson;
}

/**
  * Restore task object state JSON.
  */
export interface RestoreTaskObjectStateJson {
    status: RestoreTaskObjectStatus;
    error?: string;
    source: ProtectionSourceJson;
}

/**
  * Restore task object status Enum.
  */
export enum RestoreTaskObjectStatus {
    FILES_CLONED = "FILES_CLONED",
    FETCHED_ENTITY_INFO = "FETCHED_ENTITY_INFO",
    VM_CREATED = "VM_CREATED",
    RELOCATION_STARTED = "RELOCATION_STARTED",
    FINISHED = "FINISHED",
    ABORTED = "ABORTED",
    DATA_COPY_STARTED = "DATA_COPY_STARTED",
    IN_PROGRESS = "IN_PROGRESS"
}

/**
  * Restore task status Enum.
  */
export enum RestoreTaskStatus {
    CANCELLED = "CANCELLED",
    FINISHED = "FINISHED",
    IN_PROGRESS = "IN_PROGRESS",
    READY_TO_SCHEDULE = "READY_TO_SCHEDULE"
}

/**
  * Restore task type Enum.
  */
export enum RestoreTaskType {
    DOWNLOAD_FILES = "DOWNLOAD_FILES",
    RESTORE_VMS = "RESTORE_VMS"
}

/**
  * VM Recovery Options JSON.
  */
export interface VmRecoveryOptionsJson {
    powered_on: boolean;
    suffix?: string;
    prefix?: string;
}

/**
    * Backup restore task detail.
    */
export class BackupRestoreTaskDetail extends BackupRestoreTask {
        constructor(_json: BackupRestoreTaskDetailJson);
        /**
            * Get the UUID of the associated iland task.
            * @returns {string | null}
            */
        get taskUuid(): string | null;
        /**
            * Get the full name of the user who initiated the restore operation.
            * @returns {string | null}
            */
        get userFullName(): string | null;
        /**
            * Get the username of the user who initiated the restore operation.
            * @returns {string | null}
            */
        get username(): string | null;
        /**
            * Get the json representation of this class.
            * @returns {BackupRestoreTaskDetailJson}
            */
        get json(): BackupRestoreTaskDetailJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Backup restore task list.
    */
export class BackupRestoreTaskList {
        constructor(_json: BackupRestoreTaskListJson);
        /**
            * Get data.
            * @returns {Array<BackupRestoreTask>}
            */
        get data(): Array<BackupRestoreTask>;
        /**
            * Get the json representation of this class.
            * @returns {BackupRestoreTaskListJson}
            */
        get json(): BackupRestoreTaskListJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Backup restore task.
    */
export class BackupRestoreTask {
        constructor(_backupRestoreTaskJson: BackupRestoreTaskJson);
        /**
            * Get task name.
            * @returns {string}
            */
        get taskName(): string;
        /**
            * Get location id.
            * @returns {string}
            */
        get locationId(): string;
        /**
            * Get company id.
            * @returns {string}
            */
        get companyId(): string;
        /**
            * Get org uuid.
            * @returns {string}
            */
        get orgUuid(): string;
        /**
            * Get vdc uuid.
            * @returns {string}
            */
        get vdcUuid(): string;
        /**
            * Get uid.
            * @returns {string}
            */
        get uid(): string;
        /**
            * Get the UID of the associated backup group.
            * @returns {string}
            */
        get backupGroupUid(): string;
        /**
            * Get start time.
            * @returns {number}
            */
        get startTime(): number;
        /**
            * Get end time.
            * @returns {number | null}
            */
        get endTime(): number | null;
        /**
            * Get type.
            * @returns {RestoreTaskType}
            */
        get type(): RestoreTaskType;
        /**
            * Get status.
            * @returns {RestoreTaskStatus}
            */
        get status(): RestoreTaskStatus;
        /**
            * Get error message.
            * @returns {string | null}
            */
        get errorMessage(): string | null;
        /**
            * Get objects.
            * @returns {Array<RestoreTaskObject>}
            */
        get objects(): Array<RestoreTaskObject>;
        /**
            * Get object states.
            * @returns {Array<RestoreTaskObjectState>}
            */
        get objectStates(): Array<RestoreTaskObjectState>;
        /**
            * Get the VM recovery options that were selected for the restore.
            * Only applicable if the type of task is {RestoreTaskType.RESTORE_VMS}.
            */
        get vmRecoveryOptions(): VmRecoveryOptions | null;
        /**
            * Get the json representation of this class.
            * @returns {BackupRestoreTaskJson}
            */
        get json(): BackupRestoreTaskJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Restore task object state.
    */
export class RestoreTaskObjectState {
        constructor(_json: RestoreTaskObjectStateJson);
        /**
            * Get status.
            * @returns {RestoreTaskObjectStatus}
            */
        get status(): RestoreTaskObjectStatus;
        /**
            * Get error.
            * @returns {string | null}
            */
        get error(): string | null;
        /**
            * Get source.
            * @returns {ProtectionSource}
            */
        get source(): ProtectionSource;
        /**
            * Get the json representation of this class.
            * @returns {RestoreTaskObjectStateJson}
            */
        get json(): RestoreTaskObjectStateJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Restore task object.
    */
export class RestoreTaskObject {
        constructor(_json: RestoreTaskObjectJson);
        /**
            * Get backup run uid.
            * @returns {string}
            */
        get backupRunUid(): string;
        /**
            * Get source.
            * @returns {ProtectionSource}
            */
        get source(): ProtectionSource;
        /**
            * Get the json representation of this class.
            * @returns {RestoreTaskObjectJson}
            */
        get json(): RestoreTaskObjectJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VmRecoveryOptions {
        constructor(_json: VmRecoveryOptionsJson);
        /**
            * Get whether the recovered VM is to be powered on.
            */
        get poweredOn(): boolean;
        /**
            * Get the suffix that will be appended to the name of the recovered VM.
            */
        get suffix(): string | null;
        /**
            * Get the prefix that will be appended to the name of the recovered VM.
            */
        get prefix(): string | null;
        /**
            * Get the json representation of this class.
            * @returns {VmRecoveryOptionsJson}
            */
        get json(): VmRecoveryOptionsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
  * Alternate vApp params JSON.
  */
export interface AlternateVappParamsJson {
    vapp_uuid: string;
    storage_profile: string;
}

/**
  * Combine method enum.
  */
export enum CombineMethod {
    LINEAR = "LINEAR",
    STRIPE = "STRIPE",
    MIRROR = "MIRROR",
    RAID5 = "RAID5",
    RAID6 = "RAID6",
    ZERO = "ZERO",
    THIN = "THIN",
    THINPOOL = "THINPOOL",
    SNAPSHOT = "SNAPSHOT",
    CACHE = "CACHE",
    CACHEPOOL = "CACHEPOOL"
}

/**
  * Device node JSON.
  */
export interface DeviceNodeJson {
    intermediate_node: DeviceTreeDetailsJson;
    leaf_node: FilePartitionBlockJson;
}

/**
  * Device tree details JSON.
  */
export interface DeviceTreeDetailsJson {
    device_length: number;
    combine_method: CombineMethod;
    device_nodes: Array<DeviceNodeJson>;
    stripe_size: number;
}

/**
  * Dir entry type enum.
  */
export enum DirEntryType {
    FILE = "FILE",
    DIRECTORY = "DIRECTORY",
    SYMLINK = "SYMLINK"
}

/**
  * Directory listing entry JSON.
  */
export interface DirectoryListingEntryJson {
    f_stat_info?: FStatInfoJson;
    name: string;
    type: DirEntryType;
    full_path: string;
}

/**
  * Directory listing JSON.
  */
export interface DirectoryListingJson {
    data: Array<DirectoryListingEntryJson>;
    pagination_cookie: string;
}

/**
  * Disk block JSON.
  */
export interface DiskBlockJson {
    offset_bytes: number;
    length_bytes: number;
}

/**
  * Disk format enum.
  */
export enum DiskFormat {
    VMDK = "VMDK",
    VHD = "VHD",
    VHD_X = "VHD_X",
    RAW = "RAW",
    UNKNOWN = "UNKNOWN"
}

/**
  * Disk JSON.
  */
export interface DiskJson {
    vmdk_size_bytes: number;
    vmdk_file_name: string;
    disk_format: DiskFormat;
    disk_blocks: Array<DiskBlockJson>;
    sector_size_bytes: number;
    partition_table_format: PartitionTableFormat;
    disk_partitions: Array<DiskPartitionJson>;
    uuid: string;
}

/**
  * Disk partition JSON.
  */
export interface DiskPartitionJson {
    number: number;
    type_uuid: string;
    offset_bytes: number;
    length_bytes: number;
    uuid?: string;
}

/**
  * F stat info JSON.
  */
export interface FStatInfoJson {
    modified_time: number;
    size: number;
}

/**
  * File partition block JSON.
  */
export interface FilePartitionBlockJson {
    number: number;
    disk_file_name: string;
    offset_bytes: number;
    length_bytes: number;
}

/**
  * File search result type enum.
  */
export enum FileSearchResultType {
    DIRECTORY = "DIRECTORY",
    FILE = "FILE",
    EMAIL = "EMAIL",
    SYMLINK = "SYMLINK"
}

/**
  * File snapshot info JSON.
  */
export interface FileSnapshotInfoJson {
    modified_time?: number;
    size_bytes: number;
    has_local_copy: boolean;
    has_remote_copy: boolean;
    has_archival_copy: boolean;
    snapshot: SnapshotAttemptJson;
}

/**
  * File snapshot info list JSON.
  */
export interface FileSnapshotInfoListJson {
    data: Array<FileSnapshotInfoJson>;
}

/**
  * File Type Enum.
  */
export enum FileType {
    ANY = "ANY",
    FILE = "FILE",
    FOLDER = "FOLDER"
}

/**
  * Files and folders info JSON.
  */
export interface FilesAndFoldersInfoJson {
    is_directory: boolean;
    absolute_path: string;
}

/**
  * Filesystem volume JSON.
  */
export interface FilesystemVolumeJson {
    is_supported: boolean;
    disks: Array<DiskJson>;
    name: string;
    logical_volume?: LogicalVolumeJson;
    logical_volume_type: LogicalVolumeType;
    display_name: string;
    filesystem_uuid: string;
    filesystem_type: string;
}

/**
  * Filesystem volume list JSON.
  */
export interface FilesystemVolumeListJson {
    data: Array<FilesystemVolumeJson>;
}

/**
  * Generate backup file download bundle params JSON.
  */
export interface GenerateBackupFileDownloadBundleParamsJson {
    task_name: string;
    backup_run_uid: string;
    files_and_folders: Array<FilesAndFoldersInfoJson>;
}

/**
  * List backup snapshot files and folders filters JSON.
  */
export interface ListBackupSnapshotFilesAndFoldersFiltersJson {
    attempt_number?: number;
    pagination_cookie?: string;
    max_entries?: number;
    stat_file_entries?: boolean;
    browser_index_data?: boolean;
}

/**
  * Logical volume JSON.
  */
export interface LogicalVolumeJson {
    device_root_node: DeviceTreeDetailsJson;
    group_name: string;
    name: string;
    group_uuid: string;
    uuid: string;
}

/**
  * Logical volume type enum.
  */
export enum LogicalVolumeType {
    SIMPLE_VOLUME = "SIMPLE_VOLUME",
    LVM = "LVM",
    LDM = "LDM"
}

/**
  * Partition table format enum.
  */
export enum PartitionTableFormat {
    NO_PARTITION = "NO_PARTITION",
    MBR_PARTITION = "MBR_PARTITION",
    GPT_PARTITION = "GPT_PARTITION",
    SGI_PARTITION = "SGI_PARTITION",
    SUN_PARTITION = "SUN_PARTITION"
}

/**
  * Recoverable file search result. JSON.
  */
export interface RecoverableFileSearchResultJson {
    location_id: string;
    company_id: string;
    org_uuid: string;
    vdc_uuid: string;
    vapp_uuid: string;
    vm_uuid: string;
    filename: string;
    is_folder: boolean;
    backup_group_uid: string;
    type: FileSearchResultType;
    vm_name: string;
}

/**
  * Recoverable file search result JSON.
  */
export interface RecoverableFilesSearchResultListJson {
    data: Array<RecoverableFileSearchResultJson>;
}

/**
  * Restore VM Backup Params JSON.
  */
export interface RestoreVmBackupParamsJson {
    backup_run_uid: string;
    task_name: string;
    alternate_vapp?: AlternateVappParamsJson;
    powered_on: boolean;
    prefix: string;
    suffix: string;
    continue_on_error: boolean;
}

/**
  * Restore VM Backups in vDC params JSON.
  */
export interface RestoreVmBackupsInVdcParamsJson {
    snapshot_refs: Array<VmSnapshotRefJson>;
    task_name: string;
    alternate_vapp?: AlternateVappParamsJson;
    powered_on: boolean;
    prefix: string;
    suffix: string;
    continue_on_error: boolean;
}

/**
  * Search vDC recoverable files and folders filters JSON.
  * The request params are required to be in camelCase vs snake_case.
  */
export interface SearchVdcRecoverableFilesAndFoldersFiltersJson {
    startTime?: number;
    endTime?: number;
    search?: string;
    backupGroupUids?: Array<string>;
    backupRunUids?: Array<string>;
    vmUuids?: Array<string>;
    fileType: FileType;
}

/**
  * Search VM recoverable files and folders filters JSON.
  * The request params are required to be in camelCase vs snake_case.
  */
export interface SearchVmRecoverableFilesAndFoldersFiltersJson {
    startTime?: number;
    endTime?: number;
    search?: string;
    backupGroupUids?: Array<string>;
    backupRunUids?: Array<string>;
    fileType?: FileType;
}

/**
  * Snapshot Attempt JSON.
  */
export interface SnapshotAttemptJson {
    backup_run_uid: string;
    backup_group_uid: string;
    attempt_number: number;
    backup_run_start_time: number;
}

/**
  * Snapshot Version JSON.
  */
export interface SnapshotVersionJson {
    backup_run_uid: string;
    start_time: number;
    delta_size_bytes: number;
    attempt_number: number;
    logical_size_bytes: number;
    app_consistent: boolean;
    full_backup: boolean;
}

/**
  * VM Backup Snapshots JSON.
  */
export interface VmBackupSnapshotJson {
    backup_group_uid: string;
    vm_uuid: string;
    company_id: string;
    versions: Array<SnapshotVersionJson>;
    os_type: string;
    backup_group_name: string;
    vapp_uuid: string;
    org_uuid: string;
    vdc_uuid: string;
    location_id: string;
    vm_name: string;
}

/**
  * VM Backup Snapshots List JSON.
  */
export interface VmBackupSnapshotsListJson {
    data: Array<VmBackupSnapshotJson>;
}

/**
  * VM Snapshot Ref JSON.
  */
export interface VmSnapshotRefJson {
    vm_uuid: string;
    backup_run_uid: string;
}

/**
    * Alternate vApp params.
    */
export class AlternateVappParams {
        constructor(_json: AlternateVappParamsJson);
        /**
            * Get vApp uuid.
            * The UUID of the vApp that the recovered VMs should be recovered in.
            * @returns {string}
            */
        get vappUuid(): string;
        /**
            * Get storage profile.
            * The UUID of the storage profile that the recovered objects should be imported to.
            * @returns {string}
            */
        get storageProfile(): string;
        /**
            * Get the json representation of this class.
            * @returns {AlternateVappParamsJson}
            */
        get json(): AlternateVappParamsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Device node.
    */
export class DeviceNode {
        constructor(_json: DeviceNodeJson);
        /**
            * Get intermediate node.
            * @returns {DeviceTreeDetails}
            */
        get intermediateNode(): DeviceTreeDetails;
        /**
            * Get leaf node.
            * @returns {FilePartitionBlock}
            */
        get leafNode(): FilePartitionBlock;
        /**
            * Get the json representation of this class.
            * @returns {DeviceNodeJson}
            */
        get json(): DeviceNodeJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Device tree details.
    */
export class DeviceTreeDetails {
        constructor(_json: DeviceTreeDetailsJson);
        /**
            * Get device length.
            * @returns {number}
            */
        get deviceLength(): number;
        /**
            * Get combine method.
            * Specifies how to combine the children of this node. The combining strategy
            * for child devices. Some of these strategies imply constraint on the number
            * of child devices. e.g. RAID5 will have 5 children. 'LINEAR' indicates
            * children are juxtaposed to form this device.
            * @returns {CombineMethod}
            */
        get combineMethod(): CombineMethod;
        /**
            * Get device nodes.
            * @returns {Array<DeviceNode>}
            */
        get deviceNodes(): Array<DeviceNode>;
        /**
            * Get stripe size.
            * @returns {number}
            */
        get stripeSize(): number;
        /**
            * Get the json representation of this class.
            * @returns {DeviceTreeDetailsJson}
            */
        get json(): DeviceTreeDetailsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Directory listing entry.
    */
export class DirectoryListingEntry {
        constructor(_json: DirectoryListingEntryJson);
        /**
            * Get f stat info.
            * @returns {FStatInfo | null}
            */
        get fStatInfo(): FStatInfo | null;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get type.
            * @returns {DirEntryType}
            */
        get type(): DirEntryType;
        /**
            * Get full path.
            * @returns {string}
            */
        get fullPath(): string;
        /**
            * Get the json representation of this class.
            * @returns {DirectoryListingEntryJson}
            */
        get json(): DirectoryListingEntryJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Directory listing.
    */
export class DirectoryListing {
        constructor(_json: DirectoryListingJson);
        /**
            * Get data.
            * @returns {Array<DirectoryListingEntry>}
            */
        get data(): Array<DirectoryListingEntry>;
        /**
            * Get pagination cookie.
            * @returns {string}
            */
        get paginationCookie(): string;
        /**
            * Get the json representation of this class.
            * @returns {DirectoryListingJson}
            */
        get json(): DirectoryListingJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Disk block.
    */
export class DiskBlock {
        constructor(_json: DiskBlockJson);
        /**
            * Get offset bytes.
            * @returns {number}
            */
        get offsetBytes(): number;
        /**
            * Get length bytes.
            * @returns {number}
            */
        get lengthBytes(): number;
        /**
            * Get the json representation of this class.
            * @returns {DiskBlockJson}
            */
        get json(): DiskBlockJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Disk partition.
    */
export class DiskPartition {
        constructor(_json: DiskPartitionJson);
        /**
            * Get number.
            * Specifies a unique number of the partition within the linear disk file.
            * @returns {number}
            */
        get number(): number;
        /**
            * Get type uuid.
            * Specifies the partition type uuid.
            * If disk is unpartitioned, this field isnot set.
            * If disk is MBR partitioned, this field is set to a partition type.
            * If disk is GPT partitioned, this field is set to a partition type GUID.
            * @returns {string}
            */
        get typeUuid(): string;
        /**
            * Get offset bytes.
            * Specifies the offset of the block (in bytes) from the beginning of the
            * containing object such as a physical disk or a virtual disk file.
            * @returns {number}
            */
        get offsetBytes(): number;
        /**
            * Get length bytes.
            * Specifies the length of the block in bytes.
            * @returns {number}
            */
        get lengthBytes(): number;
        /**
            * Get uuid.
            * Specifies the partition uuid.
            * If disk is unpartitioned, this field is not set.
            * If disk is MBR partitioned, this field is not set.
            * If disk is GPT partitioned, this field is set to a partition GUID.
            * @returns {string | null}
            */
        get uuid(): string | null;
        /**
            * Get the json representation of this class.
            * @returns {DiskPartitionJson}
            */
        get json(): DiskPartitionJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Disk.
    */
export class Disk {
        constructor(_json: DiskJson);
        /**
            * Get vmdk size bytes.
            * Specifies the disk size in bytes.
            * @returns {number}
            */
        get vmdkSizeBytes(): number;
        /**
            * Get vmdk file name.
            * Specifies the disk file name. This is the VMDK name and not the flat filename.
            * @returns {string}
            */
        get vmdkFileName(): string;
        /**
            * Get disk format.
            * Specifies the format of the virtual disk.
            * @returns {DiskFormat}
            */
        get diskFormat(): DiskFormat;
        /**
            * Get disk blocks.
            * Array of Disk Blocks.
            * Specifies a set of disk blocks by defining the location and offset of disk blocks in a disk.
            * @returns {Array<DiskBlock>}
            */
        get diskBlocks(): Array<DiskBlock>;
        /**
            * Get sector size bytes.
            * Specifies the sector size of hard disk. It is used for mapping the disk
            * blocks of the disk file into a linear list of sectors.
            * @returns {number}
            */
        get sectorSizeBytes(): number;
        /**
            * Get partition table format.
            * Specifies partition table format on a disk.
            * @returns {PartitionTableFormat}
            */
        get partitionTableFormat(): PartitionTableFormat;
        /**
            * Get disk partitions.
            * Array of Partitions. Specifies information about all the partitions in this disk.
            * @returns {Array<DiskPartition>}
            */
        get diskPartitions(): Array<DiskPartition>;
        /**
            * Get the json representation of this class.
            * @returns {DiskJson}
            */
        get json(): DiskJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * F Stat Info.
    */
export class FStatInfo {
        constructor(_json: FStatInfoJson);
        /**
            * Get modified time.
            * @returns {number}
            */
        get modifiedTime(): number;
        /**
            * Get size.
            * @returns {number}
            */
        get size(): number;
        /**
            * Get the json representation of this class.
            * @returns {FStatInfoJson}
            */
        get json(): FStatInfoJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * File partition block.
    */
export class FilePartitionBlock {
        constructor(_json: FilePartitionBlockJson);
        /**
            * Get number.
            * Specifies a unique number of the partition within the linear disk file.
            * @returns {number}
            */
        get number(): number;
        /**
            * Get disk file name.
            * Specifies the disk file name where the logical partition is.
            * @returns {string}
            */
        get diskFileName(): string;
        /**
            * Get offset bytes.
            * Specifies the offset of the block (in bytes) from the beginning of the
            * containing object such as a physical disk or a virtual disk file.
            * @returns {number}
            */
        get offsetBytes(): number;
        /**
            * Get length bytes.
            * Specifies the length of the block in bytes.
            * @returns {number}
            */
        get lengthBytes(): number;
        /**
            * Get the json representation of this class.
            * @returns {FilePartitionBlockJson}
            */
        get json(): FilePartitionBlockJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * File snapshot info list.
    */
export class FileSnapshotInfoList {
        constructor(_json: FileSnapshotInfoListJson);
        /**
            * Get data.
            * @returns {Array<FileSnapshotInfo>}
            */
        get data(): Array<FileSnapshotInfo>;
        /**
            * Get the json representation of this class.
            * @returns {FileSnapshotInfoListJson}
            */
        get json(): FileSnapshotInfoListJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * File snapshot info.
    */
export class FileSnapshotInfo {
        constructor(_json: FileSnapshotInfoJson);
        /**
            * Get modified time.
            * @returns {number | null}
            */
        get modifiedTime(): number | null;
        /**
            * Get size bytes.
            * @returns {number}
            */
        get sizeBytes(): number;
        /**
            * Get has local copy.
            * @returns {boolean}
            */
        get hasLocalCopy(): boolean;
        /**
            * Get has remote copy.
            * @returns {boolean}
            */
        get hasRemoteCopy(): boolean;
        /**
            * Get has archival copy.
            * @returns {boolean}
            */
        get hasArchivalCopy(): boolean;
        /**
            * Get snapshot.
            * @returns {SnapshotAttempt}
            */
        get snapshot(): SnapshotAttempt;
        /**
            * Get the json representation of this class.
            * @returns {FileSnapshotInfoJson}
            */
        get json(): FileSnapshotInfoJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Files and folders info.
    */
export class FilesAndFoldersInfo {
        constructor(filesAndFoldersInfo: FilesAndFoldersInfo);
        constructor(filesAndFoldersInfoJson: FilesAndFoldersInfoJson);
        constructor(isDirectory: boolean, absolutePath: string);
        /**
            * Get is directory.
            * Specifies if specified object is a directory or not.
            * @returns {boolean}
            */
        get isDirectory(): boolean;
        /**
            * Get absolute path.
            * Specifies the absolute path of the specified file or folder.
            * @returns {string}
            */
        get absolutePath(): string;
        /**
            * Get the json representation of this class.
            * @returns {FilesAndFoldersInfoJson}
            */
        get json(): FilesAndFoldersInfoJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Filesystem volume list.
    */
export class FilesystemVolumeList {
        constructor(_json: FilesystemVolumeListJson);
        /**
            * Get data.
            * @returns {Array<FilesystemVolume>}
            */
        get data(): Array<FilesystemVolume>;
        /**
            * Get the json representation of this class.
            * @returns {FilesystemVolumeListJson}
            */
        get json(): FilesystemVolumeListJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Filesystem volume.
    */
export class FilesystemVolume {
        constructor(_json: FilesystemVolumeJson);
        /**
            * Get is supported.
            * If true, this is a supported filesystem volume type.
            * @returns {boolean}
            */
        get isSupported(): boolean;
        /**
            * Get disks.
            * Array of Disks and Partitions. Specifies information about all the disks and partitions
            * needed to mount this logical volume.
            * @returns {Array<Disk>}
            */
        get disks(): Array<Disk>;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get logical volume.
            * @returns {LogicalVolume | null}
            */
        get logicalVolume(): LogicalVolume | null;
        /**
            * Get logical volume type.
            * @returns {LogicalVolumeType}
            */
        get logicalVolumeType(): LogicalVolumeType;
        /**
            * Get display name.
            * @returns {string}
            */
        get displayName(): string;
        /**
            * Get filesystem uuid.
            * @returns {string}
            */
        get filesystemUuid(): string;
        /**
            * Get filesystem type.
            * @returns {string}
            */
        get filesystemType(): string;
        /**
            * Get the json representation of this class.
            * @returns {FilesystemVolumeJson}
            */
        get json(): FilesystemVolumeJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Generate backup file download bundle params.
    */
export class GenerateBackupFileDownloadBundleParams {
        constructor(_json: GenerateBackupFileDownloadBundleParamsJson);
        /**
            * Get task name.
            * The name that should be associated with the task.
            * @returns {string}
            */
        get taskName(): string;
        /**
            * Get backup run uid.
            * The UID of the backup run that is associated with files to be downloaded.
            * @returns {string}
            */
        get backupRunUid(): string;
        /**
            * Get files and folders.
            * The set of files/folders to be included.
            * Items should be unique in list.
            * @returns {Array<FilesAndFoldersInfo>}
            */
        get filesAndFolders(): Array<FilesAndFoldersInfo>;
        /**
            * Get the json representation of this class.
            * @returns {GenerateBackupFileDownloadBundleParamsJson}
            */
        get json(): GenerateBackupFileDownloadBundleParamsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * List backup snapshot files and folders filters.
    */
export class ListBackupSnapshotFilesAndFoldersFilters {
        constructor(_json: ListBackupSnapshotFilesAndFoldersFiltersJson);
        /**
            * Get attempt number.
            * @returns {number | null}
            */
        get attemptNumber(): number | null;
        /**
            * Get pagination cookie.
            * @returns {string | null}
            */
        get paginationCookie(): string | null;
        /**
            * Get max entries.
            * @returns {number | null}
            */
        get maxEntries(): number | null;
        /**
            * Get stat file entries.
            * @returns {boolean | null}
            */
        get statFileEntries(): boolean | null;
        /**
            * Get browser index data.
            * @returns {boolean | null}
            */
        get browserIndexData(): boolean | null;
        /**
            * Get the json representation of this class.
            * @returns {ListBackupSnapshotFilesAndFoldersFiltersJson}
            */
        get json(): ListBackupSnapshotFilesAndFoldersFiltersJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Logical volume.
    */
export class LogicalVolume {
        constructor(_json: LogicalVolumeJson);
        /**
            * Get device root node.
            * @returns {DeviceTreeDetails}
            */
        get deviceRootNode(): DeviceTreeDetails;
        /**
            * Get group name.
            * @returns {string}
            */
        get groupName(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get group uuid.
            * @returns {string}
            */
        get groupUuid(): string;
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get the json representation of this class.
            * @returns {LogicalVolumeJson}
            */
        get json(): LogicalVolumeJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Recoverable file search result.
    */
export class RecoverableFileSearchResult {
        constructor(_json: RecoverableFileSearchResultJson);
        /**
            * Get location id.
            * The ID of the location that the result is associated with.
            * @returns {string}
            */
        get locationId(): string;
        /**
            * Get company id.
            * The ID of the company that the result is associated with.
            * @returns {string}
            */
        get companyId(): string;
        /**
            * Get org uuid.
            * The UUID of the Org that the result is associated with.
            * @returns {string}
            */
        get orgUuid(): string;
        /**
            * Get vdc uuid.
            * The UUID of the vDC that the result is associated with.
            * @returns {string}
            */
        get vdcUuid(): string;
        /**
            * Get vapp uuid.
            * The UUID of the vApp that the result is associated with.
            * @returns {string}
            */
        get vappUuid(): string;
        /**
            * Get vm uuid.
            * The UUID of the VM that the result is associated with.
            * @returns {string}
            */
        get vmUuid(): string;
        /**
            * Get filename.
            * Specifies the name of the found file or folder.
            * @returns {string}
            */
        get filename(): string;
        /**
            * Get is folder.
            * Specifies if the found item is a folder. If true, the found item is a folder.
            * @returns {boolean}
            */
        get isFolder(): boolean;
        /**
            * Get backup group uid.
            * Specifies the UID of the backup group that is currently associated with the
            * object that contains the backed up file or folder.
            * @returns {string}
            */
        get backupGroupUid(): string;
        /**
            * Get type.
            * Specifies the type of the file document such as DIRECTORY, FILE, etc.
            * @returns {FileSearchResultType}
            */
        get type(): FileSearchResultType;
        /**
            * Get vm name.
            * The name of the associated VM.
            * @returns {string}
            */
        get vmName(): string;
        /**
            * Get the json representation of this class.
            * @returns {RecoverableFileSearchResultJson}
            */
        get json(): RecoverableFileSearchResultJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Recoverable files search results list.
    */
export class RecoverableFilesSearchResultList {
        constructor(_json: RecoverableFilesSearchResultListJson);
        /**
            * Get data.
            * @returns {Array<RecoverableFileSearchResult>}
            */
        get data(): Array<RecoverableFileSearchResult>;
        /**
            * Get the json representation of this class.
            * @returns {RecoverableFilesSearchResultListJson}
            */
        get json(): RecoverableFilesSearchResultListJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Restore VM Backup params.
    */
export class RestoreVmBackupParams {
        constructor(_json: RestoreVmBackupParamsJson);
        /**
            * Get backup run uid.
            * @returns {string}
            */
        get backupRunUid(): string;
        /**
            * Get task name.
            * The user-specified name that should be associated with the task.
            * @returns {string}
            */
        get taskName(): string;
        /**
            * Get alternate vApp.
            * Optionally specifies an alternate vApp to recover the VM snapshot to.
            * @returns {AlternateVappParams | null}
            */
        get alternateVapp(): AlternateVappParams | null;
        /**
            * Get powered on.
            * Specifies the power state of the cloned or recovered objects.
            * By default, the cloned or recovered objects are powered off.
            * @returns {boolean}
            */
        get poweredOn(): boolean;
        /**
            * Get prefix.
            * Specifies a prefix to prepended to the source object name to derive a new
            * name for the recovered or cloned object. By default, cloned or recovered
            * objects retain their original name. Length of this field is limited to 8
            * characters.
            * @returns {string}
            */
        get prefix(): string;
        /**
            * Get suffix.
            * Specifies a suffix to appended to the original source object name to derive
            * a new name for the recovered or cloned object. By default, cloned or
            * recovered objects retain their original name. Length of this field is
            * limited to 8 characters.
            * @returns {string}
            */
        get suffix(): string;
        /**
            * Get continue on error.
            * Whether the restoration should continue when an error occurs.
            * @returns {boolean}
            */
        get continueOnError(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {RestoreVmBackupParamsJson}
            */
        get json(): RestoreVmBackupParamsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Restore VM Backups in vDC params.
    */
export class RestoreVmBackupsInVdcParams {
        constructor(_json: RestoreVmBackupsInVdcParamsJson);
        /**
            * Get snapshot refs.
            * Set of VM snapshots to restore.
            * @returns {Array<VmSnapshotRef>}
            */
        get snapshotRefs(): Array<VmSnapshotRef>;
        /**
            * Get task name.
            * The user-specified name that should be associated with the task.
            * @returns {string}
            */
        get taskName(): string;
        /**
            * Get alternate vapp.
            * Optionally specifies an alternate vApp to recover the VM snapshot to.
            * @returns {AlternateVappParams | null}
            */
        get alternateVapp(): AlternateVappParams | null;
        /**
            * Get powered on.
            * Specifies the power state of the cloned or recovered objects.
            * By default, the cloned or recovered objects are powered off.
            * @returns {boolean}
            */
        get poweredOn(): boolean;
        /**
            * Get prefix.
            * Specifies a prefix to prepended to the source object name to derive a new
            * name for the recovered or cloned object. By default, cloned or recovered
            * objects retain their original name. Length of this field is limited to 8
            * characters.
            * @returns {string}
            */
        get prefix(): string;
        /**
            * Get suffix.
            * Specifies a suffix to appended to the original source object name to derive
            * a new name for the recovered or cloned object. By default, cloned or
            * recovered objects retain their original name. Length of this field is
            * limited to 8 characters.
            * @returns {string}
            */
        get suffix(): string;
        /**
            * Get continue on error.
            * Whether the restoration should continue when an error occurs.
            * @returns {boolean}
            */
        get continueOnError(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {RestoreVmBackupsInVdcParamsJson}
            */
        get json(): RestoreVmBackupsInVdcParamsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Search vDC recoverable files and folders.
    */
export class SearchVdcRecoverableFilesAndFoldersFilters {
        constructor(_json: SearchVdcRecoverableFilesAndFoldersFiltersJson);
        /**
            * Get start time.
            * @returns {number | null}
            */
        get startTime(): number | null;
        /**
            * Get end time.
            * @returns {number | null}
            */
        get endTime(): number | null;
        /**
            * Get search.
            * @returns {string | null}
            */
        get search(): string | null;
        /**
            * Get backup group uids.
            * @returns {Array<string> | null}
            */
        get backupGroupUids(): Array<string> | null;
        /**
            * Get backup run uids.
            * @returns {Array<string> | null}
            */
        get backupRunUids(): Array<string> | null;
        /**
            * Get vm uuids.
            * @returns {Array<string> | null}
            */
        get vmUuids(): Array<string> | null;
        /**
            * Get file type.
            * @returns {FileType}
            */
        get fileType(): FileType;
        /**
            * Get the json representation of this class.
            * @returns {SearchVdcRecoverableFilesAndFoldersFiltersJson}
            */
        get json(): SearchVdcRecoverableFilesAndFoldersFiltersJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Search VM recoverable files and folders.
    */
export class SearchVmRecoverableFilesAndFoldersFilters {
        constructor(_json: SearchVmRecoverableFilesAndFoldersFiltersJson);
        /**
            * Get start time.
            * @returns {number | null}
            */
        get startTime(): number | null;
        /**
            * Get end time.
            * @returns {number | null}
            */
        get endTime(): number | null;
        /**
            * Get search.
            * @returns {string | null}
            */
        get search(): string | null;
        /**
            * Get backup group uids.
            * @returns {Array<string> | null}
            */
        get backupGroupUids(): Array<string> | null;
        /**
            * Get backup run uids.
            * @returns {Array<string> | null}
            */
        get backupRunUids(): Array<string> | null;
        /**
            * Get file type.
            * @returns {FileType | null}
            */
        get fileType(): FileType | null;
        /**
            * Get the json representation of this class.
            * @returns {SearchVmRecoverableFilesAndFoldersFiltersJson}
            */
        get json(): SearchVmRecoverableFilesAndFoldersFiltersJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Snapshot attempt.
    */
export class SnapshotAttempt {
        constructor(_json: SnapshotAttemptJson);
        /**
            * Get backup run uid.
            * @returns {string}
            */
        get backupRunUid(): string;
        /**
            * Get backup group uid.
            * @returns {string}
            */
        get backupGroupUid(): string;
        /**
            * Get attempt number.
            * @returns {number}
            */
        get attemptNumber(): number;
        /**
            * Get backup run start time.
            * @returns {number}
            */
        get backupRunStartTime(): number;
        /**
            * Get the json representation of this class.
            * @returns {SnapshotAttemptJson}
            */
        get json(): SnapshotAttemptJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Snapshot Version.
    */
export class SnapshotVersion {
        constructor(_json: SnapshotVersionJson);
        /**
            * Get backup run uid.
            * @returns {string}
            */
        get backupRunUid(): string;
        /**
            * Get start time.
            * @returns {number} time in millis
            */
        get startTime(): number;
        /**
            * Get delta size bytes.
            * Specifies the size of the data captured from the source object.
            * For a fullbackup (where Change Block Tracking is not utilized) this field is equal tologicalSizeBytes.
            * For an incremental backup (where Change Block Tracking isutilized),
            * this field specifies the size of the data that has changed since the last backup.
            * @returns {number}
            */
        get deltaSizeBytes(): number;
        /**
            * Get attempt number.
            * Specifies the number of the attempts made by the VCloudProtectionJob Run to capture a snapshot of the object.
            * For example, if an snapshot is successfully captured after three attempts, this field equals 3.
            * @returns {number}
            */
        get attemptNumber(): number;
        /**
            * Get logical size bytes.
            * Specifies the size of the snapshot if the data is fully hydrated or expanded
            * and not reduced by change-block tracking, compression and deduplication.
            * For example if a VMDK of size 100GB is created with thin provisioning and the disk size to store the VMDK is 20GB.
            * The logical size of this object is 100GB and the physical size is 20GB.
            * @returns {number}
            */
        get logicalSizeBytes(): number;
        /**
            * Get app consistent.
            * Specifies if an app-consistent snapshot was captured.
            * For example, was the VM was quiesced before the snapshot was captured.
            * @returns {boolean}
            */
        get appConsistent(): boolean;
        /**
            * Get full backup.
            * Specifies if the snapshot is a full backup.
            * For example, all blocks of the VM is captured and Change Block Tracking is not utilized.
            * @returns {boolean}
            */
        get fullBackup(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {SnapshotVersionJson}
            */
        get json(): SnapshotVersionJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * VM Backup Snapshot.
    */
export class VmBackupSnapshot {
        constructor(_json: VmBackupSnapshotJson);
        /**
            * Get backup group uid.
            * @returns {string}
            */
        get backupGroupUid(): string;
        /**
            * Get VM uuid.
            * @returns {string}
            */
        get vmUuid(): string;
        /**
            * Get company ID.
            * @returns {string}
            */
        get companyId(): string;
        /**
            * Get versions.
            * @returns {Array<SnapshotVersion>}
            */
        get versions(): Array<SnapshotVersion>;
        /**
            * Get OS type.
            * @returns {string}
            */
        get osType(): string;
        /**
            * Get backup group name.
            * @returns {string}
            */
        get backupGroupName(): string;
        /**
            * Get vApp uuid.
            * @returns {string}
            */
        get vappUuid(): string;
        /**
            * Get org uuid.
            * @returns {string}
            */
        get orgUuid(): string;
        /**
            * Get vDC uuid.
            * @returns {string}
            */
        get vdcUuid(): string;
        /**
            * Get location id.
            * @returns {string}
            */
        get locationId(): string;
        /**
            * Get VM name.
            * @returns {string}
            */
        get vmName(): string;
        /**
            * Get the json representation of this class.
            * @returns {VmBackupSnapshotJson}
            */
        get json(): VmBackupSnapshotJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * VM Backup Snapshots List.
    */
export class VmBackupSnapshotsList {
        constructor(_json: VmBackupSnapshotsListJson);
        /**
            * Get data.
            * @returns {Array<VmBackupSnapshot>}
            */
        get data(): Array<VmBackupSnapshot>;
        /**
            * Get the json representation of this class.
            * @returns {VmBackupSnapshotsListJson}
            */
        get json(): VmBackupSnapshotsListJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * VM Snapshot Ref.
    */
export class VmSnapshotRef {
        constructor(_json: VmSnapshotRefJson);
        /**
            * Get vm uuid.
            * @returns {string}
            */
        get vmUuid(): string;
        /**
            * Get backup run uid.
            * @returns {string}
            */
        get backupRunUid(): string;
        /**
            * Get the json representation of this class.
            * @returns {VmSnapshotRefJson}
            */
        get json(): VmSnapshotRefJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
  * Interface for Catalog JSON representation.
  */
export interface CatalogJson extends EntityJson {
    location_id: string;
    shared: boolean;
    catalog_public: boolean;
    version: number;
    org_uuid: string;
    description: string;
    vcloud_href: string;
    created_date: number;
}

/**
  * Interface for Catalog Update Request JSON representation.
  */
export interface CatalogUpdateRequestJson {
    description: string;
    uuid: string;
    name: string;
    deleted: boolean;
    deleted_date: number;
    updated_date: number;
}

/**
  * Initiate OVF Upload Request JSON.
  */
export interface InitiateOVFUploadRequestJson {
    name: string;
    description?: string;
    descriptor: string;
    upload_type: TemplateUploadType;
}
export type TemplateUploadType = 'OVF' | 'OVA';

export interface ItemDownloadJson {
    catalog_uuid: string;
    time: number;
    item_uuid: string;
    item_type: catalogItemDownloadType;
    user: string;
    media: MediaJson | null;
    template: VappTemplateJson | null;
}

export type catalogItemDownloadType = 'vapp_template' | 'media';

export interface VappTemplateFromVappCreateRequestJson {
    vapp_uuid: string;
    name: string;
    description: string;
}

/**
    * Request to update a catalog
    */
export class CatalogUpdateRequest {
        constructor(catalogUpdateRequest: CatalogUpdateRequest);
        constructor(catalogUpdateRequestJson: CatalogUpdateRequestJson);
        constructor(description: string, uuid: string, name: string, deleted: boolean, deletedDate: number, updatedDate: number);
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get deleted.
            * @returns {boolean}
            */
        get deleted(): boolean;
        /**
            * Get deleted date.
            * @returns {number}
            */
        get deletedDate(): number;
        /**
            * Get updated date.
            * @returns {number}
            */
        get updatedDate(): number;
        /**
            * Get the json representation of this class.
            * @returns {CatalogUpdateRequestJson}
            */
        get json(): CatalogUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Catalog.
    */
export class Catalog extends Entity {
        constructor(_json: CatalogJson);
        /**
            * Get the Catalog from API.
            * @param {string} uuid
            * @returns {Promise<Catalog>} promise that resolves with the Catalog
            */
        static getCatalog(uuid: string): Promise<Catalog>;
        get originalUuid(): string;
        get uuid(): string;
        /**
            * Get entity type for catalog.
            * @returns {EntityType}
            */
        get entityType(): EntityType;
        /**
            * Get location ID
            * @returns {string}
            */
        get locationId(): string;
        /**
            * Indicate whether the catalog is shared or not.
            * @returns {boolean}
            */
        get isShared(): boolean;
        /**
            * Indicate whether the catalog is public or not.
            * @returns {boolean}
            */
        get isPublic(): boolean;
        /**
            * Get the catalog version
            * @returns {number}
            */
        get version(): number;
        /**
            * Get org uuid for catalog.
            * @returns {string}
            */
        get orgUuid(): string;
        /**
            * Get description for catalog
            * @returns {string}
            */
        get description(): string;
        /**
            * Get vCloudHref for catalog
            * @returns {string}
            */
        get vcloudHref(): string;
        /**
            * Get the creation date
            * @returns {Date}
            */
        get createdDate(): Date;
        /**
            * Gets the raw JSON object from the API.
            * @returns {CatalogJson} the JSON representation
            */
        get json(): CatalogJson;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Refreshes the Catalog data by retrieving it from the API again.
            * @returns {Promise<Catalog>} promise that resolves with the Catalog
            */
        refresh(): Promise<Catalog>;
        /**
            * Gets Catalog's item downloads.
            * @description There are two types of catalog items that will show up: 'media' or 'template'.
            * The item type field will report 'media' or 'vapp_template'.If the item is a media,
            * the 'template' field will be null and vice-versa. (null 'media' field if item is a vapp_template).
            * Only private catalogs will have a list of catalog item downloads returned.
            * @returns {Promise<Array<ItemDownloadJson>>}
            */
        getItemDownloads(): Promise<Array<ItemDownloadJson>>;
        /**
            * Gets the Catalog's Medias
            * @returns {Promise<Array<Media>>}
            */
        getMedia(): Promise<Array<Media>>;
        /**
            * Gets the Catalog's vApp-Templates
            * @returns {Promise<Array<VappTemplate>>}
            */
        getVappTemplates(): Promise<Array<VappTemplate>>;
        /**
            * Add a Vapp Template to the catalog based on an existing vapp.
            * The json can contain params "name" and "description" for the new vapp
            * template.
            * @param {VappTemplateFromVappCreateRequest} spec vapp template spec
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        addVappTemplateFromVapp(spec: VappTemplateFromVappCreateRequest): Promise<Task>;
        /**
            * Gets the Catalog's metadata.
            * @returns {Promise<Metadata<MetadataType>[]>}
            * @throws Error Throw an error if the type is unrecognized.
            */
        getMetadata(): Promise<Array<Metadata<MetadataType>>>;
        /**
            * Updates the catalog's metadata.
            * @param {Array<Metadata<MetadataType>>} metadata the new array of metadata
            * @returns {Promise<Task>} task promise
            */
        updateMetadata(metadata: Array<Metadata<MetadataType>>): Promise<Task>;
        /**
            * Deletes a metadata entry.
            * @param {string} metadataKey the key of the metadata entry to delete
            * @returns {Promise<Task>} task promise
            */
        deleteMetadata(metadataKey: string): Promise<Task>;
        /**
            * Updates the catalog.
            * @param {CatalogUpdateRequest} catalog
            * @return {Promise<Catalog>}
            */
        updateCatalog(catalog: CatalogUpdateRequest): Promise<Catalog>;
        /**
            * Initiates a new OVF upload.
            * @param params {@InitiateOVFUploadRequest} the request parameters
            * @return {Promise<Task>}
            */
        initiateOVFUpload(body: InitiateOVFUploadRequest): Promise<Task>;
        /**
            * Deletes the catalog.
            * @param {boolean} deleteTemplatesAndMedia Will delete templates and media when set to true
            * @returns {Promise<Task>} task promise
            */
        deleteCatalog(deleteTemplatesAndMedia?: boolean): Promise<Task>;
}

/**
    * Request to initiate an OVF upload.
    */
export class InitiateOVFUploadRequest {
        constructor(initiateOVFUploadRequest: InitiateOVFUploadRequest);
        constructor(initiateOVFUploadRequestJson: InitiateOVFUploadRequestJson);
        constructor(name: string, description: string | undefined, descriptor: string, uploadType?: TemplateUploadType);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string | undefined;
        /**
            * Get descriptor.
            * @returns {string}
            */
        get descriptor(): string;
        /**
            * Get the upload type.
            * @returns {TemplateUploadType}
            */
        get uploadType(): TemplateUploadType;
        /**
            * Get the json representation of this class.
            * @returns {InitiateOVFUploadRequestJson}
            */
        get json(): InitiateOVFUploadRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VappTemplateFromVappCreateRequest {
        constructor(vappTemplateFromVappCreateRequest: VappTemplateFromVappCreateRequest);
        constructor(vappTemplateFromVappCreateRequestJson: VappTemplateFromVappCreateRequestJson);
        constructor(vappUuid: string, name: string, description: string);
        /**
            * Get vapp uuid.
            * @returns {string}
            */
        get vappUuid(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get the json representation of this class.
            * @returns {VappTemplateFromVappCreateRequestJson}
            */
        get json(): VappTemplateFromVappCreateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
  * Enumeration of the available adapter types for a VM.
  */
export type AdapterType = 'E100E' | 'E1000' | 'VLANCE' | 'VMXNET' | 'FLEXIBLE' | 'VMXNET2' | 'VMXNET3';

/**
  * Enumeration of the available disk types for a VM.
  */
export type DiskType = 'LSI_LOGIC' | 'LSI_LOGIC_SAS' | 'PARA_VIRTUAL' | 'BUS_LOGIC' | 'SATA' | 'IDE';

/**
  * Interface for API entity JSON representation.
  */
export interface EntityJson {
    name: string;
    uuid: string;
    deleted: boolean;
    deleted_date: number | null;
    updated_date: number;
    company_id: string;
}

/**
  * Enumerates the core entity types.
  */
export type EntityType = 'USER' | 'COMPANY' | 'SUPPORT_TICKET' | 'SUPPORT_TICKET_COMMENT' | 'SUPPORT_TICKET_ATTACHMENT' | 'IAAS_PRODUCT' | 'IAAS_LOCATION' | 'IAAS_ORGANIZATION' | 'IAAS_VPG' | 'IAAS_VCC_FAILOVER_PLAN' | 'IAAS_DISASTER_RECOVERY_RUNBOOK' | 'IAAS_CATALOG' | 'IAAS_MEDIA' | 'IAAS_VAPP_TEMPLATE' | 'IAAS_VAPP_TEMPLATE_VM' | 'IAAS_VDC' | 'IAAS_EDGE' | 'IAAS_STORAGE_PROFILE' | 'IAAS_INTERNAL_NETWORK' | 'IAAS_VAPP' | 'IAAS_VAPP_NETWORK' | 'IAAS_VM' | 'IAAS_PERSISTENT_DISK' | 'IAAS_BACKUP_GROUP' | 'VCC_BACKUP_PRODUCT' | 'VCC_BACKUP_LOCATION' | 'VCC_BACKUP_TENANT' | 'VAC_BACKUP_JOB' | 'OBJECT_STORAGE_PRODUCT' | 'OBJECT_STORAGE_LOCATION' | 'ALERT' | 'TASK' | 'O365_PRODUCT' | 'O365_LOCATION' | 'O365_ORGANIZATION' | 'O365_JOB' | 'O365_JOB_SESSION' | 'O365_RESTORE_SESSION' | 'OBJECT_STORAGE_CEPH_PRODUCT' | 'OBJECT_STORAGE_CEPH_LOCATION' | 'OBJECT_STORAGE_CEPH_TENANT';

export type FenceModeType = 'BRIDGED' | 'NAT_ROUTED' | 'ISOLATED';

export type IamEntityType = 'COMPANY' | 'IAAS_PRODUCT' | 'IAAS_LOCATION' | 'IAAS_ORGANIZATION' | 'IAAS_VPG' | 'IAAS_VCC_FAILOVER_PLAN' | 'IAAS_CATALOG' | 'IAAS_MEDIA' | 'IAAS_VAPP_TEMPLATE' | 'IAAS_VDC' | 'IAAS_EDGE' | 'IAAS_INTERNAL_NETWORK' | 'IAAS_VAPP' | 'IAAS_VAPP_NETWORK' | 'IAAS_VM' | 'VCC_BACKUP_PRODUCT' | 'VCC_BACKUP_LOCATION' | 'VCC_BACKUP_TENANT' | 'VAC_BACKUP_JOB' | 'OBJECT_STORAGE_PRODUCT' | 'OBJECT_STORAGE_LOCATION' | 'O365_PRODUCT' | 'O365_ORGANIZATION' | 'O365_LOCATION' | 'O365_JOB' | 'O365_JOB_SESSION' | 'O365_RESTORE_SESSION' | 'IAAS_BACKUP_GROUP' | 'OBJECT_STORAGE_CEPH_PRODUCT' | 'OBJECT_STORAGE_CEPH_LOCATION' | 'OBJECT_STORAGE_CEPH_TENANT';

export type IpAddressingModeType = 'DHCP' | 'MANUAL' | 'POOL' | 'NONE';

export enum LogLevel {
    EMERGENCY = "EMERGENCY",
    ALERT = "ALERT",
    CRITICAL = "CRITICAL",
    ERROR = "ERROR",
    WARNING = "WARNING",
    NOTICE = "NOTICE",
    INFO = "INFO",
    DEBUG = "DEBUG"
}
export type LogLevelType = keyof typeof LogLevel;

/**
  * Name ID JSON
  */
export interface NameIdJson {
    name: string;
    id: string;
}

export interface NetworkIpScopeJson {
    inherited?: boolean;
    gateway: string;
    netmask: string;
    primary_dns: string;
    secondary_dns: string;
    dns_suffix: string;
    ip_ranges: Array<IpRangeJson>;
    enabled?: boolean;
    allocated_ip_addresses?: Array<string>;
    sub_allocations?: Array<NetworkSubAllocationJson>;
}

export interface NetworkSubAllocationJson {
    edge_name: string;
    ip_ranges: Array<IpRangeJson>;
}

/**
    * Product Section JSON properties for a Vm/Vapp
    */
export interface ProductSectionJson {
        product_class: string;
        product_instance: string;
        product: string;
        product_url: string;
        full_version: string;
        vendor: string;
        version: string;
        properties: {
                [key: string]: Array<ProductSectionPropertyJson>;
        };
        info: string;
        vendor_url: string;
}
/**
    * Product Section Property JSON
    * Properties specify application-level customization parameters and are particularly relevant to appliances that
    * need to be customized during deployment with specific settings such as network identity,
    * the IP addresses of DNS servers, gateways, and others. The keys in this map represent property category labels.
    * Properties that do not explicitly belong to a category are associated with a "DEFAULT" key.
    */
export interface ProductSectionPropertyJson<T = any> {
        password: boolean;
        user_configurable: boolean;
        description: string;
        label: string;
        type: ProductSectionPropertyTypeEnum;
        category: string;
        value: string;
        key: string;
        qualifiers: Array<T>;
}
/**
    * Product Section Property Type enum
    * The property variable type
    */
export enum ProductSectionPropertyTypeEnum {
        UINT8 = "UINT8",
        SINT8 = "SINT8",
        UINT16 = "UINT16",
        SINT16 = "SINT16",
        UINT32 = "UINT32",
        SINT32 = "SINT32",
        UINT64 = "UINT64",
        SINT64 = "SINT64",
        STRING = "STRING",
        BOOLEAN = "BOOLEAN",
        REAL32 = "REAL32",
        REAL64 = "REAL64"
}

export type ReportFormat = 'PDF' | 'HTML' | 'CSV';

export interface ReportHeaderJson {
    uuid: string;
    entity_uuid: string;
    report_type: ReportTypeJson;
    file_type: ReportFormat;
    created: number;
}

export type ReportTypeJson = 'ANTIMALWARE' | 'CONTINUITY_PROTECTION' | 'DISASTER_RECOVERY_ADMIN' | 'DPI_EVENT' | 'CLOUD_EVENT_HISTORY' | 'FIREWALL_EVENT' | 'HIPAA' | 'INTEGRITY_EVENT' | 'LOG_INSPECTION_EVENT' | 'LOGIN_EVENT_HISTORY' | 'SUPPORT_REQUESTS' | 'VM_ENCRYPTION' | 'ORG_VM_INVENTORY' | 'VDC_VM_INVENTORY' | 'VULNERABILITY' | 'ORG_BILLING_REPORT' | 'WEB_REPUTATION_EVENT';

export interface StorageProfileJson {
    uuid: string;
    vdc_uuid: string;
    name: string;
    enabled: boolean;
    default_profile: boolean;
    unit: string;
    limit: number;
    storage_used_in_mb: number;
}

/**
  * Update Product Section request JSON properties.
  * Contains a Map of fully-qualified product section property keys to new values.
  * Fully qualified keys are of the form [productSectionClass.]propertyKey[.productSectionInstance].
  */
export interface UpdateProductSectionRequestJson {
    params: {
        [key: string]: string;
    };
}

/**
    * Interface for BillJson JSON representation.
    */
export interface BillJson {
        billing_model_type: BillingModelType | null;
        bandwidth: ResourceCostAndUsageJson;
        cpu: ResourceCostAndUsageJson;
        memory: ResourceCostAndUsageJson;
        disk: DiskCostAndUsageJson;
        total_cost: number;
        total_cost_estimate: number;
        year: number;
        month: number;
        entity_uuid: string;
        entity_name: string;
        entity_type: EntityType;
        line_items: Array<BillLineItemJson>;
        currency_code: CurrencyCode;
        test_drive: boolean;
}
/**
    * Interface for BillJson Line Item JSON representation.
    */
export interface BillLineItemJson {
        name: string;
        cost_per_unit: number;
        quantity: number;
        product_id: string;
}

/**
  * Interface for billing currency code JSON representation
  */
export interface BillingCurrencyCodeJson {
    currency_code: CurrencyCode;
}

export interface BillingLegacyResponseJson {
    has_legacy_billing: boolean;
}

/**
  * Enumeration of all possible billing model types.
  */
export type BillingModelType = 'LEGACY' | 'CURRENT' | 'MIXED' | 'UNSUPPORTED';

/**
  * Interface for Billing Summary JSON representation.
  */
export interface BillingSummaryJson {
    previous_month: BillJson;
    current_month: BillJson;
    previous_hour: BillJson;
    current_hour: BillJson;
    test_drive: boolean;
}

export interface CostAndUsageJson {
    cost: number;
    usage: number;
}

/**
  * Enumeration of supported currency codes.
  */
export type CurrencyCode = 'AUD' | 'CAD' | 'USD' | 'SGD' | 'EUR' | 'GBP';

export interface DiskCostAndUsageJson {
    total: ResourceCostAndUsageJson;
    hdd: ResourceCostAndUsageJson;
    ssd: ResourceCostAndUsageJson;
    archive: ResourceCostAndUsageJson;
}

/**
  * Interface for Org vDC Bills JSON representation.
  */
export interface OrgVdcBillsJson {
    org_uuid: string;
    month: number;
    year: number;
    vdc_bills: Array<BillJson>;
}

export interface ResourceCostAndUsageJson {
    total: CostAndUsageJson;
    reserved: CostAndUsageJson;
    burst: CostAndUsageJson;
}

/**
    * Bill Line Item.
    */
export class BillLineItem {
        constructor(_json: BillLineItemJson);
        /**
            * Gets the line item name.
            * @returns {string} name
            */
        get name(): string;
        /**
            * Gets the cost per unit.
            * @returns {number} cost per unit
            */
        get costPerUnit(): number;
        /**
            * Gets the quantity.
            * @returns {number} quantity
            */
        get quantity(): number;
        /**
            * Gets the product ID.
            * @returns {string} the product ID
            */
        get productId(): string;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {BillLineItemJson} the JSON representation
            */
        get json(): BillLineItemJson;
}

export class Bill {
        constructor(_json: BillJson);
        /**
            * Get billing model type.
            * @returns {BillingModelType | null}
            */
        get billingModelType(): BillingModelType | null;
        /**
            * Get bandwidth.
            * @returns {ResourceCostAndUsage}
            */
        get bandwidth(): ResourceCostAndUsage;
        /**
            * Get cpu.
            * @returns {ResourceCostAndUsage}
            */
        get cpu(): ResourceCostAndUsage;
        /**
            * Get memory.
            * @returns {ResourceCostAndUsageJson}
            */
        get memory(): ResourceCostAndUsage;
        /**
            * Get disk.
            * @returns {DiskCostAndUsage}
            */
        get disk(): DiskCostAndUsage;
        /**
            * Get total cost.
            * @returns {number}
            */
        get totalCost(): number;
        /**
            * Get total cost estimate.
            * @returns {number}
            */
        get totalCostEstimate(): number;
        /**
            * Get year.
            * @returns {number}
            */
        get year(): number;
        /**
            * Get month.
            * @returns {number}
            */
        get month(): number;
        /**
            * Get entity uuid.
            * @returns {string}
            */
        get entityUuid(): string;
        /**
            * Get entity name.
            * @returns {string}
            */
        get entityName(): string;
        /**
            * Get entity type.
            * @returns {EntityType}
            */
        get entityType(): EntityType;
        /**
            * Get line items.
            * @returns {Array<BillLineItem>}
            */
        get lineItems(): Array<BillLineItem>;
        /**
            * Get currency code.
            * @returns {CurrencyCode}
            */
        get currencyCode(): CurrencyCode;
        /**
            * Get test drive
            * @returns {boolean}
            */
        get testDrive(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {BillJson}
            */
        get json(): BillJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Billing Currency Code
    */
export class BillingCurrencyCode {
        constructor(_json: BillingCurrencyCodeJson);
        /**
            * Get currency code.
            * @returns {CurrencyCode}
            */
        get currencyCode(): CurrencyCode;
        /**
            * Get the json representation of this class.
            * @returns {BillingCurrencyCodeJson}
            */
        get json(): BillingCurrencyCodeJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Billing legacy response
    */
export class BillingLegacyResponse {
        constructor(_json: BillingLegacyResponseJson);
        /**
            * Whether or not there is legacy billing type.
            * @returns {boolean} whether or not there is legacy billing type
            */
        get hasLegacyBilling(): boolean;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {BillingLegacyResponseJson} the JSON representation
            */
        get json(): BillingLegacyResponseJson;
}

/**
    * Billing Summary.
    */
export class BillingSummary {
        constructor(_json: BillingSummaryJson);
        /**
            * Gets the current month bill.
            * @returns {Bill} the current month bill
            */
        get currentMonth(): Bill;
        /**
            * Gets the previous month bill.
            * @returns {Bill} the previous month bill
            */
        get previousMonth(): Bill;
        /**
            * Gets the current hour bill.
            * @returns {Bill} the current hour bill
            */
        get currentHour(): Bill;
        /**
            * Gets the previous hour bill.
            * @returns {Bill} the previous hour bill
            */
        get previousHour(): Bill;
        /**
            * Indicates whether this is a test drive bill.
            * @returns {boolean} value
            */
        get testDrive(): boolean;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {BillingSummaryJson} the JSON representation
            */
        get json(): BillingSummaryJson;
}

export class CostAndUsage {
        constructor(_json: CostAndUsageJson);
        /**
            * Get cost.
            * @returns {number}
            */
        get cost(): number;
        /**
            * Get usage.
            * @returns {number}
            */
        get usage(): number;
        /**
            * Get the json representation of this class.
            * @returns {CostAndUsageJson}
            */
        get json(): CostAndUsageJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class DiskCostAndUsage {
        constructor(_json: DiskCostAndUsageJson);
        /**
            * Get total.
            * @returns {ResourceCostAndUsage}
            */
        get total(): ResourceCostAndUsage;
        /**
            * Get hdd.
            * @returns {ResourceCostAndUsage}
            */
        get hdd(): ResourceCostAndUsage;
        /**
            * Get ssd.
            * @returns {ResourceCostAndUsage}
            */
        get ssd(): ResourceCostAndUsage;
        /**
            * Get archive.
            * @returns {ResourceCostAndUsage}
            */
        get archive(): ResourceCostAndUsage;
        /**
            * Get the json representation of this class.
            * @returns {DiskCostAndUsageJson}
            */
        get json(): DiskCostAndUsageJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Org vDC Bills.
    */
export class OrgVdcBills {
        constructor(_json: OrgVdcBillsJson);
        /**
            * Gets the org UUID.
            * @returns {string}
            */
        get orgUuid(): string;
        /**
            * Gets the month as an integer in the range 1 - 12.
            * @returns {number}
            */
        get month(): number;
        /**
            * Gets the year.
            * @returns {number}
            */
        get year(): number;
        /**
            * Gets the list of bills for each vDC.
            * @returns {Array<Bill>}
            */
        get bills(): Array<Bill>;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {OrgVdcBillsJson} the JSON representation
            */
        get json(): OrgVdcBillsJson;
}

export class ResourceCostAndUsage {
        constructor(_json: ResourceCostAndUsageJson);
        /**
            * Get total.
            * @returns {CostAndUsage}
            */
        get total(): CostAndUsage;
        /**
            * Get reserved.
            * @returns {CostAndUsage}
            */
        get reserved(): CostAndUsage;
        /**
            * Get burst.
            * @returns {CostAndUsage}
            */
        get burst(): CostAndUsage;
        /**
            * Get the json representation of this class.
            * @returns {ResourceCostAndUsageJson}
            */
        get json(): ResourceCostAndUsageJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * EntityDomain
    */
export class EntityDomain {
        constructor(entityDomainType: IamEntityType);
        /**
            * Return the string representation of this class. Which is an IamEntityType
            * @returns {string}
            */
        toString(): string;
        /**
            * Get the parent entityDomain.
            * @returns {EntityDomain | null}
            */
        get parent(): EntityDomain | null;
}

/**
    * Entity.
    */
export abstract class Entity {
        constructor(_apiEntity: EntityJson);
        /**
            * Gets the name.
            * @returns {string} name
            */
        get name(): string;
        /**
            * Gets the UUID.
            * @returns {string} UUID
            */
        get uuid(): string;
        /**
            * Indicates whether the entity is deleted.
            * @returns {boolean} value
            */
        get deleted(): boolean;
        /**
            * Gets the last date that the entity was updated.
            * @returns {Date} last updated date
            */
        get updatedDate(): Date;
        /**
            * Gets the date that the entity was deleted, or null if it is not deleted.
            * @returns {Date} deleted date or null if not applicable
            */
        get deletedDate(): Date | null;
        /**
            * Gets the ID of the company that the entity belongs to.
            */
        get companyId(): string;
        /**
            * Gets the type of the entity.
            * @returns {EntityType} the type of the entity
            */
        abstract get entityType(): EntityType;
}

/**
  * Interface for IP Range JSON properties.
  */
export interface IpRangeJson {
    start: string;
    end: string;
}

/**
    * IP Range.
    */
export class IpRange {
        constructor(ipRange: IpRange);
        constructor(ipRangeJson: IpRangeJson);
        constructor(start: string, end: string);
        /**
            * Get start.
            * @returns {string}
            */
        get start(): string;
        /**
            * Get end.
            * @returns {string}
            */
        get end(): string;
        /**
            * Get the json representation of this class.
            * @returns {IpRangeJson}
            */
        get json(): IpRangeJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Jpeg Image Class
    */
export class JpegImage {
        constructor(data: Buffer);
        /**
            * Returns image as Uint8Array
            * @returns {Uint8Array} array Uint8Array
            */
        toUint8Array(): Uint8Array;
        /**
            * Returns image as Base64 string
            * @returns {string} string Base64 string
            */
        toDataUrl(): string;
}

/**
  * Enumeration of possible metadata access modes.
  */
export type MetadataAccessMode = 'READ_WRITE' | 'READONLY' | 'PRIVATE';

/**
  * JSON representation of metadata from the API.
  */
export interface MetadataJson<T extends MetadataType> {
    key: string;
    access: MetadataAccessMode;
    type: MetadataTypeKey;
    value: T;
}

/**
  * Enumeration of possible metadata type keys.
  */
export type MetadataTypeKey = 'string' | 'number' | 'datetime' | 'boolean';

/**
  * Enumeration of possible metadata types.
  */
export type MetadataType = string | number | boolean | Date;

/**
    * Metadata.
    */
export class Metadata<T extends MetadataType> {
        constructor(_json: MetadataJson<T>);
        /**
            * Gets the metadata key.
            * @returns {string} the key
            */
        get key(): string;
        /**
            * Gets the metadata's access restriction type.
            * @returns {MetadataAccessMode} the type of access restriction
            */
        get access(): MetadataAccessMode;
        /**
            * Gets the type of the metadata.
            * @returns {VirtualDiskType} the type
            */
        get type(): MetadataTypeKey;
        /**
            * Gets the metadata value.
            * @returns {} the type
            */
        get value(): T;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {MetadataJson} the API JSON representation of the metadata
            */
        get json(): MetadataJson<T>;
}

/**
    * NameId Class
    */
export class NameId {
        constructor(_json: NameIdJson);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get ID.
            * @returns {string}
            */
        get id(): string;
        /**
            * Get the json representation of this class.
            * @returns {NameIdJson}
            */
        get json(): NameIdJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class NetworkIpScope {
        constructor(_json: NetworkIpScopeJson);
        /**
            * Get inherited.
            * @returns {boolean}
            */
        get inherited(): boolean | undefined;
        /**
            * Get gateway.
            * @returns {string}
            */
        get gateway(): string;
        /**
            * Get netmask.
            * @returns {string}
            */
        get netmask(): string;
        /**
            * Get primary dns.
            * @returns {string}
            */
        get primaryDns(): string;
        /**
            * Get secondary dns.
            * @returns {string}
            */
        get secondaryDns(): string;
        /**
            * Get dns suffix.
            * @returns {string}
            */
        get dnsSuffix(): string;
        /**
            * Get ip ranges.
            * @returns {Array<IpRange>}
            */
        get ipRanges(): Array<IpRange>;
        /**
            * Get enabled.
            * @returns {boolean | undefined}
            */
        get enabled(): boolean | undefined;
        /**
            * Get allocated ip addresses.
            * @returns {Array<string> | undefined}
            */
        get allocatedIpAddresses(): Array<string> | undefined;
        /**
            * Get sub allocations.
            * @returns {Array<NetworkSubAllocation> | undefined}
            */
        get subAllocations(): Array<NetworkSubAllocation> | undefined;
        /**
            * Get the json representation of this class.
            * @returns {NetworkIpScopeJson}
            */
        get json(): NetworkIpScopeJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class NetworkSubAllocation {
        constructor(_json: NetworkSubAllocationJson);
        /**
            * Get edge name.
            * @returns {string}
            */
        get edgeName(): string;
        /**
            * Get ip ranges.
            * @returns {Array<IpRangeJson>}
            */
        get ipRanges(): Array<IpRangeJson>;
        /**
            * Get the json representation of this class.
            * @returns {NetworkSubAllocationJson}
            */
        get json(): NetworkSubAllocationJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Product Section of a Vm/Vapp
    */
export class ProductSection {
        constructor(_json: ProductSectionJson);
        /**
            * Get the product class that uniquely identifies the software product
            * (typically using reverse domain name convention).
            * @returns {string}
            */
        get productClass(): string;
        /**
            * Get the product instance, if multiple instances of the same product are installed,
            * this is used to identify the different instances.
            * @returns {string}
            */
        get productInstance(): string;
        /**
            * Get the product.
            * Specifies the name of the product.
            * @returns {string}
            */
        get product(): string;
        /**
            * Get the product url that specifies a URL which shall resolve to a human readable description of the product.
            * @returns {string}
            */
        get productUrl(): string;
        /**
            * Get the full version that describes the product version in long form.
            * @returns {string}
            */
        get fullVersion(): string;
        /**
            * Get the vendor that specifies the name of the product vendor.
            * @returns {string}
            */
        get vendor(): string;
        /**
            * Get the version that specifies the product version in short form.
            * @returns {string}
            */
        get version(): string;
        /**
            * Get the properties that specify application-level customization parameters and are particularly relevant to
            * appliances that need to be customized during deployment
            * @returns {{ [ key: string]: Array<VmProductSectionPropertyJson> }}
            */
        get properties(): {
                [key: string]: Array<ProductSectionPropertyJson>;
        };
        /**
            * Get the info that describes product information for the service.
            * @returns {string}
            */
        get info(): string;
        /**
            * Get the vendor url that specifies a URL which shall resolve to a human readable description of the vendor.
            * @returns {string}
            */
        get vendorUrl(): string;
        /**
            * Get the json representation of this class.
            * @returns {ProductSectionJson}
            */
        get json(): ProductSectionJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class ReportHeader {
        constructor(_json: ReportHeaderJson);
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get entity uuid.
            * @returns {string}
            */
        get entityUuid(): string;
        /**
            * Get report type.
            * @returns {ReportTypeJson}
            */
        get reportType(): ReportTypeJson;
        /**
            * Get file type.
            * @returns {ReportFormat}
            */
        get fileType(): ReportFormat;
        /**
            * Get created.
            * @returns {number}
            */
        get created(): number;
        /**
            * Get the json representation of this class.
            * @returns {ReportHeaderJson}
            */
        get json(): ReportHeaderJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export interface HasSnapshotJson {
    has_snapshot: boolean;
}

export interface SnapshotCreateRequestJson {
    memory: boolean;
    quiesce: boolean;
    name: string;
    description: string;
}

export interface SnapshotJson {
    creation_date: number;
    size: number;
    powered_on: boolean;
}

/**
    * HasSnapshot. Whether a VM or vApp has a snapshot.
    */
export class HasSnapshot {
        constructor(_json: HasSnapshotJson);
        /**
            * Get has snapshot.
            * @returns {boolean}
            */
        get hasSnapshot(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {HasSnapshotJson}
            */
        get json(): HasSnapshotJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Request to create a snapshot.
    */
export class SnapshotCreateRequest {
        constructor(snapshotCreateRequest: SnapshotCreateRequest);
        constructor(snapshotCreateRequestJson: SnapshotCreateRequestJson);
        constructor(memory: boolean, quiesce: boolean, name: string, description: string);
        /**
            * Get memory.
            * @returns {boolean}
            */
        get memory(): boolean;
        /**
            * Get quiesce.
            * @returns {boolean}
            */
        get quiesce(): boolean;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get the json representation of this class.
            * @returns {SnapshotCreateRequestJson}
            */
        get json(): SnapshotCreateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Snapshot for a VM or vApp.
    */
export class Snapshot {
        constructor(_json: SnapshotJson);
        /**
            * Get creation date.
            * @returns {number}
            */
        get creationDate(): Date;
        /**
            * Get size.
            * @returns {number}
            */
        get size(): number;
        /**
            * Get powered on.
            * @returns {boolean}
            */
        get poweredOn(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {SnapshotJson}
            */
        get json(): SnapshotJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Storage Profile.
    */
export class StorageProfile {
        constructor(_json: StorageProfileJson);
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get vdc uuid.
            * @returns {string}
            */
        get vdcUuid(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get default profile.
            * @returns {boolean}
            */
        get defaultProfile(): boolean;
        /**
            * Get unit.
            * @returns {string}
            */
        get unit(): string;
        /**
            * Get limit.
            * @returns {number}
            */
        get limit(): number;
        /**
            * Get storage used in mb.
            * @returns {number}
            */
        get storageUsedInMb(): number;
        /**
            * Get the json representation of this class.
            * @returns {StorageProfileJson}
            */
        get json(): StorageProfileJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Update Product Section properties request
    */
export class UpdateProductSectionRequest {
        constructor(_json: UpdateProductSectionRequestJson);
        /**
            * Get the params of the Update product section request
            * @returns {{ [ key: string]: string }} map of params to update
            */
        get params(): {
                [key: string]: string;
        };
        /**
            * Get the json representation of this class.
            * @returns {UpdateProductSectionRequestJson}
            */
        get json(): UpdateProductSectionRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export interface BaCompanyCreateRequestJson {
    password: string;
    name: string;
    notes: string;
    storage_gb: number;
}

export interface CloudTenantBillJson {
    total: number;
    year: number;
    month: number;
    currency_code: CurrencyCode;
    storage_quota_in_gb: number;
    storage_price_per_gb: number;
    full_month_contract_cost: number;
    has_insider_protection: boolean;
    insider_protection_price_per_gb: number;
    insider_protection_total: number;
    wan_accelerator_appliance_total: number;
    dedicated_veeam_gateway_total: number;
    rental_licenses_subscriptions_total: number;
    cross_connect_subscriptions_total: number;
}

export interface CloudTenantBillHistoryJson {
    bills: {
        [key: string]: Array<CloudTenantBillJson>;
    };
}

/**
  * Interface for Company JSON properties.
  */
export interface CompanyJson extends EntityJson {
    has_iaas: boolean;
    has_vcc: boolean;
    has_object_storage: boolean;
    has_vccr: boolean;
    has_o365: boolean;
    has_ceph: boolean;
}

export interface CompanyTwoFactorAuthSettingsJson {
    all_users: boolean;
    role_uuids?: Array<String>;
}

export interface CompanyUserJson {
    user_type: UserType;
    locked: boolean;
    email: string;
    phone: string;
    company: string;
    address: string;
    city: string;
    state: string;
    zip: string;
    country: string;
    name: string;
    fullname: string;
    deleted: boolean;
    created_date: number;
    deleted_date: number;
    domain: string | UserDomainJson;
    first_name: string;
    last_name: string;
    role: string;
    login_type: UserLoginType;
    invitation_status: UserInvitationStatus;
    two_factor_enabled: boolean;
}

export interface EnforceTwoFactorAuthRequestJson {
    all_users: boolean;
    roles?: Array<String>;
}

/**
  * O365 Audit Log JSON properties
  */
export interface O365AuditLogJson {
    username: string;
    location_id: string;
    o365_org_uuid: string;
    event_type: string;
    console_entity: string;
    entity_name: string;
    time: number;
    ip_address: string;
}

/**
  * O365 Backup Repository JSON properties
  */
export interface O365BackupRepositoryJson {
    name: string;
    description: string;
    id: string;
}

/**
    * O365 Bill Response JSON properties
    */
export interface O365BillJson {
        burst_count_licenses: number;
        cost_per_license: number;
        currency_code: CurrencyCodeResponse;
        full_month_contract_cost: number;
        month: number;
        number_of_licenses: number;
        total: number;
        total_cost_for_used_licenses: number;
        year: number;
        licensed_user_count: number;
        total_cost_for_licensed_user_count: number;
        burst_count_for_licensed_user_count: number;
}
/**
    * Currency code response
    */
export interface CurrencyCodeResponse {
        currency_code: CurrencyCode;
}

/**
  * Interface for O365 Device code JSON.
  */
export interface O365DeviceCodeJson {
    user_code: string;
    message: string;
    expires_in: number;
    verification_url: string;
}

/**
  * O365 Organization Set JSON.
  */
export interface O365OrganizationSetJson {
    data: Array<O365OrganizationJson>;
    total_reserved_licenses: number;
}

export interface SalesforceSubscriptionJson {
    uuid: string;
    contract: string;
    currency_code: string;
    name: string;
    contract_number: string;
    console_total_monthly_cost: number;
    product_id: string;
    console_cost_per_unit: number;
    quantity: number;
    account_id: string;
    product_name: string;
    deployment_date: number;
    product: string;
    product_code: string;
    cancellation_date: number;
}

export interface SearchResultJson {
    query: string;
    page_offset: number;
    page_size: number;
    returned_hits: number;
    total_hits: number;
    results: Array<{
        [key: string]: string;
    }>;
}

export interface UserCreateRequestJson {
    password?: string;
    domain: string;
    fullname: string;
    email: string;
    username: string;
    role_uuid?: string;
    send_invitation?: boolean;
}

export interface UserCreationJson {
    username: string;
    created: boolean;
    error: string;
}

export enum UserInvitationStatusEnum {
    SENT = "SENT",
    NOT_SENT = "NOT_SENT",
    ACTIVE = "ACTIVE"
}
export type UserInvitationStatus = keyof typeof UserInvitationStatusEnum;

export enum UserLoginTypeEnum {
    LOCAL = "LOCAL",
    SSO = "SSO"
}
export type UserLoginType = keyof typeof UserLoginTypeEnum;

export interface UserTwoFactorAuthRecordJson {
    username: string;
    email: string;
    full_name: string;
    configured: boolean;
}

export interface VacCompanyQuotaStatusJson {
    total_storage_quota: number;
    used_storage_quota: number;
    total_contracted_quota: number;
    number_of_contracts: number;
}

export interface VacContractJson {
    uuid: string;
    status: string;
    start: number;
    end: number;
    term: number;
    last_mod: number;
    created: number;
    activated: number;
    cancellation_date: number;
    status_code: string;
    group: string;
    test_drive: boolean;
    discount: number;
    subscriptions: Array<SalesforceSubscriptionJson>;
}

/**
  * VM Protection Status Summary JSON
  */
export interface VmProtectionSummaryJson {
    vms_protected: number;
    vms_un_protected: number;
    total_vms: number;
}

/**
    * BaCompany creation request.
    */
export class BaCompanyCreateRequest {
        constructor(baCompanyCreateRequest: BaCompanyCreateRequest);
        constructor(baCompanyCreateRequestJson: BaCompanyCreateRequestJson);
        constructor(password: string, name: string, notes: string, storageGb: number);
        /**
            * Get password.
            * @returns {string}
            */
        get password(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get notes.
            * @returns {string}
            */
        get notes(): string;
        /**
            * Get storage gb.
            * @returns {number}
            */
        get storageGb(): number;
        /**
            * Get the json representation of this class.
            * @returns {BaCompanyCreateRequestJson}
            */
        get json(): BaCompanyCreateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Cloud Tenant Bill History.
    */
export class CloudTenantBillHistory {
        constructor(_json: CloudTenantBillHistoryJson);
        /**
            * Get bills.
            * @returns {{ [key: string]: Array<CloudTenantBill> }}
            */
        get bills(): {
                [key: string]: Array<CloudTenantBill>;
        };
        /**
            * Get the json representation of this class.
            * @returns {CloudTenantBillHistoryJson}
            */
        get json(): CloudTenantBillHistoryJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Cloud Tenant Bill.
    */
export class CloudTenantBill {
        constructor(_json: CloudTenantBillJson);
        /**
            * Get total.
            * @returns {number}
            */
        get total(): number;
        /**
            * Get year.
            * @returns {number}
            */
        get year(): number;
        /**
            * Get month.
            * @returns {number}
            */
        get month(): number;
        /**
            * Get currency code.
            * @returns {CurrencyCode}
            */
        get currencyCode(): CurrencyCode;
        /**
            * Get storage quota in gb.
            * @returns {number}
            */
        get storageQuotaInGb(): number;
        /**
            * Get storage price per gb.
            * @returns {number}
            */
        get storagePricePerGb(): number;
        /**
            * Get full month contract cost.
            * @returns {number}
            */
        get fullMonthContractCost(): number;
        /**
            * Get has insider protection.
            * @returns {boolean}
            */
        get hasInsiderProtection(): boolean;
        /**
            * Get insider protection price per gb.
            * @returns {number}
            */
        get insiderProtectionPricePerGb(): number;
        /**
            * Get insider protection total.
            * @returns {number}
            */
        get insiderProtectionTotal(): number;
        /**
            * Get wan accelerator appliance total.
            * @returns {number}
            */
        get wanAcceleratorApplianceTotal(): number;
        /**
            * Get dedicated veeam gateway total.
            * @returns {number}
            */
        get dedicatedVeeamGatewayTotal(): number;
        /**
            * Get rental licenses subscriptions total.
            * @returns {number}
            */
        get rentalLicensesSubscriptionsTotal(): number;
        /**
            * Get the cross connect subscriptions total.
            * @returns {number}
            */
        get crossConnectSubscriptionsTotal(): number;
        /**
            * Get the json representation of this class.
            * @returns {CloudTenantBillJson}
            */
        get json(): CloudTenantBillJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
  * Company Task Filter Params.
  */
export interface CompanyTaskFilterParams {
    includeDescendantTasks?: boolean;
    synced?: boolean;
    username?: string;
    timestampAfter?: number;
    timestampBefore?: number;
    queryTimestamp?: number;
    offset?: number;
    limit?: number;
    order?: PagingOrder;
}

/**
    * Company Two Factor Auth Settings
    * - To apply 2FA to all users, set 'allUsers' to true and set 'rolesUuids' to null or empty.
    * - To apply 2FA to specific roles, set 'allUsers' to false and fill 'roleUuids' with role uuids.
    */
export class CompanyTwoFactorAuthSettings {
        constructor(_json: CompanyTwoFactorAuthSettingsJson);
        /**
            * Get all users.
            * @returns {boolean}
            */
        get allUsers(): boolean;
        /**
            * Get role uuids.
            * @returns {Array<String>}
            */
        get roleUuids(): Array<String>;
        /**
            * Get the json representation of this class.
            * @returns {CompanyTwoFactorAuthSettingsJson}
            */
        get json(): CompanyTwoFactorAuthSettingsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Company user class.
    */
export class CompanyUser {
        constructor(_json: CompanyUserJson);
        /**
            * Get user type.
            * @returns {UserType}
            */
        get userType(): UserType;
        /**
            * Get locked.
            * @returns {boolean}
            */
        get locked(): boolean;
        /**
            * Get email.
            * @returns {string}
            */
        get email(): string;
        /**
            * Get phone.
            * @returns {string}
            */
        get phone(): string;
        /**
            * Get company.
            * @returns {string}
            */
        get company(): string;
        /**
            * Get address.
            * @returns {string}
            */
        get address(): string;
        /**
            * Get city.
            * @returns {string}
            */
        get city(): string;
        /**
            * Get state.
            * @returns {string}
            */
        get state(): string;
        /**
            * Get zip.
            * @returns {string}
            */
        get zip(): string;
        /**
            * Get country.
            * @returns {string}
            */
        get country(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get fullname.
            * @returns {string}
            */
        get fullname(): string;
        /**
            * Get deleted.
            * @returns {boolean}
            */
        get deleted(): boolean;
        /**
            * Get created date.
            * @returns {number}
            */
        get createdDate(): number;
        /**
            * Get deleted date.
            * @returns {number}
            */
        get deletedDate(): number;
        /**
            * Get domain.
            * @returns {string | UserDomainJson}
            */
        get domain(): string | UserDomainJson;
        /**
            * Get first name.
            * @returns {string}
            */
        get firstName(): string;
        /**
            * Get last name.
            * @returns {string}
            */
        get lastName(): string;
        /**
            * Get role.
            * @returns {string}
            */
        get role(): string;
        /**
            * Get login type.
            * @returns {UserLoginType}
            */
        get loginType(): UserLoginType;
        /**
            * Get invitation status.
            * @returns {UserInvitationStatus}
            */
        get invitationStatus(): UserInvitationStatus;
        /**
            * Get 2FA status.
            * @returns {boolean}
            */
        get twoFactorAuthenticationEnabled(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {CompanyUserJson}
            */
        get json(): CompanyUserJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Company.
    */
export class Company extends Entity {
        constructor(_json: CompanyJson);
        /**
            * Gets an Company by ID.
            * @param id Company ID
            * @returns {Promise<Company>} promise that resolves with the Company
            */
        static getCompany(id: string): Promise<Company>;
        get entityType(): EntityType;
        /**
            * Indicates whether the company has the iland cloud product.
            * @returns {boolean} value
            */
        get hasIlandCloud(): boolean;
        /**
            * Indicates whether the company has the iland backup product.
            * @returns {boolean} value
            */
        get hasIlandBackup(): boolean;
        /**
            * Indicates whether the company has the iland Object Storage product
            * @returns {boolean}
            */
        get hasIlandObjectStorage(): boolean;
        /**
            * Indicates whether the company has iland Veeam Cloud Connection Replication add-on product
            * @returns {boolean}
            */
        get hasIlandVccr(): boolean;
        /**
            * Indicates whether the company has iland Office 365 product
            * @returns {boolean}
            */
        get hasIlandO365(): boolean;
        /**
            * Indicates whether the company has the Ceph object storage (Object Storage 2.0) product
            * @returns {boolean}
            */
        get hasCeph(): boolean;
        /**
            * Gets the raw JSON object from the API.
            * @returns {CompanyJson} the JSON representation
            */
        get json(): CompanyJson;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Refreshes the Company data by retrieving it from the API again.
            * @returns {Promise<Company>} promise that resolves with this object
            */
        refresh(): Promise<Company>;
        /**
            * Get company roles.
            * @returns {Promise<Array<Role>>} task promise
            */
        getRoles(): Promise<Array<Role>>;
        /**
            * Get a company role.
            * @returns {Promise<Role>} a promise with the queried role
            */
        getRole(uuid: string): Promise<Role>;
        /**
            * Creates a new company role.
            * @returns {Promise<Role>} a promise with the newly created role
            */
        createRole(request: RoleCreationRequest): Promise<Role>;
        /**
            * Updates a company role.
            * @returns {Promise<Role>} a promise with the newly created role that has replaced the original
            */
        updateRole(uuid: string, request: RoleCreationRequest): Promise<Role>;
        /**
            * Deletes a new company role.
            * @returns {Promise<void>} a promise that indicates success or failure
            */
        deleteRole(uuid: string): Promise<void>;
        /**
            * Gets all company users.
            * @returns {Promise<Array<CompanyUser>>} a promise with the list of the company users
            */
        getUsers(): Promise<Array<CompanyUser>>;
        /**
            * Gets all company users that are assigned to a specified role.
            * @returns {Promise<Array<User>>} a promise with the list of the company users that are assigned to the role
            */
        getUsersWithRole(roleUuid: string): Promise<Array<User>>;
        /**
            * A company may have multiple user domains if they have users that are shared with other companies. This method
            * returns the identifiers for all domains that are associated with this company.
            * @returns {Promise<Array<string>>} a promise with the list of the company user domains
            */
        getUserDomains(): Promise<Array<string>>;
        /**
            * Creates a new company user.
            * @returns {Promise<User>} a promise with the newly created user
            */
        createUser(request: UserCreateRequest): Promise<User>;
        /**
            * Create multiple users for current company.
            * @param {Array<UserCreateRequest>>} userCreateRequests
            * @returns {Promise<Array<UserCreation>>} response
            */
        createUsers(userCreateRequests: Array<UserCreateRequest>): Promise<Array<UserCreation>>;
        /**
            * Get all support tickets
            * @param {number} offset
            * @param {number} limit
            * @returns {Promise<Array<SupportTicket>>}
            */
        getSupportTickets(offset?: number, limit?: number): Promise<Array<SupportTicket>>;
        /**
            * Get a specified support ticket.
            * @param {number} ticketId
            * @returns {Promise<SupportTicket>}
            */
        getSupportTicket(ticketId: number): Promise<SupportTicket>;
        /**
            * Get all organizations in the company location
            * @param {string} locationId
            * @returns {Promise<Array<Org>>}
            */
        getOrganizations(locationId: string): Promise<Array<Org>>;
        /**
            * Get all vApps in the company location
            * @param {string} locationId
            * @returns {Promise<Array<Vapp>>}
            */
        getVapps(locationId: string): Promise<Array<Vapp>>;
        /**
            * Get all vDCs in the company location
            * @param {string} locationId
            * @returns {Promise<Array<Vdc>>}
            */
        getVdcs(locationId: string): Promise<Array<Vdc>>;
        /**
            * Get all VMs in the company location
            * @param {string} locationId
            * @returns {Promise<Array<Vm>>}
            */
        getVms(locationId: string): Promise<Array<Vm>>;
        /**
            * Get all edges in the company location.
            * @param {string} locationId
            * @returns {Promise<Array<Edge>>}
            */
        getEdges(locationId: string): Promise<Array<Edge>>;
        /**
            * Get all media in the company location.
            * @param {string} locationId
            * @returns {Promise<Array<Media>>}
            */
        getMedia(locationId: string): Promise<Array<Media>>;
        /**
            * Get all vApp templates in the company location.
            * @param {string} locationId
            * @returns {Promise<Array<VappTemplate>>}
            */
        getVappTemplates(locationId: string): Promise<Array<VappTemplate>>;
        /**
            * Gets all VPGs in the company location.
            * @param {string} locationId
            * @param {Array<VpgSubEntityRequest>} expand
            * @returns {Promise<Array<ExpandedVpg>>}
            */
        getVpgs(locationId: string, expand?: Array<VpgSubEntityRequest>): Promise<Array<ExpandedVpg>>;
        /**
            * Gets all catalogs in the company location.
            * @param {string} locationId
            * @returns {Promise<Array<Catalog>>}
            */
        getCatalogs(locationId: string): Promise<Array<Catalog>>;
        /**
            * Gets all internal networks in the company location.
            * @param {string} locationId
            * @returns {Promise<Array<InternalNetwork>>}
            */
        getOrgVdcNetworks(locationId: string): Promise<Array<InternalNetwork>>;
        /**
            * Gets all the vApp networks in the company location.
            * @param {string} locationId
            * @returns {Promise<Array<VappNetwork>>}
            */
        getVappNetworks(locationId: string): Promise<Array<VappNetwork>>;
        /**
            * Gets all the O365 Organizations and total reserved O365 licenses for the company location.
            * @param {string} locationId
            * @return {Promise<O365OrganizationSet>}
            */
        getO365Organizations(locationId: string): Promise<O365OrganizationSet>;
        /**
            * Get O365 bill for Company
            * If no dates passed in, API gets the previous 6 months
            * @param locationId
            * @param startYear - the year to start
            * @param startMonth - startMonth the month to start (1-12)
            * @param endYear - the year to end with
            * @param endMonth -the month to end (1-12)
            */
        getO365billing(locationId: string, startYear?: number, startMonth?: number, endYear?: number, endMonth?: number): Promise<Array<O365Bill>>;
        /**
            * Get the O365 Audit log for the company
            * @param locationId
            * @param page
            * @param pageSize
            * @returns {Promise<Array<O365AuditLog>>}
            */
        getO365AuditLog(locationId: string, page?: number, pageSize?: number): Promise<Array<O365AuditLog>>;
        /**
            * Get the O365 Backup Repositories for the company
            * @param locationId {string}
            * @returns {Promise<Array<O365BackupRepository>>}
            */
        getO365BackupRepositories(locationId: string): Promise<Array<O365BackupRepository>>;
        /**
            * Get the unassigned O365 Backup Repositories for the company
            * @param locationId {string}
            * @returns {Promise<Array<O365BackupRepository>>}
            */
        getUnassignedO365BackupRepositories(locationId: string): Promise<Array<O365BackupRepository>>;
        /**
            * Get the O365 Device code
            * @param locationId {string}
            * @returns {Promise<O365DeviceCode>}
            */
        getO365DeviceCode(locationId: string): Promise<O365DeviceCode>;
        /**
            * Change the company logo
            * @param {Uint8Array} logo
            * @returns {Promise<any>}
            */
        setLogo(logo: Uint8Array): Promise<any>;
        /**
            * Get a company logo
            * @returns {Promise<Uint8Array | null>}
            */
        getLogo(): Promise<Uint8Array | null>;
        /**
            * Delete a company logo
            * @returns {Promise<any>}
            */
        deleteLogo(): Promise<any>;
        /**
            *  Creates a new support ticket.
            *  @param {SupportTicketCreateRequest} newSupportTicket
            *  @returns {Promise<SupportTicket>}
            */
        createSupportTicket(newSupportTicket: SupportTicketCreateRequest): Promise<SupportTicket>;
        /**
            * Updates a support ticket.
            * @param {number} ticketId
            * @param {SupportTicketUpdateRequest} supportTicket
            * @returns {Promise<SupportTicket>}
            */
        updateSupportTicket(ticketId: number, supportTicket: SupportTicketUpdateRequest): Promise<SupportTicket>;
        /**
            * Get all cloud tenants in company location.
            * @param {string} location
            * @returns {Array<Promise<CloudTenant>>}
            */
        getCloudTenants(location?: string): Promise<Array<CloudTenant>>;
        /**
            * Get all vac companies in company. You can also get all vac-companies for a specific company and location.
            * @param {string} locationId (Optional) the location ID.
            * @returns {Array<Promise<BaCompany>>}
            */
        getVacCompanies(locationId?: string): Promise<Array<BaCompany>>;
        /**
            * Get vac quota status in company location.
            * @param {string} locationUuid
            * @returns {Promise<VacCompanyQuotaStatus>}
            */
        getVacQuotaStatus(locationUuid: string): Promise<VacCompanyQuotaStatus>;
        /**
            * Request VAC contract upgrade.
            * @param {string} locationUuid
            * @param {BaCompanyContractUpgradeRequest} upgradeRequest
            * @returns {Promise}
            */
        requestVacContractUpgrade(locationUuid: string, upgradeRequest: BaCompanyContractUpgradeRequest): Promise<unknown>;
        /**
            * Create a new VAC company.
            * @param {string} locationUuid
            * @param {BaCompanyCreateRequest} creationRequest
            * @returns {Promise}
            */
        createBaCompany(locationUuid: string, creationRequest: BaCompanyCreateRequest): Promise<unknown>;
        /**
            * Create a new O365 Organization.
            * @param {string} locationUuid
            * @param {O365OrgCreateModifyRequest} creationRequest
            * @returns {Promise<O365Organization>}
            */
        createO365Organization(locationUuid: string, creationRequest: O365OrgCreateModifyRequest): Promise<O365Organization>;
        /**
            * Get support ticket regarding options.
            * @returns {Array<SupportRegardingOption>}
            */
        getSupportTicketRegardingOptions(): Promise<Array<SupportRegardingOption>>;
        /**
            * Get the billing history for the cloud tenants.
            * @returns {Promise<CloudTenantBillHistory>} promise resolving to the cloud tenant billing history
            */
        getCloudTenantBillingHistory(location?: string, startYear?: number, startMonth?: number, endYear?: number, endMonth?: number): Promise<CloudTenantBillHistory>;
        /**
            * Get the vac billing currency code for the company location.
            * @returns {Promise<BillingCurrencyCode>} promise resolving to the billing currency code
            */
        getVacBillingCurrencyCode(location: string): Promise<BillingCurrencyCode>;
        /**
            * Get company tasks.
            * @param {CompanyTaskFilterParams} filters used to get tasks matching specific criteria
            * @returns {Promise<TaskList>} a promise that resolves with a task list
            */
        getTasks(filters?: CompanyTaskFilterParams): Promise<TaskList>;
        /**
            * Perform a full-text search of entities pertaining to this company.
            * @param {string} query Query string
            * @param {number} pageOffset Page offset for return documents
            * @param {number} pageSize Number of hits per page (default value is 10 and maximum is 50)
            * @returns {Promise<SearchResult>} a promise that resolves with a SearchResult
            */
        search(query?: string, pageOffset?: number, pageSize?: number): Promise<SearchResult>;
        /**
            * Gets a report of two-factor auth configuration state for company users.
            * @returns {Promise<Array<UserTwoFactorAuthRecord>>} a promise that resolves with an array of two factor auth records
            */
        getUserTwoFactorAuthReport(): Promise<Array<UserTwoFactorAuthRecord>>;
        /**
            * Gets the VAC contract list for a given company location.
            * @returns {Promise<Array<VacContract>>} a promise that resolves with an array of VacContract
            */
        getVacContractsForCompany(locationUuid: string): Promise<Array<VacContract>>;
        /**
            * Gets the integrated backup status of entities within the company-location.
            * @param {string} locationUuid
            * @returns {Promise<CompanyLocationIntegratedBackupStatus>} backup status details
            */
        getIntegratedBackupStatus(locationUuid: string): Promise<CompanyLocationIntegratedBackupStatus>;
        /**
            * List the existing backup groups that are configured in a specified
            * company-location.
            *
            * @param {string} locationUuid
            * @param {boolean} includeDeleted Default is false. (Optional)
            * @param {boolean} includeSummaryStats Default is false. (Optional)
            * @param {boolean} includeLastRun Default is false. (Optional)
            * @param {boolean} includeBackupPolicy Default is false. (Optional)
            * @returns {Promise<Array<BackupGroup>>}
            */
        listBackupGroups(locationUuid: string, includeDeleted?: boolean, includeSummaryStats?: boolean, includeLastRun?: boolean, includeBackupPolicy?: boolean): Promise<Array<BackupGroup>>;
        /**
            * Gets the backup status of entities within the company-location.
            *
            * @param {string} locationUuid
            * @return {Promise<CompanyLocationBackupStatus>}
            */
        getBackupStatus(locationUuid: string): Promise<CompanyLocationBackupStatus>;
        /**
            * Get the identity provider for the current company.
            * @return {Promise<IdentityProvider>} The identity provider
            */
        getIdentityProvider(): Promise<IdentityProvider>;
        /**
            * Get the Identity Provider redirect URI for the current company.
            * @returns {Promise<string>} The redirect URI
            */
        getIdentityProviderRedirectUri(isOkta?: boolean): Promise<String>;
        /**
            * Create OIDC identity provider from config.
            * @param {OIDCIdentityProviderConfigRequest} configCreateRequest
            * @returns {Promise<OIDCIdentityProvider>} OIDCIdentityProvider
            */
        createOIDCIdentityProvider(configCreateRequest: OIDCIdentityProviderConfigRequest): Promise<OIDCIdentityProvider>;
        /**
            * Update the OIDC identity provider.
            * @param {OIDCIdentityProviderConfigRequest} oidcIdentityProviderConfigRequest
            * @returns {Promise<unknown>} promise
            */
        updateOIDCIdentityProvider(oidcIdentityProviderConfigRequest: OIDCIdentityProviderConfigRequest): Promise<unknown>;
        /**
            * Create SAML identity provider from config.
            * @param {SAMLIdentityProviderConfigRequest} samlIdentityProviderConfigRequest
            * @returns {Promise<SAMLIdentityProvider>} promise
            */
        createSAMLIdentityProvider(samlIdentityProviderConfigRequest: SAMLIdentityProviderConfigRequest): Promise<SAMLIdentityProvider>;
        /**
            * Update the SAML identity provider.
            * @param {SAMLIdentityProviderConfigRequest} samlIdentityProviderConfigRequest
            * @returns {Promise<unknown>} promise
            */
        updateSAMLIdentityProvider(samlIdentityProviderConfigRequest: SAMLIdentityProviderConfigRequest): Promise<unknown>;
        /**
            * Create Google identity provider from config.
            * @param {GoogleIdentityProviderConfigRequest} configCreateRequest
            * @returns {Promise<OIDCIdentityProvider>} promise
            */
        createGoogleIdentityProvider(configCreateRequest: GoogleIdentityProviderConfigRequest): Promise<OIDCIdentityProvider>;
        /**
            * Update Google identity provider.
            * @param {GoogleIdentityProviderConfigRequest} configCreateRequest
            * @returns {Promise<OIDCIdentityProvider>} promise
            */
        updateGoogleIdentityProvider(configCreateRequest: GoogleIdentityProviderConfigRequest): Promise<OIDCIdentityProvider>;
        /**
            * Create Okta Identity Provider
            * @param {OktaIdentityProviderCreateRequest} configCreateRequest
            * @returns {Promise<OktaIdentityProvider>} promise
            */
        createOktaIdentityProvider(configCreateRequest: OktaIdentityProviderCreateRequest): Promise<SAMLIdentityProvider>;
        /**
            * Update Okta Identity Provider
            * @param {OktaIdentityProviderCreateRequest} configCreateRequest
            * @returns {Promise<OktaIdentityProvider>} promise
            */
        updateOktaIdentityProvider(configRequest: OktaIdentityProviderCreateRequest): Promise<SAMLIdentityProvider>;
        /**
            * Delete the specified identity provider.
            * @returns {Promise<unknown>} promise
            */
        deleteIdentityProvider(): Promise<unknown>;
        /**
            * Create a new SSO user for current company.
            * @param {SsoUserCreateRequest} createRequest
            * @returns {Promise<CompanyUser>} Promise that resolves with the created SSO user.
            */
        createSSOUser(createRequest: SsoUserCreateRequest): Promise<CompanyUser>;
        /**
            * Create multiple SSO users for current company.
            * @param {Array<SsoUserCreateRequest>} ssoUserCreateRequestList List of SsoUserCreateRequest.
            * @returns {Promise<Array<CompanyUser>>} Promise that resolves with the list of created SSO users.
            */
        createSSOUsers(ssoUserCreateRequestList: Array<SsoUserCreateRequest>): Promise<Array<UserCreation>>;
        /**
            * Send a user invitation email to the given user.
            * @param {string} username User to send invite email to
            * @returns {Promise<unknown>}
            */
        sendUserInvitationEmail(username: string): Promise<unknown>;
        /**
            * Send user invitation emails to the given list of users.
            * @param {Array<string>} userNames Users to send invite emails to
            * @returns {Promise<unknown>}
            */
        sendUsersInvitationEmails(userNames: Array<string>): Promise<unknown>;
        /**
            * Get Identity Provider login errors
            * @returns {Promise<Array<SsoLoginError>>}
            */
        getSsoLoginErrors(): Promise<Array<SsoLoginError>>;
        /**
            * Enforce two factor authentication for the specified user.
            * @param {string} username The user's username.
            * @returns {Promise<unknown>}
            */
        enforceTwoFactorAuthForUser(username: string): Promise<unknown>;
        /**
            * Reset two factor authentication for the specified user. After resetting
            * the user's two factor auth credentials, will default back to the global
            * settings for the company regarding two factor authentication.
            * @param {string} username The user's username.
            * @returns {Promise<unknown>}
            */
        resetTwoFactorAuthForUser(username: string): Promise<unknown>;
        /**
            * Get the specified company's two factor authentication settings.
            * @returns {Promise<CompanyTwoFactorAuthSettings>} Promise that resolves with Company Two Factor Auth Settings.
            */
        getTwoFactorAuthSettings(): Promise<CompanyTwoFactorAuthSettings>;
        /**
            * Set the two factor authentication settings. Can either set for all users in the company or for specified roles.
            * - To apply 2FA to all users, set 'allUsers' to true and set 'rolesUuids' to null or empty.
            * - To apply 2FA to specific roles, set 'allUsers' to false and fill 'roleUuids' with role uuids.
            * @param {CompanyTwoFactorAuthSettings | EnforceTwoFactorAuthRequest} settings Two Factor Auth settings or request.
            * @returns {Promise<unknown>}
            */
        setTwoFactorAuthSettings(settings: CompanyTwoFactorAuthSettings | EnforceTwoFactorAuthRequest): Promise<unknown>;
        /**
            * Enforce the two factor authentication for all users in the company
            * @returns {Promise<unknown>}
            */
        enforceTwoFactorAuthSettingsForAllUsers(): Promise<unknown>;
        /**
            * Enforce the two factor authentication for specified roles in the company
            * @param {Arrays<string>} rolesUuid List of role uuids.
            * @returns {Promise<unknown>}
            */
        enforceTwoFactorAuthSettingsForRoles(rolesUuid: Array<string>): Promise<unknown>;
        /**
            * Get VM Protection Summary for current location.
            * @param {string} locationId Location ID.
            * @returns {Promise<VmProtectionSummary>}
            */
        getVmProtectionSummary(locationId: string): Promise<VmProtectionSummary>;
}

/**
    * Enforce Two Factor Auth Request.
    * - To apply 2FA to all users, set 'allUsers' to true and set 'roles' to null or empty.
    * - To apply 2FA to specific roles, set 'allUsers' to false and fill 'roles' with role uuids.
    */
export class EnforceTwoFactorAuthRequest {
        constructor(enforceTwoFactorAuthRequest: EnforceTwoFactorAuthRequest);
        constructor(enforceTwoFactorAuthRequestJson: EnforceTwoFactorAuthRequestJson);
        constructor(allUsers: boolean, roles: Array<String>);
        /**
            * Get all users.
            * @returns {boolean}
            */
        get allUsers(): boolean;
        /**
            * Get roles.
            * @returns {Array<String>}
            */
        get roles(): Array<String>;
        /**
            * Get the json representation of this class.
            * @returns {EnforceTwoFactorAuthRequestJson}
            */
        get json(): EnforceTwoFactorAuthRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 Audit Log
    */
export class O365AuditLog {
        constructor(_json: O365AuditLogJson);
        /**
            * Get username of the audit log
            * @returns {string}
            */
        get username(): string;
        /**
            * Get location id of the audit log
            * @returns {string}
            */
        get locationId(): string;
        /**
            * Get O365 Org's uuid of the audit log
            * @returns {string}
            */
        get o365OrgUuid(): string;
        /**
            * Get event type of the audit log
            * @returns {string}
            */
        get eventType(): string;
        /**
            * Get console entity of the audit log
            * @returns {string}
            */
        get consoleEntity(): string;
        /**
            * Get entity name of audit log
            * @returns {string}
            */
        get entityName(): string;
        /**
            * Get timestamp of audit log
            * @returns {number}
            */
        get timestamp(): number;
        /**
            * Get IP Address of audit log
            * @returns {string}
            */
        get ipAddress(): string;
        /**
            * Get the json representation of this class
            * @return {O365AuditLogJson}
            */
        get json(): O365AuditLogJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 Backup Repository
    */
export class O365BackupRepository {
        constructor(_json: O365BackupRepositoryJson);
        /**
            * Get name of Backup Repo
            */
        get name(): string;
        /**
            * Get description of Backup Repo
            */
        get description(): string;
        /**
            * Get id of Backup Repo
            */
        get id(): string;
        /**
            * Get the json representation of this class.
            * @returns {O365BackupRepositoryJson}
            */
        get json(): O365BackupRepositoryJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 Bill
    */
export class O365Bill {
        constructor(_json: O365BillJson);
        /**
            * Get the number of licenses exceeding the reserved licenses count
            * @returns {number}
            */
        get burstCountLicenses(): number;
        /**
            * Get cost per license of O365 bill
            * @returns {number}
            */
        get costPerLicense(): number;
        /**
            * Get currency code of O365 bill
            * @returns {CurrencyCode}
            */
        get currencyCode(): CurrencyCode;
        /**
            * Get full month contract cost of O365 bill
            * @returns {number}
            */
        get fullMonthContractCost(): number;
        /**
            * Get month of O365 bill
            * @returns {number}
            */
        get month(): number;
        /**
            * Get number of licenses of O365 bill
            * @returns {number}
            */
        get numberOfLicenses(): number;
        /**
            * Get total of O365 bill
            * @returns {number}
            */
        get total(): number;
        /**
            * Get the used total including burst usage if any
            * @returns {number}
            */
        get totalCostForUsedLicenses(): number;
        /**
            * Get year of O365 bill
            * @returns {number}
            */
        get year(): number;
        /**
            * Get the licensed user count from licensed user api
            * @returns {number}
            */
        get licensedUserCount(): number;
        /**
            * Get the used total including burst usage if any for licensed user count
            * @returns {number}
            */
        get totalCostForLicensedUserCount(): number;
        /**
            * Get the number of licensed users exceeded the reserved license count.
            * @returns {number}
            */
        get burstCountForLicensedUserCount(): number;
        /**
            * Get the json representation of this class
            * @returns {O365BillJson}
            */
        get json(): O365BillJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 Device code
    */
export class O365DeviceCode {
        constructor(_json: O365DeviceCodeJson);
        /**
            * Get the code that you must copy and then specify on the Microsoft authentication portal.
            * @returns {string}
            */
        get userCode(): string;
        /**
            * Get the help message.
            * @returns {string}
            */
        get message(): string;
        /**
            * Get the lifespan of the code in milliseconds.
            * @returns {number}
            */
        get expiresIn(): number;
        /**
            * Get the verification URL that you must open to sign in to Microsoft Azure.
            * @returns {string}
            */
        get verificationUrl(): string;
        /**
            * Get the json representation of this class.
            * @returns {O365DeviceCodeJson}
            */
        get json(): O365DeviceCodeJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 Organization Set.
    */
export class O365OrganizationSet {
        constructor(_json: O365OrganizationSetJson);
        /**
            * Get O365 Organizations.
            * @returns {Array<O365Organization>}
            */
        get o365Organizations(): Array<O365Organization>;
        /**
            * Get the total unique reserved O365 licenses for the O365 Organizations scoped to a location.
            * @returns {number}
            */
        get totalReservedLicenses(): number;
        /**
            * Get the json representation of this class.
            * @returns {O365OrganizationSetJson}
            */
        get json(): O365OrganizationSetJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * SalesforceSubscription class
    */
export class SalesforceSubscription {
        constructor(_json: SalesforceSubscriptionJson);
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get contract.
            * @returns {string}
            */
        get contract(): string;
        /**
            * Get currency code.
            * @returns {string}
            */
        get currencyCode(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get contract number.
            * @returns {string}
            */
        get contractNumber(): string;
        /**
            * Get console total monthly cost.
            * @returns {number}
            */
        get consoleTotalMonthlyCost(): number;
        /**
            * Get product id.
            * @returns {string}
            */
        get productId(): string;
        /**
            * Get console cost per unit.
            * @returns {number}
            */
        get consoleCostPerUnit(): number;
        /**
            * Get quantity.
            * @returns {number}
            */
        get quantity(): number;
        /**
            * Get account id.
            * @returns {string}
            */
        get accountId(): string;
        /**
            * Get product name.
            * @returns {string}
            */
        get productName(): string;
        /**
            * Get deployment date.
            * @returns {Date | null}
            */
        get deploymentDate(): Date | null;
        /**
            * Get product.
            * @returns {string}
            */
        get product(): string;
        /**
            * Get product code.
            * @returns {string}
            */
        get productCode(): string;
        /**
            * Get cancellation date.
            * @returns {Date | null}
            */
        get cancellationDate(): Date | null;
        /**
            * Get the json representation of this class.
            * @returns {SalesforceSubscriptionJson}
            */
        get json(): SalesforceSubscriptionJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Company search result class.
    */
export class SearchResult {
        constructor(_json: SearchResultJson);
        /**
            * Get query.
            * @returns {string}
            */
        get query(): string;
        /**
            * Get page offset.
            * @returns {number}
            */
        get pageOffset(): number;
        /**
            * Get page size.
            * @returns {number}
            */
        get pageSize(): number;
        /**
            * Get returned hits.
            * @returns {number}
            */
        get returnedHits(): number;
        /**
            * Get total hits.
            * @returns {number}
            */
        get totalHits(): number;
        /**
            * Get results.
            * @returns {Array<{ [key: string]: string }>}
            */
        get results(): Array<{
                [key: string]: string;
        }>;
        /**
            * Get the json representation of this class.
            * @returns {SearchResultJson}
            */
        get json(): SearchResultJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
  * Contact type interface.
  */
export type ContactType = 'PHONE' | 'EMAIL';

/**
  * Severity type interface.
  */
export type SeverityType = 'PRODUCTION_SYSTEM_DOWN' | 'SYSTEM_IMPAIRED' | 'GENERAL_GUIDANCE';

/**
  * Support Category JSON interface.
  */
export interface SupportCategoryJson {
    id: number;
    name: string;
    type_id: number;
    service_id: number;
}

/**
  * Support Regarding Option JSON interface.
  */
export interface SupportRegardingOptionJson {
    id: number;
    name: string;
    service_options: Array<SupportServiceOptionJson>;
}

/**
  * Support Service Option JSON interface.
  */
export interface SupportServiceOptionJson {
    id: number;
    name: string;
    regarding_option_id: number;
    support_categories: Array<SupportCategoryJson>;
}

/**
  * Support Ticket Attachment JSON interface.
  */
export interface SupportTicketAttachmentJson {
    id: number;
    title: string;
    filename: string;
    server_filename: string;
    creation_date: number;
    creator_user_name: string;
    creator_full_name: string;
}

/**
  * Support Ticket Comment Create Request JSON interface.
  */
export interface SupportTicketCommentCreateRequestJson {
    text: string;
}

/**
  * Support Ticket Comment JSON interface.
  */
export interface SupportTicketCommentJson {
    id: number;
    ticket_id: number;
    text: string;
    creator_username: string;
    creator_full_name: string;
    comment_type: SupportTicketCommentType;
    creation_date: number;
}

export type SupportTicketCommentType = 'DISCUSSION' | 'RESOLUTION';

/**
  * Support Ticket Create Request JSON interface.
  */
export interface SupportTicketCreateRequestJson {
    summary: string;
    description: string;
    cc_email_addresses: Array<string>;
    cc_emails_enabled: boolean;
    regarding_id: number;
    service_id: number;
    category_id: number;
    severity: SeverityType;
    contact_type: ContactType;
    phone_number: string;
    phone_number_ext: string;
}

export interface SupportTicketJson {
    id: number;
    summary: string;
    status: SupportTicketStatus;
    company_id: string;
    creator_full_name: string;
    creator_user_name: string;
    creation_date: number;
    cc_email_addresses: Array<string>;
    cc_emails_enabled: boolean;
    regarding_id: number | null;
    service_id: number | null;
    category_id: number | null;
    severity: SupportTicketSeverity;
    regarding_name: string;
    service_name: string;
    category_name: string;
}

export type SupportTicketSeverity = 'PRODUCTION_SYSTEM_DOWN' | 'SYSTEM_IMPAIRED' | 'GENERAL_GUIDANCE';

export type SupportTicketStatus = 'WAITING_ON_ILAND' | 'COMPLETED' | 'WAITING_ON_CUSTOMER' | 'PENDING_COMPLETION' | 'SCHEDULED_WITH_CUSTOMER' | 'NEW' | 'CANCELLED' | 'FEATURE_REQUESTED';

/**
  * Support Ticket Update Request JSON interface.
  */
export interface SupportTicketUpdateRequestJson {
    cc_emails_enabled: boolean;
}

/**
    * Support Category.
    */
export class SupportCategory {
        constructor(_json: SupportCategoryJson);
        /**
            * Get id.
            * @returns {number}
            */
        get id(): number;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get type id.
            * @returns {number}
            */
        get typeId(): number;
        /**
            * Get service id.
            * @returns {number}
            */
        get serviceId(): number;
        /**
            * Get the json representation of this class.
            * @returns {SupportCategoryJson}
            */
        get json(): SupportCategoryJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Support Regarding Option.
    */
export class SupportRegardingOption {
        constructor(_json: SupportRegardingOptionJson);
        /**
            * Get id.
            * @returns {number}
            */
        get id(): number;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get service options.
            * @returns {Array<SupportServiceOption>}
            */
        get serviceOptions(): Array<SupportServiceOption>;
        /**
            * Get the json representation of this class.
            * @returns {SupportRegardingOptionJson}
            */
        get json(): SupportRegardingOptionJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Support Service Option.
    */
export class SupportServiceOption {
        constructor(_json: SupportServiceOptionJson);
        /**
            * Get id.
            * @returns {number}
            */
        get id(): number;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get regarding option id.
            * @returns {number}
            */
        get regardingOptionId(): number;
        /**
            * Get support categories.
            * @returns {Array<SupportCategory>}
            */
        get supportCategories(): Array<SupportCategory>;
        /**
            * Get the json representation of this class.
            * @returns {SupportServiceOptionJson}
            */
        get json(): SupportServiceOptionJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
  * Support Ticket Attachment Create Request.
  */
export class SupportTicketAttachmentCreateRequest {
    constructor(filename: string, contents: Blob);
    get getFilename(): string;
    get getContents(): Blob;
}

/**
    * Support Ticket Attachment.
    */
export class SupportTicketAttachment {
        constructor(_json: SupportTicketAttachmentJson);
        /**
            * Get id.
            * @returns {number}
            */
        get id(): number;
        /**
            * Get title.
            * @returns {string}
            */
        get title(): string;
        /**
            * Get filename.
            * @returns {string}
            */
        get filename(): string;
        /**
            * Get server filename.
            * @returns {string}
            */
        get serverFilename(): string;
        /**
            * Get creation date.
            * @returns {number}
            */
        get creationDate(): number;
        /**
            * Get creator username.
            * @returns {string}
            */
        get creatorUsername(): string;
        /**
            * Get creator fullname.
            * @returns {string}
            */
        get creatorFullname(): string;
        /**
            * Get the json representation of this class.
            * @returns {SupportTicketAttachmentDetailsJson}
            */
        get json(): SupportTicketAttachmentJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Support Ticket Comment Create Request.
    */
export class SupportTicketCommentCreateRequest {
        constructor(supportTicketCommentCreateRequest: SupportTicketCommentCreateRequest);
        constructor(supportTicketCommentCreateRequestJson: SupportTicketCommentCreateRequestJson);
        constructor(text: string);
        /**
            * Get text.
            * @returns {string}
            */
        get text(): string;
        /**
            * Get the json representation of this class.
            * @returns {SupportTicketCommentCreateRequestJson}
            */
        get json(): SupportTicketCommentCreateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Support Ticket Comment.
    */
export class SupportTicketComment {
        constructor(_json: SupportTicketCommentJson);
        /**
            * Get id.
            * @returns {number}
            */
        get id(): number;
        /**
            * Get ticket id.
            * @returns {number}
            */
        get ticketId(): number;
        /**
            * Get text.
            * @returns {string}
            */
        get text(): string;
        /**
            * Get creator username.
            * @returns {string}
            */
        get creatorUsername(): string;
        /**
            * Get creator fullname.
            * @returns {string}
            */
        get creatorFullname(): string;
        /**
            * Get comment type.
            * @returns {SupportTicketCommentType}
            */
        get commentType(): SupportTicketCommentType;
        /**
            * Get creation date.
            * @returns {number}
            */
        get creationDate(): number;
        /**
            * Get the json representation of this class.
            * @returns {SupportTicketCommentJson}
            */
        get json(): SupportTicketCommentJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Request to create a support ticket.
    */
export class SupportTicketCreateRequest {
        constructor(supportTicketCreateRequest: SupportTicketCreateRequest);
        constructor(supportTicketCreateRequestJson: SupportTicketCreateRequestJson);
        constructor(summary: string, description: string, ccEmailAddresses: Array<string>, ccEmailsEnabled: boolean, regardingId: number, serviceId: number, categoryId: number, severity: SeverityType, contactType: ContactType, phoneNumber: string, phoneNumberExt: string);
        /**
            * Get summary.
            * @returns {string}
            */
        get summary(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get cc email addresses.
            * @returns {Array<string>}
            */
        get ccEmailAddresses(): Array<string>;
        /**
            * Get cc emails enabled.
            * @returns {boolean}
            */
        get ccEmailsEnabled(): boolean;
        /**
            * Get regarding id.
            * @returns {number}
            */
        get regardingId(): number;
        /**
            * Get service id.
            * @returns {number}
            */
        get serviceId(): number;
        /**
            * Get category id.
            * @returns {number}
            */
        get categoryId(): number;
        /**
            * Get severity.
            * @returns {SeverityType}
            */
        get severity(): SeverityType;
        /**
            * Get contact type.
            * @returns {ContactType}
            */
        get contactType(): ContactType;
        /**
            * Get phone number.
            * @returns {string}
            */
        get phoneNumber(): string;
        /**
            * Get phone number ext.
            * @returns {string}
            */
        get phoneNumberExt(): string;
        /**
            * Get the json representation of this class.
            * @returns {SupportTicketCreateRequestJson}
            */
        get json(): SupportTicketCreateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Request to update a support ticket.
    */
export class SupportTicketUpdateRequest {
        constructor(supportTicketUpdateRequest: SupportTicketUpdateRequest);
        constructor(supportTicketUpdateRequestJson: SupportTicketUpdateRequestJson);
        constructor(ccEmailsEnabled: boolean);
        /**
            * Get cc emails enabled.
            * @returns {boolean}
            */
        get ccEmailsEnabled(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {SupportTicketUpdateRequestJson}
            */
        get json(): SupportTicketUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * SupportTicket.
    */
export class SupportTicket {
        constructor(_json: SupportTicketJson);
        /**
            * Get support ticket ID.
            * @returns {number}
            */
        get id(): number;
        /**
            * Get support ticket summary
            * @returns {string}
            */
        get summary(): string;
        /**
            * Get support ticket status
            * @returns {SupportTicketStatus}
            */
        get status(): SupportTicketStatus;
        /**
            * Get support ticket crm
            * @returns {string}
            */
        get companyId(): string;
        /**
            * Get support ticket creator full name
            * @returns {string}
            */
        get creatorFullName(): string;
        /**
            * Get support ticket creator username
            * @returns {string}
            */
        get creatorUserName(): string;
        /**
            * Get support ticket creation date
            * @returns {Date}
            */
        get creationDate(): Date;
        /**
            * Get support ticket cc email addresses
            * @returns {Array<string>}
            */
        get ccEmailAddresses(): Array<string>;
        /**
            * Whether or not support ticket has CC emails field enabled.
            * @returns {boolean}
            */
        get ccEmailsEnabled(): boolean;
        /**
            * Get support ticket regarding ID
            * @returns {number}
            */
        get regardingId(): number | null;
        /**
            * Get support ticket service ID
            * @returns {number}
            */
        get serviceId(): number | null;
        /**
            * Get support ticket category ID
            * @returns {number}
            */
        get categoryId(): number | null;
        /**
            * Get support ticket severity
            * @returns {SupportTicketSeverity}
            */
        get severity(): SupportTicketSeverity;
        /**
            * Get support ticket regarding name
            * @returns {string}
            */
        get regardingName(): string;
        /**
            * Get support ticket service name
            * @returns {string}
            */
        get serviceName(): string;
        /**
            * Get support ticket category name
            * @returns {string}
            */
        get categoryName(): string;
        /**
            * Get support ticket JSON string
            * @returns {string}
            */
        toString(): string;
        /**
            * Get support ticket JSON object
            * @returns {SupportTicketJson}
            */
        get json(): SupportTicketJson;
        /**
            * Get all ticket attachments.
            * @returns {Promise<Array<SupportTicketAttachment>>}
            */
        getAttachments(): Promise<Array<SupportTicketAttachment>>;
        /**
            * Get ticket attachment.
            * @param {number} attachmentId
            * @returns {Promise<SupportTicketAttachment>}
            */
        getAttachment(attachmentId: number): Promise<SupportTicketAttachment>;
        /**
            * Whether or not the attachment is downloadable
            * @param {number} attachmentId
            * @returns {Promise<boolean>}
            */
        isAttachmentDownloadable(attachmentId: number): Promise<boolean>;
        /**
            * Get ticket comments.
            * @returns {Promise<Array<SupportTicketComment>>}
            */
        getComments(): Promise<Array<SupportTicketComment>>;
        /**
            * Add ticket comment.
            * @param {string} companyId
            * @param {SupportTicketCommentCreateRequest} newComment
            * @returns {Promise<SupportTicketComment>}
            */
        addTicketComment(companyId: string, newComment: SupportTicketCommentCreateRequest): Promise<SupportTicketComment>;
        /**
            * Add ticket attachment.
            * @param {string} companyId
            * @param {SupportTicketAttachmentCreateRequest} attachment
            * @returns {Promise<SupportTicketAttachment>}
            */
        addTicketAttachment(companyId: string, attachment: SupportTicketAttachmentCreateRequest): Promise<SupportTicketAttachment>;
}

/**
    * User Creation Request.
    */
export class UserCreateRequest {
        constructor(userCreateRequest: UserCreateRequest);
        constructor(userCreateRequestJson: UserCreateRequestJson);
        constructor(password: string, domain: string, fullname: string, email: string, username: string, roleUuid?: string, sendInvitation?: boolean);
        /**
            * Get password.
            * @returns {string | undefined}
            */
        get password(): string | undefined;
        /**
            * Get domain.
            * @returns {string}
            */
        get domain(): string;
        /**
            * Get fullname.
            * @returns {string}
            */
        get fullname(): string;
        /**
            * Get email.
            * @returns {string}
            */
        get email(): string;
        /**
            * Get username.
            * @returns {string}
            */
        get username(): string;
        /**
            * Get role uuid.
            * @returns {string | undefined}
            */
        get roleUuid(): string | undefined;
        /**
            * Get send invitation.
            * @returns {boolean | undefined}
            */
        get sendInvitation(): boolean | undefined;
        /**
            * Get the json representation of this class.
            * @returns {UserCreateRequestJson}
            */
        get json(): UserCreateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class UserCreation {
        constructor(_json: UserCreationJson);
        /**
            * Get username.
            * @returns {string}
            */
        get username(): string;
        /**
            * Get created.
            * @returns {boolean}
            */
        get created(): boolean;
        /**
            * Get error.
            * @returns {string}
            */
        get error(): string;
        /**
            * Get the json representation of this class.
            * @returns {UserCreationJson}
            */
        get json(): UserCreationJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * User two-factor auth record.
    */
export class UserTwoFactorAuthRecord {
        constructor(_json: UserTwoFactorAuthRecordJson);
        /**
            * Get username.
            * @returns {string}
            */
        get username(): string;
        /**
            * Get email.
            * @returns {string}
            */
        get email(): string;
        /**
            * Get full name.
            * @returns {string}
            */
        get fullName(): string;
        /**
            * Get configured.
            * @returns {boolean}
            */
        get configured(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {UserTwoFactorAuthRecordJson}
            */
        get json(): UserTwoFactorAuthRecordJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VacCompanyQuotaStatus {
        constructor(_json: VacCompanyQuotaStatusJson);
        /**
            * Get total storage quota.
            * @returns {number}
            */
        get totalStorageQuota(): number;
        /**
            * Get used storage quota.
            * @returns {number}
            */
        get usedStorageQuota(): number;
        /**
            * Get total contracted quota.
            * @returns {number}
            */
        get totalContractedQuota(): number;
        /**
            * Get number of contracts.
            * @returns {number}
            */
        get numberOfContracts(): number;
        /**
            * Get the json representation of this class.
            * @returns {VacCompanyQuotaStatusJson}
            */
        get json(): VacCompanyQuotaStatusJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * VacContract class
    */
export class VacContract {
        constructor(_json: VacContractJson);
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get status.
            * @returns {string}
            */
        get status(): string;
        /**
            * Get start.
            * @returns {Date | null}
            */
        get start(): Date | null;
        /**
            * Get end.
            * @returns {Date | null}
            */
        get end(): Date | null;
        /**
            * Get term.
            * @returns {number}
            */
        get term(): number;
        /**
            * Get last mod.
            * @returns {Date | null}
            */
        get lastMod(): Date | null;
        /**
            * Get created.
            * @returns {Date | null}
            */
        get created(): Date | null;
        /**
            * Get activated.
            * @returns {number}
            */
        get activated(): number;
        /**
            * Get cancellation date.
            * @returns {Date | null}
            */
        get cancellationDate(): Date | null;
        /**
            * Get status code.
            * @returns {string}
            */
        get statusCode(): string;
        /**
            * Get group.
            * @returns {string}
            */
        get group(): string;
        /**
            * Get test drive.
            * @returns {boolean}
            */
        get testDrive(): boolean;
        /**
            * Get discount.
            * @returns {number}
            */
        get discount(): number;
        /**
            * Get subscriptions.
            * @returns {Array<SalesforceSubscription>}
            */
        get subscriptions(): Array<SalesforceSubscription>;
        /**
            * Get the json representation of this class.
            * @returns {VacContractJson}
            */
        get json(): VacContractJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * VM Protection Status Summary Response
    */
export class VmProtectionSummary {
        constructor(_json: VmProtectionSummaryJson);
        /**
            * Get the number of protected VMs.
            * @returns {number}
            */
        get vmsProtected(): number;
        /**
            * Get the number of unprotected VMs.
            * @returns {number}
            */
        get vmsUnprotected(): number;
        /**
            * Get the total number of VMs.
            * @returns {number}
            */
        get totalVms(): number;
        /**
            * Get the json representation of this class.
            * @returns {VmProtectionSummaryJson}
            */
        get json(): VmProtectionSummaryJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
  * Enumeration of possible edge backing configuration types.
  */
export type EdgeBackingConfigurationType = 'compact' | 'full';

/**
  * Interface for Edge Gateway JSON properties.
  */
export interface EdgeJson extends EntityJson {
    status: number | null;
    vdc_uuid: string | null;
    org_uuid: string | null;
    interfaces: Array<EdgeInterfaceJson> | null;
    backward_compatibility_mode: boolean;
    gateway_backing_config: EdgeBackingConfigurationType | null;
    high_availability_enabled: boolean | null;
    default_dns_relay_route: boolean | null;
    location_id: string | null;
    description: string | null;
    vcloud_href: string | null;
}

export interface AttributeJson {
    key: string;
    value: string;
}

export interface CertificateCreateRequestJson {
    trust_object: TrustObjectRequestJson;
}

export interface CertificateJson {
    object_id: string;
    description: string;
    scope: string;
    subject_cn: string;
    issuer_cn: string;
    pem_encoding: string;
    certificate_type: string | null;
    days_left_to_expiry: number;
    x509_certificate: Array<X509CertificateJson>;
    is_temporal: boolean;
}

export interface CRLJson {
    object_id: string;
    description: string;
    scope: string;
    is_temporal: boolean;
    issuer_cn: string;
    pem_encoding: string;
    x509_crl: X509CRLJson;
}

export interface CSRCreateRequestJson {
    description: string;
    is_temporal: boolean;
    subject: Array<AttributeJson>;
    algorithm: string;
    key_size: number;
}

export interface CSRJson {
    object_id: string;
    description: string;
    scope: string;
    is_temporal: boolean;
    subject: Array<AttributeJson>;
    algorithm: string;
    key_size: number;
    pem_encoding: string;
}

export interface CsrSubjectJson {
    cn: string;
    ou: string;
    o: string;
    l: string;
    st: string;
    c: string;
}

export interface SelfSignCertificateRequestJson {
    no_of_days: number;
}

export interface TrustObjectRequestJson {
    pem_encoding: string;
    private_key?: string;
    passphrase?: string;
    description?: string;
}

export interface X509CertificateJson {
    subject_cn: string;
    issuer_cn: string;
    version: number;
    serial_number: string;
    signature_algo_name: string;
    signature: string;
    not_before: number;
    not_after: number;
    issuer: string;
    subject: string;
    public_key_algo: string;
    public_key_length: number;
    rsa_public_key_modulus: string;
    rsa_public_key_exponent: number;
    sha1_hash: string;
    md5_hash: string;
    is_ca: boolean;
    is_valid: boolean;
}

export interface X509CRLJson {
    version: number;
    next_update: number;
    issuer: string;
}

export class Attribute {
        constructor(_json: AttributeJson);
        /**
            * Get key.
            * @returns {string}
            */
        get key(): string;
        /**
            * Get value.
            * @returns {string}
            */
        get value(): string;
        /**
            * Get the json representation of this class.
            * @returns {AttributeJson}
            */
        get json(): AttributeJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class CertificateCreateRequest {
        constructor(certificateCreateRequest: CertificateCreateRequest);
        constructor(certificateCreateRequestJson: CertificateCreateRequestJson);
        constructor(trustObject: TrustObjectRequest);
        /**
            * Get trust object.
            * @returns {TrustObjectRequest}
            */
        get trustObject(): TrustObjectRequest;
        /**
            * Get the json representation of this class.
            * @returns {CertificateCreateRequestJson}
            */
        get json(): CertificateCreateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class Certificate {
        constructor(_json: CertificateJson);
        /**
            * Get the object ID of the certificate.
            * @returns {string}
            */
        get objectId(): string;
        /**
            * Get the description of the certificate.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get the scope of the certificate in relation to the edge.
            * @returns {string}
            */
        get scope(): string;
        /**
            * Get the subject common name of the certificate.
            * @returns {string}
            */
        get subjectCn(): string;
        /**
            * Get the issuer common name of the certificate.
            * @returns {string}
            */
        get issuerCn(): string;
        /**
            * Get the PEM encoding of the certificate.
            * @returns {string}
            */
        get pemEncoding(): string;
        /**
            * Get the type of certificate.
            * Possible values include 'certificate_signed', 'certificate_self_signed', & 'ca_certificate'.
            * @returns {string | null}
            */
        get certificateType(): string | null;
        /**
            * Get the days left until the certificate expires.
            * @returns {number}
            */
        get daysLeftToExpiry(): number;
        /**
            * Get x509 certificate.
            * @returns {Array<X509Certificate>}
            */
        get x509Certificate(): Array<X509Certificate>;
        /**
            * Get is temporal.
            * @returns {boolean}
            */
        get isTemporal(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {CertificateJson}
            */
        get json(): CertificateJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class CRL {
        constructor(_json: CRLJson);
        /**
            * Get object id.
            * @returns {string}
            */
        get objectId(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get scope.
            * @returns {string}
            */
        get scope(): string;
        /**
            * Get is temporal.
            * @returns {boolean}
            */
        get isTemporal(): boolean;
        /**
            * Get issuer cn.
            * @returns {string}
            */
        get issuerCn(): string;
        /**
            * Get pem encoding.
            * @returns {string}
            */
        get pemEncoding(): string;
        /**
            * Get x509 crl.
            * @returns {X509CRL}
            */
        get x509CRL(): X509CRL;
        /**
            * Get the json representation of this class.
            * @returns {CRLJson}
            */
        get json(): CRLJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class CSRCreateRequest {
        constructor(cSRCreateRequest: CSRCreateRequest);
        constructor(cSRCreateRequestJson: CSRCreateRequestJson);
        constructor(description: string, isTemporal: boolean, subject: Array<Attribute>, algorithm: string, keySize: number);
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get is temporal.
            * @returns {boolean}
            */
        get isTemporal(): boolean;
        /**
            * Get subject.
            * @returns {Array<Attribute>}
            */
        get subject(): Array<Attribute>;
        /**
            * Get algorithm.
            * @returns {string}
            */
        get algorithm(): string;
        /**
            * Get key size.
            * @returns {number}
            */
        get keySize(): number;
        /**
            * Get the json representation of this class.
            * @returns {CSRCreateRequestJson}
            */
        get json(): CSRCreateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class CsrSubject {
        constructor(_json: CsrSubjectJson);
        /**
            * Get subject common name.
            * @returns {string}
            */
        get cn(): string;
        /**
            * Get subject organization unit.
            * @returns {string}
            */
        get ou(): string;
        /**
            * Get subject organization.
            * @returns {string}
            */
        get o(): string;
        /**
            * Get subject locality.
            * @returns {string}
            */
        get l(): string;
        /**
            * Get subject state or province.
            * @returns {string}
            */
        get st(): string;
        /**
            * Get subject country.
            * @returns {string}
            */
        get c(): string;
        /**
            * Convert to an Array of Attributes.
            * @returns {Array<Attribute>}
            */
        toAttributeArray(): Array<Attribute>;
        /**
            * Get the json representation of this class.
            * @returns {CsrSubjectJson}
            */
        get json(): CsrSubjectJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class CSR {
        constructor(_json: CSRJson);
        /**
            * Get object id.
            * @returns {string}
            */
        get objectId(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get scope.
            * @returns {string}
            */
        get scope(): string;
        /**
            * Get is temporal.
            * @returns {boolean}
            */
        get isTemporal(): boolean;
        /**
            * Get subject.
            * @returns {Array<Attribute>}
            */
        get subject(): Array<Attribute>;
        /**
            * Get subject formatted data.
            * @returns {CsrSubject}
            */
        get subjectData(): CsrSubject;
        /**
            * Get algorithm.
            * @returns {string}
            */
        get algorithm(): string;
        /**
            * Get key size.
            * @returns {number}
            */
        get keySize(): number;
        /**
            * Get pem encoding.
            * @returns {string}
            */
        get pemEncoding(): string;
        /**
            * Get the json representation of this class.
            * @returns {CSRJson}
            */
        get json(): CSRJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class SelfSignCertificateRequest {
        constructor(selfSignCertificateRequest: SelfSignCertificateRequest);
        constructor(selfSignCertificateRequestJson: SelfSignCertificateRequestJson);
        constructor(noOfDays: number);
        /**
            * Get no of days.
            * @returns {number}
            */
        get noOfDays(): number;
        /**
            * Get the json representation of this class.
            * @returns {SelfSignCertificateRequestJson}
            */
        get json(): SelfSignCertificateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class TrustObjectRequest {
        constructor(trustObjectRequest: TrustObjectRequest);
        constructor(trustObjectRequestJson: TrustObjectRequestJson);
        constructor(pemEncoding: string, privateKey: string, passphrase: string, description: string);
        /**
            * Get pem encoding.
            * @returns {string}
            */
        get pemEncoding(): string;
        /**
            * Get private key.
            * @returns {string}
            */
        get privateKey(): string | undefined;
        /**
            * Get passphrase.
            * @returns {string}
            */
        get passphrase(): string | undefined;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string | undefined;
        /**
            * Get the json representation of this class.
            * @returns {TrustObjectRequestJson}
            */
        get json(): TrustObjectRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class X509Certificate {
        constructor(_json: X509CertificateJson);
        /**
            * Get subject cn.
            * @returns {string}
            */
        get subjectCn(): string;
        /**
            * Get issuer cn.
            * @returns {string}
            */
        get issuerCn(): string;
        /**
            * Get version.
            * @returns {number}
            */
        get version(): number;
        /**
            * Get serial number.
            * @returns {string}
            */
        get serialNumber(): string;
        /**
            * Get signature algo name.
            * @returns {string}
            */
        get signatureAlgoName(): string;
        /**
            * Get signature.
            * @returns {string}
            */
        get signature(): string;
        /**
            * Get not before.
            * @returns {Date | undefined}
            */
        get notBefore(): Date | undefined;
        /**
            * Get not after.
            * @returns {Date | undefined}
            */
        get notAfter(): Date | undefined;
        /**
            * Get issuer.
            * @returns {string}
            */
        get issuer(): string;
        /**
            * Get subject.
            * @returns {string}
            */
        get subject(): string;
        /**
            * Get public key algo.
            * @returns {string}
            */
        get publicKeyAlgo(): string;
        /**
            * Get public key length.
            * @returns {number}
            */
        get publicKeyLength(): number;
        /**
            * Get rsa public key modulus.
            * @returns {string}
            */
        get rsaPublicKeyModulus(): string;
        /**
            * Get rsa public key exponent.
            * @returns {number}
            */
        get rsaPublicKeyExponent(): number;
        /**
            * Get sha1 hash.
            * @returns {string}
            */
        get sha1Hash(): string;
        /**
            * Get md5 hash.
            * @returns {string}
            */
        get md5Hash(): string;
        /**
            * Get is ca.
            * @returns {boolean}
            */
        get isCa(): boolean;
        /**
            * Get is valid.
            * @returns {boolean}
            */
        get isValid(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {X509CertificateJson}
            */
        get json(): X509CertificateJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class X509CRL {
        constructor(_json: X509CRLJson);
        /**
            * Get version.
            * @returns {number}
            */
        get version(): number;
        /**
            * Get next update.
            * @returns {number}
            */
        get nextUpdate(): number;
        /**
            * Get issuer.
            * @returns {string}
            */
        get issuer(): string;
        /**
            * Get the json representation of this class.
            * @returns {X509CRLJson}
            */
        get json(): X509CRLJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
  * Interface for checkpoint.
  */
export interface CheckpointJson {
    edge_uuid: string;
    uuid: string;
    time: number;
    export: string | null;
}

/**
    * Checkpoint class
    */
export class Checkpoint {
        constructor(_json: CheckpointJson);
        /**
            * Get edge uuid
            * @returns {string}
            */
        get edgeUuid(): string;
        /**
            * Get uuid
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get time
            * @returns {Date}
            */
        get time(): Date;
        /**
            * Get export
            * @returns {string | null}
            */
        get export(): string | null;
        /**
            * Get the __json__ representation of this class.
            * @returns {CheckpointJson}
            */
        get json(): CheckpointJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
  * Interface for Edge DHCP pool.
  */
export interface DhcpJson {
    edge_uuid: string | null;
    enabled: boolean;
    network: string | null;
    max_lease_time: number;
    default_lease_time: number;
    low_ip: string | null;
    high_ip: string | null;
}

/**
  * DHCP Pool Update Request JSON interface.
  */
export interface DHCPPoolUpdateRequestJson {
    edge_uuid: string;
    enabled: boolean;
    network: string;
    max_lease_time: number;
    default_lease_time: number;
    low_ip: string;
    high_ip: string;
}

/**
  * Dhcp Service Update Request JSON interface.
  */
export interface DhcpServiceUpdateRequestJson {
    edge_uuid: string;
    enabled: boolean;
    dhcp_pools: Array<DHCPPoolUpdateRequestJson>;
}

/**
  * Interface for Edge DHCP service.
  */
export interface EdgeDhcpJson {
    edge_uuid: string | null;
    enabled: boolean;
    dhcp_pools: Array<DhcpJson> | null;
}

/**
    * DHCP Pool Update Request.
    */
export class DHCPPoolUpdateRequest {
        constructor(dHCPPoolUpdateRequest: DHCPPoolUpdateRequest);
        constructor(dHCPPoolUpdateRequestJson: DHCPPoolUpdateRequestJson);
        constructor(edgeUuid: string, enabled: boolean, network: string, maxLeaseTime: number, defaultLeaseTime: number, lowIP: string, highIP: string);
        /**
            * Get edge uuid.
            * @returns {string}
            */
        get edgeUuid(): string;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get network.
            * @returns {string}
            */
        get network(): string;
        /**
            * Get max lease time.
            * @returns {number}
            */
        get maxLeaseTime(): number;
        /**
            * Get default lease time.
            * @returns {number}
            */
        get defaultLeaseTime(): number;
        /**
            * Get low i p.
            * @returns {string}
            */
        get lowIP(): string;
        /**
            * Get high i p.
            * @returns {string}
            */
        get highIP(): string;
        /**
            * Get the json representation of this class.
            * @returns {DHCPPoolUpdateRequestJson}
            */
        get json(): DHCPPoolUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * DhcpPool class
    */
export class DhcpPool {
        constructor(_json: DhcpJson);
        /**
            * Get edge uuid
            * @returns {string | null}
            */
        get edgeUuid(): string | null;
        /**
            * Check weather or not this Dhcp Pool is enabled or not.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get network
            * @returns {string | null}
            */
        get network(): string | null;
        /**
            * Get max lease time.
            * @returns {number | null}
            */
        get maxLeaseTime(): number | null;
        /**
            * Get default lease time.
            * @returns {number | null}
            */
        get defaultLeaseTime(): number | null;
        /**
            * Get low IP.
            * @returns {string | null}
            */
        get lowIp(): string | null;
        /**
            * Get high IP.
            * @returns {string | null}
            */
        get highIp(): string | null;
        /**
            * Get the __json__ representation of this class.
            * @returns {DhcpJson}
            */
        get json(): DhcpJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Dhcp Service Update Request.
    */
export class DhcpServiceUpdateRequest {
        constructor(dhcpServiceUpdateRequest: DhcpServiceUpdateRequest);
        constructor(dhcpServiceUpdateRequestJson: DhcpServiceUpdateRequestJson);
        constructor(edgeUuid: string, enabled: boolean, dhcpPools: Array<DHCPPoolUpdateRequestJson>);
        /**
            * Get edge uuid.
            * @returns {string}
            */
        get edgeUuid(): string;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get dhcp pools.
            * @returns {Array<DHCPPoolUpdateRequest>}
            */
        get dhcpPools(): Array<DHCPPoolUpdateRequest>;
        /**
            * Get the json representation of this class.
            * @returns {DhcpServiceUpdateRequestJson}
            */
        get json(): DhcpServiceUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Dhcp class
    */
export class Dhcp {
        constructor(_json: EdgeDhcpJson);
        /**
            * Get the edge UUID.
            * @returns {string | null}
            */
        get edgeUuid(): string | null;
        /**
            * Check weather or not a dhcp service is enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get a list of Dhcp pools.
            * @returns {Array<DhcpPool>}
            */
        get dhcpPools(): Array<DhcpPool>;
        /**
            * Get the __json__ representation of this class.
            * @returns {EdgeDhcpJson}
            */
        get json(): EdgeDhcpJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export interface EdgeGatewayDhcpIpPoolJson {
    auto_configure_dns: boolean;
    default_gateway: string;
    domain_name: string;
    primary_name_server: string;
    secondary_name_server: string;
    pool_id: string;
    ip_range: string;
    lease_time: string;
    subnet_mask: string;
    allow_huge_range: boolean;
    next_server: string;
    dhcp_options: EdgeGatewayDhcpOptionsJson;
}

export interface EdgeGatewayDhcpJson {
    enabled: boolean;
    static_bindings: Array<EdgeGatewayDhcpStaticBindingJson>;
    ip_pools: Array<EdgeGatewayDhcpIpPoolJson>;
    logging: EdgeGatewayDhcpLoggingJson;
    relay: EdgeGatewayDhcpRelayJson;
}

export interface EdgeGatewayDhcpLoggingJson {
    enable: boolean;
    log_level: LogLevelType;
}

export interface EdgeGatewayDhcpOptionsJson {
    option121: EdgeGatewayDhcpOption121Json;
    option66: string;
    option67: string;
    option150: EdgeGatewayDhcpOption150Json;
    option26: string;
    other: Array<EdgeGatewayDhcpOtherJson>;
}
export interface EdgeGatewayDhcpOption121Json {
    static_routes: Array<EdgeGatewayDhcpStaticRouteJson>;
}
export interface EdgeGatewayDhcpOption150Json {
    servers: Array<string>;
}
export interface EdgeGatewayDhcpOtherJson {
    code: string;
    value: string;
}

export interface EdgeGatewayDhcpRelayAgentJson {
    vnic_index: number;
    gi_address: string;
}

export interface EdgeGatewayDhcpRelayJson {
    relay_server: EdgeGatewayDhcpRelayServerJson;
    relay_agents: Array<EdgeGatewayDhcpRelayAgentJson>;
}

export interface EdgeGatewayDhcpRelayServerJson {
    grouping_object_id: Array<string>;
    ip_addresses: Array<string>;
    fqdn: Array<string>;
}

export interface EdgeGatewayDhcpRelayTypeJson {
    type: string;
    name: string;
}

export interface EdgeGatewayDhcpRelayTypeOptionJson {
    type: string;
    name: string;
    properties: Array<EdgeGatewayDhcpRelayTypeOptionPropertyJson>;
}

export interface EdgeGatewayDhcpRelayTypeOptionListJson {
    current_page_parameters: EdgeGatewayDhcpRelayTypeOptionPagingParamsJson;
    next_page_parameters: EdgeGatewayDhcpRelayTypeOptionPagingParamsJson;
    total_records: number;
    last_page: boolean;
    data: Array<EdgeGatewayDhcpRelayTypeOptionJson>;
}

export interface EdgeGatewayDhcpRelayTypeOptionPagingParamsJson {
    page: number;
    page_size: number;
}

export interface EdgeGatewayDhcpRelayTypeOptionPropertyJson {
    name: string;
    value: string;
}

/**
  * DHCP Static Binding JSON.
  */
export interface EdgeGatewayDhcpStaticBindingJson {
    auto_configure_dns: boolean;
    binding_id: string;
    vm_id: string;
    vnic_id: number;
    hostname: string;
    ip_address: string;
    default_gateway: string;
    domain_name: string;
    primary_name_server: string;
    secondary_name_server: string;
    lease_time: string;
    mac_address: string;
    subnet_mask: string;
    dhcp_options: EdgeGatewayDhcpOptionsJson;
    next_server: string;
}

export interface EdgeGatewayDhcpStaticRouteJson {
    destination_subnet: string;
    router: string;
}

export interface EdgeGatewayDhcpUpdateRequestJson {
    enabled: boolean;
    static_bindings: Array<EdgeGatewayDhcpStaticBindingJson>;
    ip_pools: Array<EdgeGatewayDhcpIpPoolJson>;
    logging: EdgeGatewayDhcpLoggingJson;
    relay: EdgeGatewayDhcpRelayJson;
}

export class EdgeGatewayDhcpIpPool {
        constructor(_json: EdgeGatewayDhcpIpPoolJson);
        /**
            * Get auto configure dns.
            * @returns {boolean}
            */
        get autoConfigureDNS(): boolean;
        /**
            * Get default gateway.
            * @returns {string}
            */
        get defaultGateway(): string;
        /**
            * Get domain name.
            * @returns {string}
            */
        get domainName(): string;
        /**
            * Get primary name server.
            * @returns {string}
            */
        get primaryNameServer(): string;
        /**
            * Get secondary name server.
            * @returns {string}
            */
        get secondaryNameServer(): string;
        /**
            * Get pool id.
            * @returns {string}
            */
        get poolId(): string;
        /**
            * Get ip range.
            * @returns {string}
            */
        get ipRange(): string;
        /**
            * Get subnet mask.
            * @returns {string}
            */
        get subnetMask(): string;
        /**
            * Get lease time.
            * @returns {string}
            */
        get leaseTime(): string;
        /**
            * Get allow huge range.
            * @returns {boolean}
            */
        get allowHugeRange(): boolean;
        /**
            * Get next server.
            * @returns {string}
            */
        get nextServer(): string;
        /**
            * Get dhcp options.
            * @returns {EdgeGatewayDhcpOptions}
            */
        get dhcpOptions(): EdgeGatewayDhcpOptions;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayDhcpIpPoolJson}
            */
        get json(): EdgeGatewayDhcpIpPoolJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewayDhcpLogging {
        constructor(_json: EdgeGatewayDhcpLoggingJson);
        /**
            * Get enable.
            * @returns {boolean}
            */
        get enable(): boolean;
        /**
            * Get log level.
            * @returns {LogLevelType}
            */
        get logLevel(): LogLevelType;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayDhcpLoggingJson}
            */
        get json(): EdgeGatewayDhcpLoggingJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewayDhcpOptions {
        constructor(_json: EdgeGatewayDhcpOptionsJson);
        /**
            * Get option121.
            * @returns {EdgeGatewayDhcpOption121}
            */
        get option121(): EdgeGatewayDhcpOption121;
        /**
            * Get option66.
            * @returns {string}
            */
        get option66(): string;
        /**
            * Get option67.
            * @returns {string}
            */
        get option67(): string;
        /**
            * Get option150.
            * @returns {EdgeGatewayDhcpOption150}
            */
        get option150(): EdgeGatewayDhcpOption150;
        /**
            * Get option26.
            * @returns {string}
            */
        get option26(): string;
        /**
            * Get other.
            * @returns {Array<EdgeGatewayDhcpOther>}
            */
        get other(): Array<EdgeGatewayDhcpOther>;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayDhcpOptionsJson}
            */
        get json(): EdgeGatewayDhcpOptionsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}
export class EdgeGatewayDhcpOption121 {
        constructor(_json: EdgeGatewayDhcpOption121Json);
        /**
            * Get static routes.
            * @returns {Array<EdgeGatewayDhcpStaticRoute>}
            */
        get staticRoutes(): Array<EdgeGatewayDhcpStaticRoute>;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayDhcpOption121Json}
            */
        get json(): EdgeGatewayDhcpOption121Json;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}
export class EdgeGatewayDhcpOption150 {
        constructor(_json: EdgeGatewayDhcpOption150Json);
        /**
            * Get servers.
            * @returns {Array<string>}
            */
        get servers(): Array<string>;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayDhcpOption150Json}
            */
        get json(): EdgeGatewayDhcpOption150Json;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}
export class EdgeGatewayDhcpOther {
        constructor(_json: EdgeGatewayDhcpOtherJson);
        /**
            * Get code.
            * @returns {string}
            */
        get code(): string;
        /**
            * Get value.
            * @returns {string}
            */
        get value(): string;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayDhcpOtherJson}
            */
        get json(): EdgeGatewayDhcpOtherJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewayDhcpRelayAgent {
        constructor(_json: EdgeGatewayDhcpRelayAgentJson);
        /**
            * Get vnic index.
            * @returns {number}
            */
        get vnicIndex(): number;
        /**
            * Get gi address.
            * @returns {string}
            */
        get giAddress(): string;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayDhcpRelayAgentJson}
            */
        get json(): EdgeGatewayDhcpRelayAgentJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewayDhcpRelayServer {
        constructor(_json: EdgeGatewayDhcpRelayServerJson);
        /**
            * Get grouping object id.
            * @returns {string}
            */
        get groupingObjectId(): Array<string>;
        /**
            * Get ip addresses.
            * @returns {Array<string>}
            */
        get ipAddresses(): Array<string>;
        /**
            * Get fqdn.
            * @returns {Array<string>}
            */
        get fqdn(): Array<string>;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayDhcpRelayServerJson}
            */
        get json(): EdgeGatewayDhcpRelayServerJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewayDhcpRelayTypeOptionList {
        constructor(_json: EdgeGatewayDhcpRelayTypeOptionListJson);
        /**
            * Get current page parameters.
            * @returns {EdgeGatewayDhcpRelayTypeOptionPagingParams}
            */
        get currentPageParameters(): EdgeGatewayDhcpRelayTypeOptionPagingParams;
        /**
            * Get next page parameters.
            * @returns {EdgeGatewayDhcpRelayTypeOptionPagingParams}
            */
        get nextPageParameters(): EdgeGatewayDhcpRelayTypeOptionPagingParams;
        /**
            * Get total records.
            * @returns {number}
            */
        get totalRecords(): number;
        /**
            * Get last page.
            * @returns {boolean}
            */
        get lastPage(): boolean;
        /**
            * Get data.
            * @returns {Array<EdgeGatewayDhcpRelayTypeOption>}
            */
        get data(): Array<EdgeGatewayDhcpRelayTypeOption>;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayDhcpRelayTypeOptionListJson}
            */
        get json(): EdgeGatewayDhcpRelayTypeOptionListJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewayDhcpRelayTypeOptionPagingParams {
        constructor(_json: EdgeGatewayDhcpRelayTypeOptionPagingParamsJson);
        /**
            * Get page.
            * @returns {number}
            */
        get page(): number;
        /**
            * Get page size.
            * @returns {number}
            */
        get pageSize(): number;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayDhcpRelayTypeOptionPagingParamsJson}
            */
        get json(): EdgeGatewayDhcpRelayTypeOptionPagingParamsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewayDhcpRelayTypeOptionProperty {
        constructor(_json: EdgeGatewayDhcpRelayTypeOptionPropertyJson);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get value.
            * @returns {string}
            */
        get value(): string;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayDhcpRelayTypeOptionPropertyJson}
            */
        get json(): EdgeGatewayDhcpRelayTypeOptionPropertyJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewayDhcpRelayTypeOption {
        constructor(_json: EdgeGatewayDhcpRelayTypeOptionJson);
        /**
            * Get type.
            * @returns {string}
            */
        get type(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get properties.
            * @returns {Array<EdgeGatewayDhcpRelayTypeOptionProperty>}
            */
        get properties(): Array<EdgeGatewayDhcpRelayTypeOptionProperty>;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayDhcpRelayTypeOptionJson}
            */
        get json(): EdgeGatewayDhcpRelayTypeOptionJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewayDhcpRelayType {
        constructor(_json: EdgeGatewayDhcpRelayTypeJson);
        /**
            * Get type.
            * @returns {string}
            */
        get type(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayDhcpRelayTypeJson}
            */
        get json(): EdgeGatewayDhcpRelayTypeJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewayDhcpRelay {
        constructor(_json: EdgeGatewayDhcpRelayJson);
        /**
            * Get relay server.
            * @returns {EdgeGatewayDhcpRelayServer}
            */
        get relayServer(): EdgeGatewayDhcpRelayServer | undefined;
        /**
            * Get relay agents.
            * @returns {Array<EdgeGatewayDhcpRelayAgent>}
            */
        get relayAgents(): Array<EdgeGatewayDhcpRelayAgent>;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayDhcpRelayJson}
            */
        get json(): EdgeGatewayDhcpRelayJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * DHCP Static Binding.
    */
export class EdgeGatewayDhcpStaticBinding {
        constructor(_json: EdgeGatewayDhcpStaticBindingJson);
        /**
            * Get auto configure dns.
            * @returns {boolean}
            */
        get autoConfigureDNS(): boolean;
        /**
            * Get binding id.
            * @returns {string}
            */
        get bindingId(): string;
        /**
            * Get vm id.
            * @returns {string}
            */
        get vmId(): string;
        /**
            * Get vnic id.
            * @returns {number}
            */
        get vnicId(): number;
        /**
            * Get hostname.
            * @returns {string}
            */
        get hostname(): string;
        /**
            * Get ip address.
            * @returns {string}
            */
        get ipAddress(): string;
        /**
            * Get default gateway.
            * @returns {string}
            */
        get defaultGateway(): string;
        /**
            * Get domain name.
            * @returns {string}
            */
        get domainName(): string;
        /**
            * Get primary name server.
            * @returns {string}
            */
        get primaryNameServer(): string;
        /**
            * Get secondary name server.
            * @returns {string}
            */
        get secondaryNameServer(): string;
        /**
            * Get lease time.
            * @returns {string}
            */
        get leaseTime(): string;
        /**
            * Get mac address.
            * @returns {string}
            */
        get macAddress(): string;
        /**
            * Get subnet mask.
            * @returns {string}
            */
        get subnetMask(): string;
        /**
            * Get dhcp options.
            * @returns {EdgeGatewayDhcpOptions}
            */
        get dhcpOptions(): EdgeGatewayDhcpOptions;
        /**
            * Get next server.
            * @returns {string}
            */
        get nextServer(): string;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayDhcpStaticBindingJson}
            */
        get json(): EdgeGatewayDhcpStaticBindingJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewayDhcpStaticRoute {
        constructor(_json: EdgeGatewayDhcpStaticRouteJson);
        /**
            * Get destination subnet.
            * @returns {string}
            */
        get destinationSubnet(): string;
        /**
            * Get router.
            * @returns {string}
            */
        get router(): string;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayDhcpStaticRouteJson}
            */
        get json(): EdgeGatewayDhcpStaticRouteJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewayDhcpUpdateRequest {
        constructor(edgeGatewayDhcpUpdateRequest: EdgeGatewayDhcpUpdateRequest);
        constructor(edgeGatewayDhcpUpdateRequestJson: EdgeGatewayDhcpUpdateRequestJson);
        constructor(enabled: boolean, staticBindings: Array<EdgeGatewayDhcpStaticBindingJson>, ipPools: Array<EdgeGatewayDhcpIpPoolJson>, logging: EdgeGatewayDhcpLoggingJson, relay: EdgeGatewayDhcpRelayJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get static bindings.
            * @returns {Array<EdgeGatewayDhcpStaticBinding>}
            */
        get staticBindings(): Array<EdgeGatewayDhcpStaticBinding>;
        /**
            * Get ip pools.
            * @returns {Array<EdgeGatewayDhcpIpPool>}
            */
        get ipPools(): Array<EdgeGatewayDhcpIpPool>;
        /**
            * Get logging.
            * @returns {EdgeGatewayDhcpLogging}
            */
        get logging(): EdgeGatewayDhcpLogging;
        /**
            * Get relay.
            * @returns {EdgeGatewayDhcpRelay}
            */
        get relay(): EdgeGatewayDhcpRelay;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayDhcpUpdateRequestJson}
            */
        get json(): EdgeGatewayDhcpUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewayDhcp {
        constructor(_json: EdgeGatewayDhcpJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get static bindings.
            * @returns {Array<EdgeGatewayDhcpStaticBinding>}
            */
        get staticBindings(): Array<EdgeGatewayDhcpStaticBinding>;
        /**
            * Get ip pools.
            * @returns {Array<EdgeGatewayDhcpIpPool>}
            */
        get ipPools(): Array<EdgeGatewayDhcpIpPool>;
        /**
            * Get logging.
            * @returns {EdgeGatewayDhcpLogging}
            */
        get logging(): EdgeGatewayDhcpLogging | undefined;
        /**
            * Get relay.
            * @returns {EdgeGatewayDhcpRelay}
            */
        get relay(): EdgeGatewayDhcpRelay | undefined;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayDhcpJson}
            */
        get json(): EdgeGatewayDhcpJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Firewall Action Enum
    */
export enum FirewallAction {
        ACCEPT = 0,
        DENY = 1
}
/**
    * Firewall Action Type
    * This is equivalent to: FirewallActionType = 'ACCEPT' | 'DENY';
    */
export type EdgeGatewayFirewallActionType = keyof typeof FirewallAction;

/**
  * Firewall Default Policy JSON
  */
export interface EdgeGatewayFirewallDefaultPolicyJson {
    firewall_action_type: EdgeGatewayFirewallActionType;
    logging_enabled: boolean;
}

/**
  * Firewall Global Config JSON
  */
export interface EdgeGatewayFirewallGlobalConfigJson {
    tcp_pick_ongoing_connections: boolean;
    tcp_allow_out_of_window_packets: boolean;
    tcp_send_reset_for_closed_vse_ports: boolean;
    drop_invalid_traffic: boolean;
    log_invalid_traffic: boolean;
    tcp_timeout_open: number;
    tcp_timeout_established: number;
    tcp_timeout_close: number;
    udp_timeout: number;
    icmp_timeout: number;
    icmp6_timeout: number;
    ip_generic_timeout: number;
    enable_syn_flood_protection: boolean;
    log_icmp_errors: boolean;
    drop_icmp_replays: boolean;
}

/**
  * Firewall JSON
  */
export interface EdgeGatewayFirewallJson {
    enabled: boolean;
    firewall_global_config: EdgeGatewayFirewallGlobalConfigJson;
    firewall_default_policy: EdgeGatewayFirewallDefaultPolicyJson;
    firewall_rules: Array<EdgeGatewayFirewallRuleJson>;
}

export interface EdgeGatewayFirewallObjectJson {
    type: string;
    name: string;
    properties: Array<EdgeGatewayFirewallObjectPropertyJson>;
}

export interface EdgeGatewayFirewallObjectListJson {
    current_page_parameters: EdgeGatewayFirewallObjectPagingParamsJson;
    next_page_parameters: EdgeGatewayFirewallObjectPagingParamsJson;
    total_records: number;
    last_page: boolean;
    data: Array<EdgeGatewayFirewallObjectJson>;
}

export interface EdgeGatewayFirewallObjectPagingParamsJson {
    page: number;
    page_size: number;
}

export interface EdgeGatewayFirewallObjectPropertyJson {
    name: string;
    value: string;
}

/**
  * Edge gateway firewall object type JSON
  */
export interface EdgeGatewayFirewallObjectTypeJson {
    type: string;
    name: string;
}

/**
  * Firewall Rule Application JSON
  */
export interface EdgeGatewayFirewallRuleApplicationJson {
    application_id: string;
    service: Array<EdgeGatewayFirewallRuleServiceJson>;
}

/**
  * Firewall Rule JSON
  */
export interface EdgeGatewayFirewallRuleJson {
    id: number;
    rule_tag: number;
    name: string;
    rule_type: string;
    description: string;
    source: EdgeGatewayFirewallRuleSourceDestinationJson;
    destination: EdgeGatewayFirewallRuleSourceDestinationJson;
    application: EdgeGatewayFirewallRuleApplicationJson;
    action_type: EdgeGatewayFirewallActionType;
    enabled: boolean;
    logging_enabled: boolean;
    match_translated: boolean;
}

/**
  * Firewall Rule Service JSON
  */
export interface EdgeGatewayFirewallRuleServiceJson {
    protocol: string;
    port: Array<string>;
    source_port: Array<string>;
    icmp_type: string;
}

/**
  * Firewall Rule Source Destination JSON
  */
export interface EdgeGatewayFirewallRuleSourceDestinationJson {
    exclude: boolean;
    ip_addresses: Array<string>;
    grouping_object_id: Array<string>;
    vnic_group_id: Array<string>;
}

/**
  * Edge Gateway Firewall Update Request JSON
  */
export interface EdgeGatewayFirewallUpdateRequestJson {
    enabled: boolean;
    firewall_global_config: EdgeGatewayFirewallGlobalConfigJson;
    firewall_default_policy: EdgeGatewayFirewallDefaultPolicyJson;
    firewall_rules: Array<EdgeGatewayFirewallRuleJson>;
}

/**
    * Firewall Default Policy
    */
export class EdgeGatewayFirewallDefaultPolicy {
        constructor(_json: EdgeGatewayFirewallDefaultPolicyJson);
        /**
            * Get firewall action type.
            * @returns {EdgeGatewayFirewallActionType}
            */
        get firewallActionType(): EdgeGatewayFirewallActionType;
        /**
            * Get logging enabled.
            * @returns {boolean}
            */
        get loggingEnabled(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayFirewallDefaultPolicyJson}
            */
        get json(): EdgeGatewayFirewallDefaultPolicyJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Firewall Global Config Class
    */
export class EdgeGatewayFirewallGlobalConfig {
        constructor(_json: EdgeGatewayFirewallGlobalConfigJson);
        /**
            * Get tcp pick ongoing connections.
            * @returns {boolean}
            */
        get tcpPickOngoingConnections(): boolean;
        /**
            * Get tcp allow out of window packets.
            * @returns {boolean}
            */
        get tcpAllowOutOfWindowPackets(): boolean;
        /**
            * Get tcp send reset for closed vse ports.
            * @returns {boolean}
            */
        get tcpSendResetForClosedVsePorts(): boolean;
        /**
            * Get drop invalid traffic.
            * @returns {boolean}
            */
        get dropInvalidTraffic(): boolean;
        /**
            * Get log invalid traffic.
            * @returns {boolean}
            */
        get logInvalidTraffic(): boolean;
        /**
            * Get tcp timeout open.
            * @returns {number}
            */
        get tcpTimeoutOpen(): number;
        /**
            * Get tcp timeout established.
            * @returns {number}
            */
        get tcpTimeoutEstablished(): number;
        /**
            * Get tcp timeout close.
            * @returns {number}
            */
        get tcpTimeoutClose(): number;
        /**
            * Get udp timeout.
            * @returns {number}
            */
        get udpTimeout(): number;
        /**
            * Get icmp timeout.
            * @returns {number}
            */
        get icmpTimeout(): number;
        /**
            * Get icmp6 timeout.
            * @returns {number}
            */
        get icmp6Timeout(): number;
        /**
            * Get ip generic timeout.
            * @returns {number}
            */
        get ipGenericTimeout(): number;
        /**
            * Get enable syn flood protection.
            * @returns {boolean}
            */
        get enableSynFloodProtection(): boolean;
        /**
            * Get log icmp errors.
            * @returns {boolean}
            */
        get logIcmpErrors(): boolean;
        /**
            * Get drop icmp replays.
            * @returns {boolean}
            */
        get dropIcmpReplays(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayFirewallGlobalConfigJson}
            */
        get json(): EdgeGatewayFirewallGlobalConfigJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Edge Gateway Firewall Source Object List Response
    */
export class EdgeGatewayFirewallObjectList {
        constructor(_json: EdgeGatewayFirewallObjectListJson);
        /**
            * Get current page parameters.
            * @returns {EdgeGatewayFirewallObjectPagingParams}
            */
        get currentPageParameters(): EdgeGatewayFirewallObjectPagingParams;
        /**
            * Get next page parameters.
            * @returns {EdgeGatewayFirewallObjectPagingParams}
            */
        get nextPageParameters(): EdgeGatewayFirewallObjectPagingParams;
        /**
            * Get total records.
            * @returns {number}
            */
        get totalRecords(): number;
        /**
            * Get last page.
            * @returns {boolean}
            */
        get lastPage(): boolean;
        /**
            * Get data.
            * @returns {Array<EdgeGatewayFirewallObject>}
            */
        get data(): Array<EdgeGatewayFirewallObject>;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayFirewallObjectListJson}
            */
        get json(): EdgeGatewayFirewallObjectListJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Edge Gateway Firewall Object Paging Params
    */
export class EdgeGatewayFirewallObjectPagingParams {
        constructor(_json: EdgeGatewayFirewallObjectPagingParamsJson);
        /**
            * Get page.
            * @returns {number}
            */
        get page(): number;
        /**
            * Get page size.
            * @returns {number}
            */
        get pageSize(): number;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayFirewallObjectPagingParamsJson}
            */
        get json(): EdgeGatewayFirewallObjectPagingParamsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Edge Gateway Firewall Object Property
    */
export class EdgeGatewayFirewallObjectProperty {
        constructor(_json: EdgeGatewayFirewallObjectPropertyJson);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get value.
            * @returns {string}
            */
        get value(): string;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayFirewallObjectProperty}
            */
        get json(): EdgeGatewayFirewallObjectPropertyJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Edge Gateway Firewall Object Type
    */
export class EdgeGatewayFirewallObjectType {
        constructor(_json: EdgeGatewayFirewallObjectTypeJson);
        /**
            * Get type.
            * @returns {string}
            */
        get type(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayFirewallObjectTypeJson}
            */
        get json(): EdgeGatewayFirewallObjectTypeJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Edge gateway firewall object
    */
export class EdgeGatewayFirewallObject {
        constructor(_json: EdgeGatewayFirewallObjectJson);
        /**
            * Get type.
            * @returns {string}
            */
        get type(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get properties.
            * @returns {Array<EdgeGatewayFirewallObjectProperty>}
            */
        get properties(): Array<EdgeGatewayFirewallObjectProperty>;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayFirewallObjectJson}
            */
        get json(): EdgeGatewayFirewallObjectJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Firewall Rule Application
    */
export class EdgeGatewayFirewallRuleApplication {
        constructor(_json: EdgeGatewayFirewallRuleApplicationJson);
        /**
            * Get application id.
            * @returns {string}
            */
        get applicationId(): string;
        /**
            * Get service.
            * @returns {Array<EdgeGatewayFirewallRuleService>}
            */
        get service(): Array<EdgeGatewayFirewallRuleServiceJson>;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayFirewallRuleApplicationJson}
            */
        get json(): EdgeGatewayFirewallRuleApplicationJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Firewall Rule Service
    */
export class EdgeGatewayFirewallRuleService {
        constructor(_json: EdgeGatewayFirewallRuleServiceJson);
        /**
            * Get protocol.
            * @returns {string}
            */
        get protocol(): string;
        /**
            * Get port.
            * @returns {Array<string>}
            */
        get port(): Array<string>;
        /**
            * Get source port.
            * @returns {Array<string>}
            */
        get sourcePort(): Array<string>;
        /**
            * Get icmp type.
            * @returns {string}
            */
        get icmpType(): string;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayFirewallRuleServiceJson}
            */
        get json(): EdgeGatewayFirewallRuleServiceJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Firewall Rule Source Destination
    */
export class EdgeGatewayFirewallRuleSourceDestination {
        constructor(_json: EdgeGatewayFirewallRuleSourceDestinationJson);
        /**
            * Get exclude.
            * @returns {boolean}
            */
        get exclude(): boolean;
        /**
            * Get ip addresses.
            * @returns {Array<string>}
            */
        get ipAddresses(): Array<string>;
        /**
            * Get grouping object id.
            * @returns {Array<string>}
            */
        get groupingObjectId(): Array<string>;
        /**
            * Get vnic group id.
            * @returns {Array<string>}
            */
        get vnicGroupId(): Array<string>;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayFirewallRuleSourceDestinationJson}
            */
        get json(): EdgeGatewayFirewallRuleSourceDestinationJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Firewall Rule
    */
export class EdgeGatewayFirewallRule {
        constructor(_json: EdgeGatewayFirewallRuleJson);
        /**
            * Get id.
            * @returns {number}
            */
        get id(): number;
        /**
            * Get rule tag.
            * @returns {number}
            */
        get ruleTag(): number;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get rule type.
            * @returns {string}
            */
        get ruleType(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get source.
            * @returns {EdgeGatewayFirewallRuleSourceDestination}
            */
        get source(): EdgeGatewayFirewallRuleSourceDestination;
        /**
            * Get destination.
            * @returns {EdgeGatewayFirewallRuleSourceDestination}
            */
        get destination(): EdgeGatewayFirewallRuleSourceDestination;
        /**
            * Get application.
            * @returns {EdgeGatewayFirewallRuleApplication}
            */
        get application(): EdgeGatewayFirewallRuleApplication;
        /**
            * Get action type.
            * @returns {EdgeGatewayFirewallActionType}
            */
        get actionType(): EdgeGatewayFirewallActionType;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get logging enabled.
            * @returns {boolean}
            */
        get loggingEnabled(): boolean;
        /**
            * Get match translated.
            * @returns {boolean}
            */
        get matchTranslated(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayFirewallRuleJson}
            */
        get json(): EdgeGatewayFirewallRuleJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Edge Gateway Firewall Update Request
    */
export class EdgeGatewayFirewallUpdateRequest {
        constructor(edgeGatewayFirewallUpdateRequest: EdgeGatewayFirewallUpdateRequest);
        constructor(edgeGatewayFirewallUpdateRequestJson: EdgeGatewayFirewallUpdateRequestJson);
        constructor(enabled: boolean, firewallGlobalConfig: EdgeGatewayFirewallGlobalConfigJson, firewallDefaultPolicy: EdgeGatewayFirewallDefaultPolicyJson, firewallRules: Array<EdgeGatewayFirewallRuleJson>);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get firewall global config.
            * @returns {EdgeGatewayFirewallGlobalConfig}
            */
        get firewallGlobalConfig(): EdgeGatewayFirewallGlobalConfig;
        /**
            * Get firewall default policy.
            * @returns {EdgeGatewayFirewallDefaultPolicy}
            */
        get firewallDefaultPolicy(): EdgeGatewayFirewallDefaultPolicy;
        /**
            * Get firewall rules.
            * @returns {Array<EdgeGatewayFirewallRule>}
            */
        get firewallRules(): Array<EdgeGatewayFirewallRule>;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayFirewallUpdateRequestJson}
            */
        get json(): EdgeGatewayFirewallUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Firewall Class
    */
export class EdgeGatewayFirewall {
        constructor(_json: EdgeGatewayFirewallJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get firewall global config.
            * @returns {EdgeGatewayFirewallGlobalConfig}
            */
        get firewallGlobalConfig(): EdgeGatewayFirewallGlobalConfig;
        /**
            * Get firewall default policy.
            * @returns {EdgeGatewayFirewallDefaultPolicy}
            */
        get firewallDefaultPolicy(): EdgeGatewayFirewallDefaultPolicy;
        /**
            * Get firewall rules.
            * @returns {Array<EdgeGatewayFirewallRule>}
            */
        get firewallRules(): Array<EdgeGatewayFirewallRule>;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayFirewallJson}
            */
        get json(): EdgeGatewayFirewallJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export interface EdgeGatewayIpsecGlobalJson {
    psk: string;
    service_certificate: string;
    ca_certificates: Array<string>;
    crl_certificates: Array<string>;
}

export interface EdgeGatewayIPsecJson {
    enabled: boolean;
    logging: EdgeGatewayIpsecLoggingJson;
    sites: Array<EdgeGatewayIpsecSiteJson>;
    global: EdgeGatewayIpsecGlobalJson;
}

export interface EdgeGatewayIpsecLoggingJson {
    enable: boolean;
    log_level: LogLevelType;
}

export interface EdgeGatewayIpsecSiteJson {
    enabled: boolean;
    name: string;
    local_id: string;
    local_ip: string;
    peer_id: string;
    peer_ip: string;
    ipsec_session_type: EdgeGatewayIPsecSessionType;
    compliance_suite: EdgeGatewayIpsecComplianceSuiteType;
    encryption_algorithm: EdgeGatewayIpsecEncryptionAlgorithmType;
    enable_pfs: boolean;
    dh_group: string;
    local_subnets: Array<string>;
    peer_subnets: Array<string>;
    psk: string;
    authentication_mode: string;
    extension: string;
    ike_option: EdgeGatewayIpsecIkeOptionType;
    digest_algorithm: EdgeGatewayIpsecDigestAlgorithmType;
    responder_only: boolean;
    tunnel_interface: EdgeGatewayIpsecTunnelInterfaceJson;
}

export interface EdgeGatewayIpsecTunnelInterfaceJson {
    label: string;
    ip_address: string;
    mtu: number;
}

export interface EdgeGatewayIPsecUpdateRequestJson {
    enabled: boolean;
    logging: EdgeGatewayIpsecLoggingJson;
    sites: Array<EdgeGatewayIpsecSiteJson>;
    global: EdgeGatewayIpsecGlobalJson;
}

export enum EdgeGatewayIpsecComplianceSuiteTypeEnum {
    NONE = "NONE",
    CNSA = "CNSA",
    PRIME = "PRIME",
    SUITE_B_GCM_128 = "SUITE_B_GCM_128",
    SUITE_B_GCM_256 = "SUITE_B_GCM_256",
    FOUNDATION = "FOUNDATION"
}
export type EdgeGatewayIpsecComplianceSuiteType = keyof typeof EdgeGatewayIpsecComplianceSuiteTypeEnum;

export enum EdgeGatewayIpsecDigestAlgorithmTypeEnum {
    SHA_1 = "SHA_1",
    SHA_256 = "SHA_256"
}
export type EdgeGatewayIpsecDigestAlgorithmType = keyof typeof EdgeGatewayIpsecDigestAlgorithmTypeEnum;

export enum EdgeGatewayIpsecEncryptionAlgorithmTypeEnum {
    AES = "AES",
    AES_256 = "AES_256",
    TRIPLE_DES = "TRIPLE_DES",
    AES_GCM = "AES_GCM"
}
export type EdgeGatewayIpsecEncryptionAlgorithmType = keyof typeof EdgeGatewayIpsecEncryptionAlgorithmTypeEnum;

export class EdgeGatewayIpsecGlobal {
        constructor(_json: EdgeGatewayIpsecGlobalJson);
        /**
            * Get psk.
            * @returns {string}
            */
        get psk(): string;
        /**
            * Get service certificate.
            * @returns {string}
            */
        get serviceCertificate(): string;
        /**
            * Get ca certificates.
            * @returns {Array<string>}
            */
        get caCertificates(): Array<string>;
        /**
            * Get crl certificates.
            * @returns {Array<string>}
            */
        get crlCertificates(): Array<string>;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayIpsecGlobalJson}
            */
        get json(): EdgeGatewayIpsecGlobalJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export enum EdgeGatewayIpsecIkeOptionTypeEnum {
    IKEV_1 = "IKEV_1",
    IKEV_2 = "IKEV_2",
    IKE_FLEX = "IKE_FLEX"
}
export type EdgeGatewayIpsecIkeOptionType = keyof typeof EdgeGatewayIpsecIkeOptionTypeEnum;

export class EdgeGatewayIpsecLogging {
        constructor(_json: EdgeGatewayIpsecLoggingJson);
        /**
            * Get enable.
            * @returns {boolean}
            */
        get enable(): boolean;
        /**
            * Get log level.
            * @returns {LogLevelType}
            */
        get logLevel(): LogLevelType;
        /**
            * Get the json representation of this class.
            * @returns {Logging}
            */
        get json(): EdgeGatewayIpsecLoggingJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export enum EdgeGatewayIPsecSessionTypeEnum {
    POLICY_BASED_SESSION = "POLICY_BASED_SESSION",
    ROUTE_BASED_SESSION = "ROUTE_BASED_SESSION"
}
export type EdgeGatewayIPsecSessionType = keyof typeof EdgeGatewayIPsecSessionTypeEnum;

export class EdgeGatewayIpsecSite {
        constructor(_json: EdgeGatewayIpsecSiteJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get local id.
            * @returns {string}
            */
        get localId(): string;
        /**
            * Get local ip.
            * @returns {string}
            */
        get localIp(): string;
        /**
            * Get peer id.
            * @returns {string}
            */
        get peerId(): string;
        /**
            * Get peer ip.
            * @returns {string}
            */
        get peerIp(): string;
        /**
            * Get ipsec session type.
            * @returns {EdgeGatewayIPsecSessionType}
            */
        get ipsecSessionType(): EdgeGatewayIPsecSessionType;
        /**
            * Get compliance suite.
            * @returns {EdgeGatewayIpsecComplianceSuiteType}
            */
        get complianceSuite(): EdgeGatewayIpsecComplianceSuiteType;
        /**
            * Get encryption algorithm.
            * @returns {EdgeGatewayIpsecEncryptionAlgorithmType}
            */
        get encryptionAlgorithm(): EdgeGatewayIpsecEncryptionAlgorithmType;
        /**
            * Get enable pfs.
            * @returns {boolean}
            */
        get enablePfs(): boolean;
        /**
            * Get dh group.
            * @returns {string}
            */
        get dhGroup(): string;
        /**
            * Get local subnets.
            * @returns {Array<string>}
            */
        get localSubnets(): Array<string>;
        /**
            * Get peer subnets.
            * @returns {Array<string>}
            */
        get peerSubnets(): Array<string>;
        /**
            * Get psk.
            * @returns {string}
            */
        get psk(): string;
        /**
            * Get authentication mode.
            * @returns {string}
            */
        get authenticationMode(): string;
        /**
            * Get extension.
            * @returns {string}
            */
        get extension(): string;
        /**
            * Get ike option.
            * @returns {EdgeGatewayIpsecIkeOptionType}
            */
        get ikeOption(): EdgeGatewayIpsecIkeOptionType;
        /**
            * Get digest algorithm.
            * @returns {EdgeGatewayIpsecDigestAlgorithmType}
            */
        get digestAlgorithm(): EdgeGatewayIpsecDigestAlgorithmType;
        /**
            * Get responder only.
            * @returns {boolean}
            */
        get responderOnly(): boolean;
        /**
            * Get tunnel interface.
            * @returns {EdgeGatewayIpsecTunnelInterface}
            */
        get tunnelInterface(): EdgeGatewayIpsecTunnelInterface;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayIpsecSiteJson}
            */
        get json(): EdgeGatewayIpsecSiteJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewayIpsecTunnelInterface {
        constructor(_json: EdgeGatewayIpsecTunnelInterfaceJson);
        /**
            * Get label.
            * @returns {string}
            */
        get label(): string;
        /**
            * Get ip address.
            * @returns {string}
            */
        get ipAddress(): string;
        /**
            * Get mtu.
            * @returns {number}
            */
        get mtu(): number;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayIpsecTunnelInterfaceJson}
            */
        get json(): EdgeGatewayIpsecTunnelInterfaceJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewayIPsecUpdateRequest {
        constructor(edgeGatewayIPsecUpdateRequest: EdgeGatewayIPsecUpdateRequest);
        constructor(edgeGatewayIPsecUpdateRequestJson: EdgeGatewayIPsecUpdateRequestJson);
        constructor(enabled: boolean, logging: EdgeGatewayIpsecLoggingJson, sites: Array<EdgeGatewayIpsecSiteJson>, global: EdgeGatewayIpsecGlobalJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get logging.
            * @returns {EdgeGatewayIpsecLogging}
            */
        get logging(): EdgeGatewayIpsecLogging;
        /**
            * Get sites.
            * @returns {Array<EdgeGatewayIpsecSite>}
            */
        get sites(): Array<EdgeGatewayIpsecSite>;
        /**
            * Get global.
            * @returns {EdgeGatewayIpsecGlobal}
            */
        get global(): EdgeGatewayIpsecGlobal;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayIPsecUpdateRequestJson}
            */
        get json(): EdgeGatewayIPsecUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewayIPsec {
        constructor(_json: EdgeGatewayIPsecJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get logging.
            * @returns {EdgeGatewayIpsecLogging}
            */
        get logging(): EdgeGatewayIpsecLogging;
        /**
            * Get sites.
            * @returns {Array<EdgeGatewayIpsecSite>}
            */
        get sites(): Array<EdgeGatewayIpsecSite>;
        /**
            * Get global.
            * @returns {EdgeGatewayIpsecGlobal}
            */
        get global(): EdgeGatewayIpsecGlobal;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayIPsecJson}
            */
        get json(): EdgeGatewayIPsecJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export interface EdgeGatewayL2VpnClientConfigurationJson {
    server_address: string;
    server_port: number;
    ca_certificate: string;
    vnic: Array<number>;
    egress_optimization: Array<string>;
    encryption_algorithm: Array<EdgeGatewayL2vpnEncryptionAlgorithmType>;
}

export interface EdgeGatewayL2VpnClientJson {
    configuration: EdgeGatewayL2VpnClientConfigurationJson;
    l2_vpn_user: EdgeGatewayL2VpnUserJson;
    proxy_setting: EdgeGatewayL2VpnProxySettingsJson;
}

export interface EdgeGatewayL2VpnJson {
    enabled: boolean;
    logging: EdgeGatewayL2VpnLoggingJson;
    l2_vpn_site_type: EdgeGatewayL2VpnSiteType;
    l2_vpn_site: EdgeGatewayL2VpnSiteJson;
}

export interface EdgeGatewayL2VpnLoggingJson {
    enable: boolean;
    log_level: LogLevelType;
}

export interface EdgeGatewayL2VpnPeerSiteJson {
    enabled: boolean;
    name: string;
    description: string;
    l2_vpn_user: EdgeGatewayL2VpnUserJson;
    vnics: Array<number>;
    egress_optimization: Array<string>;
}

export interface EdgeGatewayL2VpnProxySettingsJson {
    enabled: boolean;
    address: string;
    port: number;
    user_name: string;
    password: string;
}

export interface EdgeGatewayL2VpnServerConfigurationJson {
    listener_ip: string;
    listener_port: number;
    encryption_algorithm: Array<EdgeGatewayL2vpnEncryptionAlgorithmType>;
    server_certificate: string;
    peer_sites: Array<EdgeGatewayL2VpnPeerSiteJson>;
}

export interface EdgeGatewayL2VpnServerJson {
    configuration: EdgeGatewayL2VpnServerConfigurationJson;
}

export interface EdgeGatewayL2VpnSiteJson {
    client: EdgeGatewayL2VpnClientJson;
    server: EdgeGatewayL2VpnServerJson;
}

/**
  * L2VPN Statistics Data JSON Object.
  */
export interface EdgeGatewayL2vpnStatisticsDataJson {
    name: string;
    tunnel_status: EdgeGatewayL2vpnTunnelStatusType;
    established_date: number;
    tx_bytes_from_local_subnet: number;
    rx_bytes_on_local_subnet: number;
    dropped_rx_packets: number;
    dropped_tx_packets: number;
    failure_message: string;
    last_updated_time: number;
}

/**
  * L2VPN Statistics JSON Object returned by API
  */
export interface EdgeGatewayL2vpnStatisticsJson {
    timestamp: number;
    l2vpn_stats: Array<EdgeGatewayL2vpnStatisticsDataJson>;
}

export interface EdgeGatewayL2VpnUpdateRequestJson {
    enabled: boolean;
    logging: EdgeGatewayL2VpnLoggingJson;
    l2_vpn_site_type: EdgeGatewayL2VpnSiteType;
    l2_vpn_site: EdgeGatewayL2VpnSiteJson;
}

export interface EdgeGatewayL2VpnUserJson {
    user_id: string;
    password: string;
}

export class EdgeGatewayL2VpnClientConfiguration {
        constructor(_json: EdgeGatewayL2VpnClientConfigurationJson);
        /**
            * Get server address.
            * @returns {string}
            */
        get serverAddress(): string;
        /**
            * Get server port.
            * @returns {number}
            */
        get serverPort(): number;
        /**
            * Get ca certificate.
            * @returns {string}
            */
        get caCertificate(): string;
        /**
            * Get vnic.
            * @returns {Array<number>}
            */
        get vnic(): Array<number>;
        /**
            * Get egress optimization.
            * @returns {Array<string>}
            */
        get egressOptimization(): Array<string>;
        /**
            * Get encryption algorithm.
            * @returns {Array<EdgeGatewayL2vpnEncryptionAlgorithmType>}
            */
        get encryptionAlgorithm(): Array<EdgeGatewayL2vpnEncryptionAlgorithmType>;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayL2VpnClientConfigurationJson}
            */
        get json(): EdgeGatewayL2VpnClientConfigurationJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewayL2VpnClient {
        constructor(_json: EdgeGatewayL2VpnClientJson);
        /**
            * Get configuration.
            * @returns {EdgeGatewayL2VpnClientConfiguration | undefined}
            */
        get configuration(): EdgeGatewayL2VpnClientConfiguration | undefined;
        /**
            * Get l2 vpn user.
            * @returns {EdgeGatewayL2VpnUser | undefined}
            */
        get l2VpnUser(): EdgeGatewayL2VpnUser | undefined;
        /**
            * Get proxy setting.
            * @returns {EdgeGatewayL2VpnProxySettings | undefined}
            */
        get proxySetting(): EdgeGatewayL2VpnProxySettings | undefined;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayL2VpnClientJson}
            */
        get json(): EdgeGatewayL2VpnClientJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export enum EdgeGatewayL2vpnEncryptionAlgorithm {
    ECDHE_RSA_AES128_GCM_SHA256 = "ECDHE_RSA_AES128_GCM_SHA256",
    ECDHE_RSA_AES256_GCM_SHA384 = "ECDHE_RSA_AES256_GCM_SHA384",
    AES128_GCM_SHA256 = "AES128_GCM_SHA256",
    NULL_SHA256 = "NULL_SHA256",
    NULL_MD5 = "NULL_MD5"
}
export type EdgeGatewayL2vpnEncryptionAlgorithmType = keyof typeof EdgeGatewayL2vpnEncryptionAlgorithm;

export class EdgeGatewayL2VpnLogging {
        constructor(_json: EdgeGatewayL2VpnLoggingJson);
        /**
            * Get enable.
            * @returns {boolean}
            */
        get enable(): boolean;
        /**
            * Get log level.
            * @returns {LogLevelType}
            */
        get logLevel(): LogLevelType;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayL2VpnLoggingJson}
            */
        get json(): EdgeGatewayL2VpnLoggingJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewayL2VpnPeerSite {
        constructor(_json: EdgeGatewayL2VpnPeerSiteJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get l2 vpn user.
            * @returns {EdgeGatewayL2VpnUser}
            */
        get l2VpnUser(): EdgeGatewayL2VpnUser | null;
        /**
            * Get vnics.
            * @returns {Array<number>}
            */
        get vnics(): Array<number>;
        /**
            * Get egress optimization.
            * @returns {Array<string>}
            */
        get egressOptimization(): Array<string>;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayL2VpnPeerSiteJson}
            */
        get json(): EdgeGatewayL2VpnPeerSiteJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewayL2VpnProxySettings {
        constructor(_json: EdgeGatewayL2VpnProxySettingsJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get address.
            * @returns {string}
            */
        get address(): string;
        /**
            * Get port.
            * @returns {number}
            */
        get port(): number;
        /**
            * Get user name.
            * @returns {string}
            */
        get userName(): string;
        /**
            * Get password.
            * @returns {string}
            */
        get password(): string;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayL2VpnProxySettingsJson}
            */
        get json(): EdgeGatewayL2VpnProxySettingsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewayL2VpnServerConfiguration {
        constructor(_json: EdgeGatewayL2VpnServerConfigurationJson);
        /**
            * Get listener ip.
            * @returns {string}
            */
        get listenerIp(): string;
        /**
            * Get listener port.
            * @returns {number}
            */
        get listenerPort(): number;
        /**
            * Get encryption algorithm.
            * @returns {Array<EdgeGatewayL2vpnEncryptionAlgorithmType>}
            */
        get encryptionAlgorithm(): Array<EdgeGatewayL2vpnEncryptionAlgorithmType>;
        /**
            * Get server certificate.
            * @returns {string}
            */
        get serverCertificate(): string;
        /**
            * Get peer sites.
            * @returns {Array<EdgeGatewayL2VpnPeerSite>}
            */
        get peerSites(): Array<EdgeGatewayL2VpnPeerSite>;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayL2VpnServerConfigurationJson}
            */
        get json(): EdgeGatewayL2VpnServerConfigurationJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewayL2VpnServer {
        constructor(_json: EdgeGatewayL2VpnServerJson);
        /**
            * Get configuration.
            * @returns {EdgeGatewayL2VpnServerConfiguration | undefined}
            */
        get configuration(): EdgeGatewayL2VpnServerConfiguration | undefined;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayL2VpnServerJson}
            */
        get json(): EdgeGatewayL2VpnServerJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Edge Gateway L2 VPN Site Type Enum
    */
export enum EdgeGatewayL2VpnSiteTypeEnum {
        CLIENT = "CLIENT",
        SERVER = "SERVER"
}
/**
    * Edge Gateway L2 VPN Site Type
    */
export type EdgeGatewayL2VpnSiteType = keyof typeof EdgeGatewayL2VpnSiteTypeEnum;

export class EdgeGatewayL2VpnSite {
        constructor(_json: EdgeGatewayL2VpnSiteJson);
        /**
            * Get client.
            * @returns {EdgeGatewayL2VpnClient | undefined}
            */
        get client(): EdgeGatewayL2VpnClient | undefined;
        /**
            * Get server.
            * @returns {EdgeGatewayL2VpnServer | undefined}
            */
        get server(): EdgeGatewayL2VpnServer | undefined;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayL2VpnSiteJson}
            */
        get json(): EdgeGatewayL2VpnSiteJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * L2VPN Statistics object
    */
export class EdgeGatewayL2vpnStatisticsData {
        constructor(_json: EdgeGatewayL2vpnStatisticsDataJson);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get tunnel status.
            * @returns {EdgeGatewayL2vpnTunnelStatusType}
            */
        get tunnelStatus(): EdgeGatewayL2vpnTunnelStatusType;
        /**
            * Get established date.
            * @returns {number}
            */
        get establishedDate(): number;
        /**
            * Get tx bytes from local subnet.
            * @returns {number}
            */
        get txBytesFromLocalSubnet(): number;
        /**
            * Get rx bytes on local subnet.
            * @returns {number}
            */
        get rxBytesOnLocalSubnet(): number;
        /**
            * Get dropped rx packets.
            * @returns {number}
            */
        get droppedRxPackets(): number;
        /**
            * Get dropped tx packets.
            * @returns {number}
            */
        get droppedTxPackets(): number;
        /**
            * Get failure message.
            * @returns {string}
            */
        get failureMessage(): string;
        /**
            * Get last updated time.
            * @returns {number}
            */
        get lastUpdatedTime(): number;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayL2vpnStatisticsDataJson}
            */
        get json(): EdgeGatewayL2vpnStatisticsDataJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Edge Gateway L2VPN Tunnel Status Enum
    */
export enum EdgeGatewayL2vpnTunnelStatusEnum {
        UP = "UP",
        DOWN = "DOWN"
}
/**
    * Edge Gateway L2VPN Tunnel Status Type
    */
export type EdgeGatewayL2vpnTunnelStatusType = keyof typeof EdgeGatewayL2vpnTunnelStatusEnum;

/**
    * L2VPN Statistics Object returned by API
    */
export class EdgeGatewayL2vpnStatistics {
        constructor(_json: EdgeGatewayL2vpnStatisticsJson);
        /**
            * Get time stamp.
            * @returns {number}
            */
        get timestamp(): number;
        /**
            * Get l2vpn statistics data.
            * @returns {Array<EdgeGatewayL2vpnStatisticsData>}
            */
        get data(): Array<EdgeGatewayL2vpnStatisticsData>;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayL2vpnStatisticsJson}
            */
        get json(): EdgeGatewayL2vpnStatisticsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewayL2VpnUpdateRequest {
        constructor(edgeGatewayL2VPNUpdateRequest: EdgeGatewayL2VpnUpdateRequest);
        constructor(edgeGatewayL2VPNUpdateRequestJson: EdgeGatewayL2VpnUpdateRequestJson);
        constructor(enabled: boolean, logging: EdgeGatewayL2VpnLoggingJson, l2VpnSiteType: EdgeGatewayL2VpnSiteType, l2VpnSite: EdgeGatewayL2VpnSiteJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get logging.
            * @returns {EdgeGatewayL2VpnLogging}
            */
        get logging(): EdgeGatewayL2VpnLogging;
        /**
            * Get l2 vpn site type.
            * @returns {EdgeGatewayL2VpnSiteType}
            */
        get l2VpnSiteType(): EdgeGatewayL2VpnSiteType;
        /**
            * Get l2 vpn site.
            * @returns {EdgeGatewayL2VpnSite}
            */
        get l2VpnSite(): EdgeGatewayL2VpnSite;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayL2VpnUpdateRequestJson}
            */
        get json(): EdgeGatewayL2VpnUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewayL2VpnUser {
        constructor(_json: EdgeGatewayL2VpnUserJson);
        /**
            * Get user id.
            * @returns {string}
            */
        get userId(): string;
        /**
            * Get password.
            * @returns {string}
            */
        get password(): string;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayL2VpnUserJson}
            */
        get json(): EdgeGatewayL2VpnUserJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewayL2Vpn {
        constructor(_json: EdgeGatewayL2VpnJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get logging.
            * @returns {EdgeGatewayL2VpnLogging}
            */
        get logging(): EdgeGatewayL2VpnLogging;
        /**
            * Get l2 v p n site type.
            * @returns {EdgeGatewayL2VpnSiteType}
            */
        get l2VpnSiteType(): EdgeGatewayL2VpnSiteType;
        /**
            * Get l2 vpn site.
            * @returns {EdgeGatewayL2VpnSite | undefined}
            */
        get l2VpnSite(): EdgeGatewayL2VpnSite | undefined;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayL2VpnJson}
            */
        get json(): EdgeGatewayL2VpnJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
  * Edge Gateway NAT Jsonn
  */
export interface EdgeGatewayNatJson {
    enabled: boolean;
    nat_rules: Array<EdgeGatewayNatRuleJson>;
    nat64_rules: Array<EdgeGatewayNat64RuleJson>;
}

/**
  * Edge Gateway NAT Rule Json
  */
export interface EdgeGatewayNatRuleJson {
    rule_id: number;
    rule_tag: number;
    logging_enabled: boolean;
    enabled: boolean;
    description: string;
    translated_address: string;
    rule_type: string;
    action: EdgeGatewayNatActionType;
    vnic: number;
    original_address: string;
    dnat_match_source_address: string;
    snat_match_destination_address: string;
    protocol: string;
    original_port: string;
    translated_port: string;
    dnat_match_source_port: string;
    snat_match_destination_port: string;
    icmp_type: string;
}

/**
  * Edge Gateway NAT Update Request JSON
  */
export interface EdgeGatewayNatUpdateRequestJson {
    enabled: boolean;
    nat_rules: Array<EdgeGatewayNatRuleJson>;
    nat64_rules: Array<EdgeGatewayNat64RuleJson>;
}

/**
  * Edge Gateway NAT 64 Rule JSON
  */
export interface EdgeGatewayNat64RuleJson {
    rule_id: number;
    rule_tag: number;
    logging_enabled: boolean;
    enabled: boolean;
    description: string;
    match_ipv6_destination_prefix: string;
    translated_ipv4_source_prefix: string;
}

/**
    * Nat Action Enum
    */
export enum EdgeGatewayNatAction {
        SNAT = "SNAT",
        DNAT = "DNAT"
}
/**
    * Nat Action Type
    * This is equivalent to: EdgeGatewayNatActionType = 'SNAT' | 'DNAT';
    */
export type EdgeGatewayNatActionType = keyof typeof EdgeGatewayNatAction;

/**
    * Edge Gateway NAT Rule
    */
export class EdgeGatewayNatRule {
        constructor(_json: EdgeGatewayNatRuleJson);
        /**
            * Get rule id.
            * @returns {number}
            */
        get ruleId(): number;
        /**
            * Get rule tag.
            * @returns {number}
            */
        get ruleTag(): number;
        /**
            * Get logging enabled.
            * @returns {boolean}
            */
        get loggingEnabled(): boolean;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get translated address.
            * @returns {string}
            */
        get translatedAddress(): string;
        /**
            * Get rule type.
            * @returns {string}
            */
        get ruleType(): string;
        /**
            * Get action.
            * @returns {EdgeGatewayNatActionType}
            */
        get action(): EdgeGatewayNatActionType;
        /**
            * Get vnic.
            * @returns {string}
            */
        get vnic(): number;
        /**
            * Get original address.
            * @returns {string}
            */
        get originalAddress(): string;
        /**
            * Get dnat match source address.
            * @returns {string}
            */
        get dnatMatchSourceAddress(): string;
        /**
            * Get snat match destination address.
            * @returns {string}
            */
        get snatMatchDestinationAddress(): string;
        /**
            * Get protocol.
            * @returns {string}
            */
        get protocol(): string;
        /**
            * Get original port.
            * @returns {string}
            */
        get originalPort(): string;
        /**
            * Get translated port.
            * @returns {string}
            */
        get translatedPort(): string;
        /**
            * Get dnat match source port.
            * @returns {string}
            */
        get dnatMatchSourcePort(): string;
        /**
            * Get snat match destination port.
            * @returns {string}
            */
        get snatMatchDestinationPort(): string;
        /**
            * Get icmp type.
            * @returns {string}
            */
        get icmpType(): string;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayNatRuleJson}
            */
        get json(): EdgeGatewayNatRuleJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Edge Gateway NAT Update Request
    */
export class EdgeGatewayNatUpdateRequest {
        constructor(edgeGatewayNATUpdateRequest: EdgeGatewayNatUpdateRequest);
        constructor(edgeGatewayNATUpdateRequestJson: EdgeGatewayNatUpdateRequestJson);
        constructor(enabled: boolean, natRules: Array<EdgeGatewayNatRuleJson>, nat64Rules: Array<EdgeGatewayNat64RuleJson>);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get nat rules.
            * @returns {Array<EdgeGatewayNatRule>}
            */
        get natRules(): Array<EdgeGatewayNatRule>;
        /**
            * Get nat64 rules.
            * @returns {Array<EdgeGatewayNat64Rule>}
            */
        get nat64Rules(): Array<EdgeGatewayNat64Rule>;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayNatUpdateRequestJson}
            */
        get json(): EdgeGatewayNatUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Edge Gateway NAT
    */
export class EdgeGatewayNat {
        constructor(_json: EdgeGatewayNatJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get nat rules.
            * @returns {Array<EdgeGatewayNatRule>}
            */
        get natRules(): Array<EdgeGatewayNatRule>;
        /**
            * Get nat64 rules.
            * @returns {Array<EdgeGatewayNat64Rule>}
            */
        get nat64Rules(): Array<EdgeGatewayNat64Rule>;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayNatJson}
            */
        get json(): EdgeGatewayNatJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Edge Gateway NAT 64 Rule
    */
export class EdgeGatewayNat64Rule {
        constructor(_json: EdgeGatewayNat64RuleJson);
        /**
            * Get rule id.
            * @returns {number}
            */
        get ruleId(): number;
        /**
            * Get rule tag.
            * @returns {number}
            */
        get ruleTag(): number;
        /**
            * Get logging enabled.
            * @returns {boolean}
            */
        get loggingEnabled(): boolean;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get match ipv6 destination prefix.
            * @returns {string}
            */
        get matchIpv6DestinationPrefix(): string;
        /**
            * Get translated ipv4 source prefix.
            * @returns {string}
            */
        get translatedIpv4SourcePrefix(): string;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayNat64RuleJson}
            */
        get json(): EdgeGatewayNat64RuleJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
  * Enumeration of possible Action types
  */
export type ActionType = 'PERMIT' | 'DENY';

/**
  * Authentication JSON
  */
export interface AuthenticationJson {
    type: RoutingAuthenticationType;
    value: string;
}

/**
  * BGP Filter JSON
  */
export interface BGPFilterJson {
    direction: RoutingDirectionType;
    action: RoutingActionType;
    network?: string;
    ip_prefix_ge: number;
    ip_prefix_le: number;
}

/**
  * BGP Neighbour JSON
  */
export interface BGPNeighbourJson {
    ip_address: string;
    remote_as?: number;
    remote_as_number: string;
    weight: number;
    hold_down_timer: number;
    keep_alive_timer: number;
    password: string;
    remove_private_as: boolean;
    bgp_filters: Array<BGPFilterJson>;
}

/**
  * Default Route JSON
  */
export interface DefaultRouteJson {
    description: string;
    type: string;
    mtu: number;
    vnic: number;
    gateway_address: string;
    admin_distance: number;
}

/**
  * Edge Gateway Routing JSON
  */
export interface EdgeGatewayRoutingJson {
    enabled: boolean;
    routing_global_config: RoutingGlobalConfigJson;
    routing_static_config: RoutingStaticConfigJson;
    routing_ospf_config: RoutingOSPFConfigJson;
    routing_bgp_config?: RoutingBGPConfigJson;
}

/**
  * Edge Gateway Routing Update Request JSON
  */
export interface EdgeGatewayRoutingUpdateRequestJson {
    enabled: boolean;
    routing_global_config: RoutingGlobalConfigUpdateRequestJson;
    routing_static_config: RoutingStaticConfigUpdateRequestJson;
    routing_ospf_config: RoutingOSPFConfigUpdateRequestJson;
    routing_bgp_config?: RoutingBGPConfigUpdateRequestJson;
}

/**
  * From JSON
  */
export interface FromJson {
    ospf: boolean;
    bgp: boolean;
    static_route: boolean;
    connected: boolean;
}

/**
  * IP Prefix JSON
  */
export interface IpPrefixJson {
    name: string;
    ip_address: string;
    ge: number;
    le: number;
}

/**
  * Logging JSON
  */
export interface LoggingJson {
    enable: boolean;
    log_level: LogLevelType;
}

/**
  * OSPF Area JSON
  */
export interface OSPFAreaJson {
    area_id: number;
    type: RoutingAreaType;
    authentication: AuthenticationJson;
    translate_type_7_to_type_5?: boolean;
}

/**
  * OSPF Interface JSON
  */
export interface OSPFInterfaceJson {
    vnic: number;
    area_id: number;
    hello_interval: number;
    dead_interval: number;
    priority: number;
    cost: number;
    mtu_ignore: boolean;
}

/**
  * Redistribution JSON
  */
export interface RedistributionJson {
    enabled: boolean;
    rules: Array<RuleJson>;
}

/**
  * Redistribution Update Request JSON
  */
export interface RedistributionUpdateRequestJson {
    enabled: boolean;
    rules: Array<RuleJson>;
}

/**
  * Route JSON
  */
export interface RouteJson {
    description: string;
    vnic: number;
    network: string;
    next_hop: string;
    mtu: number;
    type: string;
    admin_distance: number;
}

/**
  * Enumeration of possible Routing Action types
  */
export type RoutingActionType = 'PERMIT' | 'DENY';

/**
  * Enumeration of possible Routing Area types
  */
export type RoutingAreaType = 'NORMAL' | 'NSSA';

/**
  * Enumeration of possible Routing Authentication types
  */
export type RoutingAuthenticationType = 'NONE' | 'PASSWORD' | 'MD_5';

/**
  * Routing BGP Configuration JSON
  */
export interface RoutingBGPConfigJson {
    enabled: boolean;
    local_as: number;
    local_as_number: string;
    bgp_neighbours: Array<BGPNeighbourJson>;
    redistribution: RedistributionJson;
    graceful_restart: boolean;
    default_originate: boolean;
}

/**
  * Routing BGP Configuration Update Request JSON
  */
export interface RoutingBGPConfigUpdateRequestJson {
    enabled: boolean;
    local_as_number: string;
    bgp_neighbours: Array<BGPNeighbourJson>;
    redistribution: RedistributionUpdateRequestJson;
    graceful_restart: boolean;
    default_originate: boolean;
}

/**
  * Enumeration of possible Routing Direction types
  */
export type RoutingDirectionType = 'IN' | 'OUT';

/**
  * Routing Global Configuration JSON
  */
export interface RoutingGlobalConfigJson {
    router_id: string;
    ecmp: boolean;
    logging: LoggingJson;
    ip_prefixes: Array<IpPrefixJson>;
}

/**
  * Routing Global Configuration Update Request JSON
  */
export interface RoutingGlobalConfigUpdateRequestJson {
    router_id: string;
    ecmp: boolean;
    logging: LoggingJson;
    ip_prefixes: Array<IpPrefixJson>;
}

/**
  * Routing OSPF Configuration JSON
  */
export interface RoutingOSPFConfigJson {
    enabled: boolean;
    graceful_restart: boolean;
    default_originate: boolean;
    ospf_areas: Array<OSPFAreaJson>;
    ospf_interfaces: Array<OSPFInterfaceJson>;
    redistribution: RedistributionJson;
}

/**
  * Routing OSPF Configuration Update Request JSON
  */
export interface RoutingOSPFConfigUpdateRequestJson {
    enabled: boolean;
    graceful_restart: boolean;
    default_originate: boolean;
    ospf_areas: Array<OSPFAreaJson>;
    ospf_interfaces: Array<OSPFInterfaceJson>;
    redistribution: RedistributionUpdateRequestJson;
}

/**
  * Routing Static Configuration JSON
  */
export interface RoutingStaticConfigJson {
    default_route?: DefaultRouteJson;
    static_routes: Array<RouteJson>;
}

/**
  * Routing Static Configuration Update Request JSON
  */
export interface RoutingStaticConfigUpdateRequestJson {
    default_route?: DefaultRouteJson;
    static_routes: Array<RouteJson>;
}

/**
  * Rule JSON
  */
export interface RuleJson {
    id: number;
    prefix_name: string;
    from: FromJson;
    action: ActionType;
}

/**
    * Authentication
    */
export class Authentication {
        constructor(_json: AuthenticationJson);
        /**
            * Get type.
            * @returns {RoutingAuthenticationType}
            */
        get type(): RoutingAuthenticationType;
        /**
            * Get value.
            * @returns {string | undefined}
            */
        get value(): string | undefined;
        /**
            * Get the json representation of this class.
            * @returns {AuthenticationJson}
            */
        get json(): AuthenticationJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * BGP Filter
    */
export class BGPFilter {
        constructor(_json: BGPFilterJson);
        /**
            * Get direction.
            * @returns {RoutingDirectionType}
            */
        get direction(): RoutingDirectionType;
        /**
            * Get action.
            * @returns {RoutingActionType}
            */
        get action(): RoutingActionType;
        /**
            * Get network.
            * @returns {string | undefined}
            */
        get network(): string | undefined;
        /**
            * Get ip prefix ge.
            * @returns {number | undefined}
            */
        get ipPrefixGe(): number | undefined;
        /**
            * Get ip prefix le.
            * @returns {number | undefined}
            */
        get ipPrefixLe(): number | undefined;
        /**
            * Get the json representation of this class.
            * @returns {BGPFilterJson}
            */
        get json(): BGPFilterJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * BGP Neighbor
    */
export class BGPNeighbour {
        constructor(_json: BGPNeighbourJson);
        /**
            * Get ip address.
            * @returns {string}
            */
        get ipAddress(): string;
        /**
            * Get remote as.
            * @returns {number | undefined}
            */
        get remoteAs(): number | undefined;
        /**
            * Get remote as number.
            * @returns {string}
            */
        get remoteAsNumber(): string;
        /**
            * Get weight.
            * @returns {number}
            */
        get weight(): number;
        /**
            * Get hold down timer.
            * @returns {number}
            */
        get holdDownTimer(): number;
        /**
            * Get keep alive timer.
            * @returns {number}
            */
        get keepAliveTimer(): number;
        /**
            * Get password.
            * @returns {string | undefined}
            */
        get password(): string | undefined;
        /**
            * Get remove private as.
            * @returns {boolean}
            */
        get removePrivateAs(): boolean;
        /**
            * Get bgp filters.
            * @returns {Array<BGPFilter>}
            */
        get bgpFilters(): Array<BGPFilter>;
        /**
            * Get the json representation of this class.
            * @returns {BGPNeighbourJson}
            */
        get json(): BGPNeighbourJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Default Route
    */
export class DefaultRoute {
        constructor(_json: DefaultRouteJson);
        /**
            * Get description.
            * @returns {string | undefined}
            */
        get description(): string | undefined;
        /**
            * Get type.
            * @returns {string | undefined}
            */
        get type(): string | undefined;
        /**
            * Get mtu.
            * @returns {number}
            */
        get mtu(): number;
        /**
            * Get vnic.
            * @returns {number}
            */
        get vnic(): number;
        /**
            * Get gateway address.
            * @returns {string}
            */
        get gatewayAddress(): string;
        /**
            * Get admin distance.
            * @returns {number}
            */
        get adminDistance(): number;
        /**
            * Get the json representation of this class.
            * @returns {DefaultRouteJson}
            */
        get json(): DefaultRouteJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Edge Gateway Routing Update Request
    */
export class EdgeGatewayRoutingUpdateRequest {
        constructor(edgeGatewayRoutingUpdateRequest: EdgeGatewayRoutingUpdateRequest);
        constructor(edgeGatewayRoutingUpdateRequestJson: EdgeGatewayRoutingUpdateRequestJson);
        constructor(enabled: boolean, routingGlobalConfig: RoutingGlobalConfigUpdateRequestJson, routingStaticConfig: RoutingStaticConfigUpdateRequestJson, routingOspfConfig: RoutingOSPFConfigUpdateRequestJson, routingBgpConfig: RoutingBGPConfigUpdateRequestJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get routing global config.
            * @returns {RoutingGlobalConfigUpdateRequest}
            */
        get routingGlobalConfig(): RoutingGlobalConfigUpdateRequest;
        /**
            * Get routing static config.
            * @returns {RoutingStaticConfigUpdateRequest}
            */
        get routingStaticConfig(): RoutingStaticConfigUpdateRequest;
        /**
            * Get routing ospf config.
            * @returns {RoutingOSPFConfigUpdateRequest}
            */
        get routingOspfConfig(): RoutingOSPFConfigUpdateRequest;
        /**
            * Get routing bgp config.
            * @returns {RoutingBGPConfigUpdateRequest | undefined}
            */
        get routingBgpConfig(): RoutingBGPConfigUpdateRequest | undefined;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayRoutingUpdateRequestJson}
            */
        get json(): EdgeGatewayRoutingUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Edge Gateway Routing
    */
export class EdgeGatewayRouting {
        constructor(_json: EdgeGatewayRoutingJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get routing global config.
            * @returns {RoutingGlobalConfig}
            */
        get routingGlobalConfig(): RoutingGlobalConfig;
        /**
            * Get routing static config.
            * @returns {RoutingStaticConfig}
            */
        get routingStaticConfig(): RoutingStaticConfig;
        /**
            * Get routing ospf config.
            * @returns {RoutingOSPFConfig}
            */
        get routingOspfConfig(): RoutingOSPFConfig;
        /**
            * Get routing bgp config.
            * @returns {RoutingBGPConfig | undefined}
            */
        get routingBgpConfig(): RoutingBGPConfig | undefined;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayRoutingJson}
            */
        get json(): EdgeGatewayRoutingJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * From
    */
export class From {
        constructor(_json: FromJson);
        /**
            * Get ospf.
            * @returns {boolean}
            */
        get ospf(): boolean;
        /**
            * Get bgp.
            * @returns {boolean}
            */
        get bgp(): boolean;
        /**
            * Get static route.
            * @returns {boolean}
            */
        get staticRoute(): boolean;
        /**
            * Get connected.
            * @returns {boolean}
            */
        get connected(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {FromJson}
            */
        get json(): FromJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * IP Prefix
    */
export class IpPrefix {
        constructor(_json: IpPrefixJson);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get ip address.
            * @returns {string}
            */
        get ipAddress(): string;
        /**
            * Get ge.
            * @returns {number}
            */
        get ge(): number;
        /**
            * Get le.
            * @returns {number}
            */
        get le(): number;
        /**
            * Get the json representation of this class.
            * @returns {IpPrefixJson}
            */
        get json(): IpPrefixJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Logging
    */
export class Logging {
        constructor(_json: LoggingJson);
        /**
            * Get enable.
            * @returns {boolean}
            */
        get enable(): boolean;
        /**
            * Get log level.
            * @returns {LogLevelType}
            */
        get logLevel(): LogLevelType;
        /**
            * Get the json representation of this class.
            * @returns {LoggingJson}
            */
        get json(): LoggingJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * OSPF Area
    */
export class OSPFArea {
        constructor(_json: OSPFAreaJson);
        /**
            * Get area id.
            * @returns {number}
            */
        get areaId(): number;
        /**
            * Get type.
            * @returns {RoutingAreaType}
            */
        get type(): RoutingAreaType;
        /**
            * Get authentication.
            * @returns {Authentication}
            */
        get authentication(): Authentication;
        /**
            * Get translate type 7 to type 5.
            * @returns {boolean | undefined}
            */
        get translateType7ToType5(): boolean | undefined;
        /**
            * Get the json representation of this class.
            * @returns {OSPFAreaJson}
            */
        get json(): OSPFAreaJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * OSPF Interface
    */
export class OSPFInterface {
        constructor(_json: OSPFInterfaceJson);
        /**
            * Get vnic.
            * @returns {number}
            */
        get vnic(): number;
        /**
            * Get area id.
            * @returns {number}
            */
        get areaId(): number;
        /**
            * Get hello interval.
            * @returns {number}
            */
        get helloInterval(): number;
        /**
            * Get dead interval.
            * @returns {number}
            */
        get deadInterval(): number;
        /**
            * Get priority.
            * @returns {number}
            */
        get priority(): number;
        /**
            * Get cost.
            * @returns {number}
            */
        get cost(): number;
        /**
            * Get mtu ignore.
            * @returns {boolean}
            */
        get mtuIgnore(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {OSPFInterfaceJson}
            */
        get json(): OSPFInterfaceJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Redistribution Update Request
    */
export class RedistributionUpdateRequest {
        constructor(redistributionUpdateRequest: RedistributionUpdateRequest);
        constructor(redistributionUpdateRequestJson: RedistributionUpdateRequestJson);
        constructor(enabled: boolean, rules: Array<RuleJson>);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get rules.
            * @returns {Array<Rule>}
            */
        get rules(): Array<Rule>;
        /**
            * Get the json representation of this class.
            * @returns {RedistributionUpdateRequestJson}
            */
        get json(): RedistributionUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Redistribution
    */
export class Redistribution {
        constructor(_json: RedistributionJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get rules.
            * @returns {Array<Rule>}
            */
        get rules(): Array<Rule>;
        /**
            * Get the json representation of this class.
            * @returns {RedistributionJson}
            */
        get json(): RedistributionJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Route
    */
export class Route {
        constructor(_json: RouteJson);
        /**
            * Get description.
            * @returns {string | undefined}
            */
        get description(): string | undefined;
        /**
            * Get vnic.
            * @returns {number}
            */
        get vnic(): number;
        /**
            * Get network.
            * @returns {string}
            */
        get network(): string;
        /**
            * Get next hop.
            * @returns {string}
            */
        get nextHop(): string;
        /**
            * Get mtu.
            * @returns {number}
            */
        get mtu(): number;
        /**
            * Get type.
            * @returns {string}
            */
        get type(): string;
        /**
            * Get admin distance.
            * @returns {number}
            */
        get adminDistance(): number;
        /**
            * Get the json representation of this class.
            * @returns {RouteJson}
            */
        get json(): RouteJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Routing BGP Configuration Update Request
    */
export class RoutingBGPConfigUpdateRequest {
        constructor(routingBGPConfigUpdateRequest: RoutingBGPConfigUpdateRequest);
        constructor(routingBGPConfigUpdateRequestJson: RoutingBGPConfigUpdateRequestJson);
        constructor(enabled: boolean, localAsNumber: string, bgpNeighbours: Array<BGPNeighbourJson>, redistribution: RedistributionUpdateRequestJson, gracefulRestart: boolean, defaultOriginate: boolean);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get local as number.
            * @returns {string}
            */
        get localAsNumber(): string;
        /**
            * Get bgp neighbours.
            * @returns {Array<BGPNeighbour>}
            */
        get bgpNeighbours(): Array<BGPNeighbour>;
        /**
            * Get redistribution.
            * @returns {RedistributionUpdateRequest}
            */
        get redistribution(): RedistributionUpdateRequest;
        /**
            * Get graceful restart.
            * @returns {boolean}
            */
        get gracefulRestart(): boolean;
        /**
            * Get default originate.
            * @returns {boolean}
            */
        get defaultOriginate(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {RoutingBGPConfigUpdateRequestJson}
            */
        get json(): RoutingBGPConfigUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Routing BGP Configuration
    */
export class RoutingBGPConfig {
        constructor(_json: RoutingBGPConfigJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get local as.
            * @returns {number}
            */
        get localAs(): number;
        /**
            * Get local as number.
            * @returns {string}
            */
        get localAsNumber(): string;
        /**
            * Get bgp neighbours.
            * @returns {Array<BGPNeighbour>}
            */
        get bgpNeighbours(): Array<BGPNeighbour>;
        /**
            * Get redistribution.
            * @returns {Redistribution | undefined}
            */
        get redistribution(): Redistribution | undefined;
        /**
            * Get graceful restart.
            * @returns {boolean}
            */
        get gracefulRestart(): boolean;
        /**
            * Get default originate.
            * @returns {boolean}
            */
        get defaultOriginate(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {RoutingBGPConfigJson}
            */
        get json(): RoutingBGPConfigJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Routing Global Configuration Update Request
    */
export class RoutingGlobalConfigUpdateRequest {
        constructor(routingGlobalConfigUpdateRequest: RoutingGlobalConfigUpdateRequest);
        constructor(routingGlobalConfigUpdateRequestJson: RoutingGlobalConfigUpdateRequestJson);
        constructor(routerId: string, ecmp: boolean, logging: LoggingJson, ipPrefixes: Array<IpPrefixJson>);
        /**
            * Get router id.
            * @returns {string}
            */
        get routerId(): string;
        /**
            * Get ecmp.
            * @returns {boolean}
            */
        get ecmp(): boolean;
        /**
            * Get logging.
            * @returns {Logging}
            */
        get logging(): Logging;
        /**
            * Get ip prefixes.
            * @returns {Array<IpPrefix>}
            */
        get ipPrefixes(): Array<IpPrefix>;
        /**
            * Get the json representation of this class.
            * @returns {RoutingGlobalConfigUpdateRequestJson}
            */
        get json(): RoutingGlobalConfigUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Routing Global Configuration
    */
export class RoutingGlobalConfig {
        constructor(_json: RoutingGlobalConfigJson);
        /**
            * Get router id.
            * @returns {string | undefined}
            */
        get routerId(): string | undefined;
        /**
            * Get ecmp.
            * @returns {boolean}
            */
        get ecmp(): boolean;
        /**
            * Get logging.
            * @returns {Logging}
            */
        get logging(): Logging;
        /**
            * Get ip prefixes.
            * @returns {Array<IpPrefix>}
            */
        get ipPrefixes(): Array<IpPrefix>;
        /**
            * Get the json representation of this class.
            * @returns {RoutingGlobalConfigJson}
            */
        get json(): RoutingGlobalConfigJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Routing OSPF Configuration Update Request
    */
export class RoutingOSPFConfigUpdateRequest {
        constructor(routingOSPFConfigUpdateRequest: RoutingOSPFConfigUpdateRequest);
        constructor(routingOSPFConfigUpdateRequestJson: RoutingOSPFConfigUpdateRequestJson);
        constructor(enabled: boolean, gracefulRestart: boolean, defaultOriginate: boolean, ospfAreas: Array<OSPFAreaJson>, ospfInterfaces: Array<OSPFInterfaceJson>, redistribution: RedistributionUpdateRequestJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get graceful restart.
            * @returns {boolean}
            */
        get gracefulRestart(): boolean;
        /**
            * Get default originate.
            * @returns {boolean}
            */
        get defaultOriginate(): boolean;
        /**
            * Get ospf areas.
            * @returns {Array<OSPFArea>}
            */
        get ospfAreas(): Array<OSPFAreaJson>;
        /**
            * Get ospf interfaces.
            * @returns {Array<OSPFInterface>}
            */
        get ospfInterfaces(): Array<OSPFInterface>;
        /**
            * Get redistribution.
            * @returns {RedistributionUpdateRequest}
            */
        get redistribution(): RedistributionUpdateRequest;
        /**
            * Get the json representation of this class.
            * @returns {RoutingOSPFConfigUpdateRequestJson}
            */
        get json(): RoutingOSPFConfigUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Routing OSPF Configuration
    */
export class RoutingOSPFConfig {
        constructor(_json: RoutingOSPFConfigJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get graceful restart.
            * @returns {boolean}
            */
        get gracefulRestart(): boolean;
        /**
            * Get default originate.
            * @returns {boolean}
            */
        get defaultOriginate(): boolean;
        /**
            * Get ospf areas.
            * @returns {Array<OSPFArea>}
            */
        get ospfAreas(): Array<OSPFArea>;
        /**
            * Get ospf interfaces.
            * @returns {Array<OSPFInterface>}
            */
        get ospfInterfaces(): Array<OSPFInterface>;
        /**
            * Get redistribution.
            * @returns {Redistribution}
            */
        get redistribution(): Redistribution;
        /**
            * Get the json representation of this class.
            * @returns {RoutingOSPFConfigJson}
            */
        get json(): RoutingOSPFConfigJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Routing Static Configuration Update Request
    */
export class RoutingStaticConfigUpdateRequest {
        constructor(routingStaticConfigUpdateRequest: RoutingStaticConfigUpdateRequest);
        constructor(routingStaticConfigUpdateRequestJson: RoutingStaticConfigUpdateRequestJson);
        constructor(defaultRoute: DefaultRouteJson, staticRoutes: Array<RouteJson>);
        /**
            * Get default route.
            * @returns {DefaultRoute | undefined}
            */
        get defaultRoute(): DefaultRoute | undefined;
        /**
            * Get static routes.
            * @returns {Array<Route>}
            */
        get staticRoutes(): Array<Route>;
        /**
            * Get the json representation of this class.
            * @returns {RoutingStaticConfigUpdateRequestJson}
            */
        get json(): RoutingStaticConfigUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Routing Static Configuration
    */
export class RoutingStaticConfig {
        constructor(_json: RoutingStaticConfigJson);
        /**
            * Get default route.
            * @returns {DefaultRoute | undefined}
            */
        get defaultRoute(): DefaultRoute | undefined;
        /**
            * Get static routes.
            * @returns {Array<Route>}
            */
        get staticRoutes(): Array<Route>;
        /**
            * Get the json representation of this class.
            * @returns {RoutingStaticConfigJson}
            */
        get json(): RoutingStaticConfigJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Rule
    */
export class Rule {
        constructor(_json: RuleJson);
        /**
            * Get id.
            * @returns {number}
            */
        get id(): number;
        /**
            * Get prefix name.
            * @returns {string}
            */
        get prefixName(): string;
        /**
            * Get from.
            * @returns {From}
            */
        get from(): From;
        /**
            * Get action.
            * @returns {ActionType}
            */
        get action(): ActionType;
        /**
            * Get the json representation of this class.
            * @returns {RuleJson}
            */
        get json(): RuleJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export interface EdgeGatewaySSHSettingsJson {
    remote_access: boolean;
    user_name: string;
    ssh_login_banner: string;
    password_expiry: number;
}

export interface EdgeGatewaySSHSettingsUpdateRequestJson extends EdgeGatewaySSHSettingsJson {
    password: string;
}

export interface EdgeGatewaySyslogJson {
    enabled: boolean;
    protocol: string;
    server_addresses: Array<string>;
}

export class EdgeGatewaySSHSettingsUpdateRequest {
        constructor(edgeGatewaySSHSettingsUpdateRequest: EdgeGatewaySSHSettingsUpdateRequest);
        constructor(edgeGatewaySSHSettingsUpdateRequestJson: EdgeGatewaySSHSettingsUpdateRequestJson);
        constructor(remoteAccess: boolean, userName: string, password: string, sshLoginBanner: string, passwordExpiry: number);
        /**
            * Get remote access.
            * @returns {boolean}
            */
        get remoteAccess(): boolean;
        /**
            * Get user name.
            * @returns {string}
            */
        get userName(): string;
        /**
            * Get password.
            * @returns {string}
            */
        get password(): string;
        /**
            * Get ssh login banner.
            * @returns {string}
            */
        get sshLoginBanner(): string;
        /**
            * Get password expiry.
            * @returns {number}
            */
        get passwordExpiry(): number;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewaySSHSettingsUpdateRequestJson}
            */
        get json(): EdgeGatewaySSHSettingsUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewaySSHSettings {
        constructor(_json: EdgeGatewaySSHSettingsJson);
        /**
            * Get remote access.
            * @returns {boolean}
            */
        get remoteAccess(): boolean;
        /**
            * Get user name.
            * @returns {string}
            */
        get userName(): string;
        /**
            * Get ssh login banner.
            * @returns {string}
            */
        get sshLoginBanner(): string;
        /**
            * Get password expiry.
            * @returns {number}
            */
        get passwordExpiry(): number;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewaySSHSettingsJson}
            */
        get json(): EdgeGatewaySSHSettingsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewaySyslogUpdateRequest {
        constructor(edgeGatewaySyslogUpdateRequest: EdgeGatewaySyslogUpdateRequest);
        constructor(edgeGatewaySyslogUpdateRequestJson: EdgeGatewaySyslogJson);
        constructor(enabled: boolean, protocol: string, serverAddresses: Array<string>);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get protocol.
            * @returns {string}
            */
        get protocol(): string;
        /**
            * Get server addresses.
            * @returns {Array<string>}
            */
        get serverAddresses(): Array<string>;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewaySyslogJson}
            */
        get json(): EdgeGatewaySyslogJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewaySyslog {
        constructor(_json: EdgeGatewaySyslogJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get protocol.
            * @returns {string}
            */
        get protocol(): string;
        /**
            * Get server addresses.
            * @returns {Array<string>}
            */
        get serverAddresses(): Array<string>;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewaySyslogJson}
            */
        get json(): EdgeGatewaySyslogJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export interface EdgeGatewaySslVpnAccountLockoutPolicyJson {
    retry_count: number;
    retry_duration: number;
    lockout_duration: number;
}

export interface EdgeGatewaySslVpnAdAuthServerJson extends EdgeGatewaySslVpnAuthServerJson {
    ip: string;
    port: number;
    timeout: number;
    enable_ssl: boolean;
    search_base: string;
    bind_domain_name: string;
    bind_password: string;
    login_attribute_name: string;
    search_filter: string;
    certificate_sha1_digest: string;
}

export interface EdgeGatewaySslVpnAdvancedConfigJson {
    enable_compression: boolean;
    force_virtual_keyboard: boolean;
    randomize_virtual_keys: boolean;
    prevent_multiple_logon: boolean;
    client_notification: string;
    enable_public_url_access: boolean;
    timeout: EdgeGatewaySslVpnTimeoutJson;
}

export interface EdgeGatewaySslVpnAuthServerJson {
    object_id: string;
    auth_server_type: EdgeGatewaySslVpnAuthServerType;
    enabled: boolean;
    secondary_auth_server: boolean;
    terminate_session_on_auth_fails: boolean;
}

export interface EdgeGatewaySslVpnAuthenticationConfigurationJson {
    password_authentication: EdgeGatewaySslVpnPasswordAuthenticationJson;
    certificate_id: string;
}

export interface EdgeGatewaySslVpnClientConfigurationJson {
    auto_reconnect: boolean;
    full_tunnel: EdgeGatewaySslVpnFullTunnelJson;
    upgrade_notification: boolean;
}

export interface EdgeGatewaySslVpnClientInstallPackageJson {
    enabled: boolean;
    profile_name: string;
    gateway_list: Array<EdgeGatewaySslVpnGatewayJson>;
    description: string;
    create_linux_client: boolean;
    create_mac_client: boolean;
    start_client_on_logon: boolean;
    hide_systray_icon: boolean;
    remember_password: boolean;
    silent_mode_operation: boolean;
    silent_mode_installation: boolean;
    hide_network_adaptor: boolean;
    create_desktop_icon: boolean;
    enforce_server_security_cert_validation: boolean;
    disconnect_on_cert_validation_failure: boolean;
}

export interface EdgeGatewaySslVpnFullTunnelJson {
    exclude_local_subnets: boolean;
    gateway_ip: string;
}

export interface EdgeGatewaySslVpnGatewayJson {
    host_name: string;
    port: number;
}

export interface EdgeGatewaySslVpnIpAddressPoolJson {
    enabled: boolean;
    ip_range: string;
    netmask: string;
    gateway: string;
    primary_dns: string;
    secondary_dns: string;
    dns_suffix: string;
    wins_server: string;
    description: string;
}

export interface EdgeGatewaySslVpnJson {
    enabled: boolean;
    logging: EdgeGatewaySslVpnLoggingJson;
    advanced_config: EdgeGatewaySslVpnAdvancedConfigJson;
    client_configuration: EdgeGatewaySslVpnClientConfigurationJson;
    ip_address_pools: Array<EdgeGatewaySslVpnIpAddressPoolJson>;
    private_networks: Array<EdgeGatewaySslVpnPrivateNetworkJson>;
    users: Array<EdgeGatewaySslVpnUserJson>;
    client_install_packages: Array<EdgeGatewaySslVpnClientInstallPackageJson>;
    authentication_configuration: EdgeGatewaySslVpnAuthenticationConfigurationJson;
    server_settings: EdgeGatewaySslVpnServerSettingsJson;
}

export interface EdgeGatewaySslVpnLdapAuthServerJson extends EdgeGatewaySslVpnAuthServerJson {
    enable_ssl: boolean;
    ip: string;
    port: number;
    timeout: number;
    search_base: string;
    bind_domain_name: string;
    bind_password: string;
    login_attribute_name: string;
    search_filter: string;
    certificate_sha1_digest: string;
}

export interface EdgeGatewaySslVpnLocalAuthServerJson extends EdgeGatewaySslVpnAuthServerJson {
    password_policy: EdgeGatewaySslVpnPasswordPolicyJson;
    account_lockout_policy: EdgeGatewaySslVpnAccountLockoutPolicyJson;
}

export interface EdgeGatewaySslVpnLoggingJson {
    enable: boolean;
    log_level: LogLevelType;
}

export interface EdgeGatewaySslVpnPasswordAuthenticationJson {
    authentication_timeout: number;
    primary_auth_servers: Array<EdgeGatewaySslVpnAuthServerJson>;
    secondary_auth_server: EdgeGatewaySslVpnAuthServerJson;
}

export interface EdgeGatewaySslVpnPasswordPolicyJson {
    min_length: number;
    max_length: number;
    min_alphabets: number;
    min_digits: number;
    min_special_char: number;
    allow_user_id_within_password: boolean;
    password_life_time: number;
    expiry_notification: number;
}

export interface EdgeGatewaySslVpnPrivateNetworkJson {
    enabled: boolean;
    network: string;
    description: string;
    send_over_tunnel: EdgeGatewaySslVpnSendOverTunnelJson;
}

export interface EdgeGatewaySslVpnRadiusAuthServerJson extends EdgeGatewaySslVpnAuthServerJson {
    ip: string;
    port: number;
    timeout: number;
    secret: string;
    nas_ip: string;
    retry_count: number;
}

export interface EdgeGatewaySslVpnRsaAuthServerJson extends EdgeGatewaySslVpnAuthServerJson {
    timeout: number;
    config_file: string;
    config_file_data: string;
    config_file_name: string;
    source_ip: string;
}

export interface EdgeGatewaySslVpnSendOverTunnelJson {
    ports: string;
    optimize: boolean;
}

export interface EdgeGatewaySslVpnServerSettingsJson {
    ip_address: string;
    port: number;
    certificate_id: string;
    cipher_list: Array<EdgeGatewaySslVpnCipherType>;
}

export interface EdgeGatewaySslVpnTimeoutJson {
    forced_timeout: number;
    session_idle_timeout: number;
}

export interface EdgeGatewaySslVpnUserJson {
    user_id: string;
    password: string;
    first_name: string;
    last_name: string;
    description: string;
    disable_user_account: boolean;
    password_never_expires: boolean;
    allow_change_password: boolean;
    change_password_on_next_login: boolean;
}

export class EdgeGatewaySslVpnAccountLockoutPolicy {
        constructor(_json: EdgeGatewaySslVpnAccountLockoutPolicyJson);
        /**
            * Get retry count.
            * @returns {number}
            */
        get retryCount(): number;
        /**
            * Get retry duration.
            * @returns {number}
            */
        get retryDuration(): number;
        /**
            * Get lockout duration.
            * @returns {number}
            */
        get lockoutDuration(): number;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewaySslVpnAccountLockoutPolicyJson}
            */
        get json(): EdgeGatewaySslVpnAccountLockoutPolicyJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewaySslVpnAdAuthServer extends EdgeGatewaySslVpnAuthServer {
        constructor(_json: EdgeGatewaySslVpnAdAuthServerJson);
        /**
            * Get object id.
            * @returns {string}
            */
        get objectId(): string;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get secondary auth server.
            * @returns {boolean}
            */
        get secondaryAuthServer(): boolean;
        /**
            * Get terminate session on auth fails.
            * @returns {boolean}
            */
        get terminateSessionOnAuthFails(): boolean;
        /**
            * Get ip.
            * @returns {string}
            */
        get ip(): string;
        /**
            * Get port.
            * @returns {number}
            */
        get port(): number;
        /**
            * Get timeout.
            * @returns {number}
            */
        get timeout(): number;
        /**
            * Get enable ssl.
            * @returns {boolean}
            */
        get enableSsl(): boolean;
        /**
            * Get search base.
            * @returns {string}
            */
        get searchBase(): string;
        /**
            * Get bind domain name.
            * @returns {string}
            */
        get bindDomainName(): string;
        /**
            * Get bind password.
            * @returns {string}
            */
        get bindPassword(): string;
        /**
            * Get login attribute name.
            * @returns {string}
            */
        get loginAttributeName(): string;
        /**
            * Get search filter.
            * @returns {string}
            */
        get searchFilter(): string;
        /**
            * Get certificate sha1 digest.
            * @returns {string}
            */
        get certificateSha1Digest(): string;
        /**
            * Get auth server type.
            * @returns {EdgeGatewaySslVpnAuthServerType}
            */
        get authServerType(): EdgeGatewaySslVpnAuthServerType;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewaySslVpnAdAuthServerJson}
            */
        get json(): EdgeGatewaySslVpnAdAuthServerJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewaySslVpnAdvancedConfig {
        constructor(_json: EdgeGatewaySslVpnAdvancedConfigJson);
        /**
            * Get enable compression.
            * @returns {boolean}
            */
        get enableCompression(): boolean;
        /**
            * Get force virtual keyboard.
            * @returns {boolean}
            */
        get forceVirtualKeyboard(): boolean;
        /**
            * Get randomize virtual keys.
            * @returns {boolean}
            */
        get randomizeVirtualKeys(): boolean;
        /**
            * Get prevent multiple logon.
            * @returns {boolean}
            */
        get preventMultipleLogon(): boolean;
        /**
            * Get client notification.
            * @returns {string}
            */
        get clientNotification(): string;
        /**
            * Get enable public url access.
            * @returns {boolean}
            */
        get enablePublicUrlAccess(): boolean;
        /**
            * Get timeout.
            * @returns {EdgeGatewaySslVpnTimeout}
            */
        get timeout(): EdgeGatewaySslVpnTimeout;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewaySslVpnAdvancedConfigJson}
            */
        get json(): EdgeGatewaySslVpnAdvancedConfigJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export enum EdgeGatewaySslVpnAuthServerTypeEnum {
    LOCAL = "LOCAL",
    LDAP = "LDAP",
    AD = "AD",
    RADIUS = "RADIUS",
    ACE = "ACE"
}
export type EdgeGatewaySslVpnAuthServerType = keyof typeof EdgeGatewaySslVpnAuthServerTypeEnum;

export class EdgeGatewaySslVpnAuthServer {
        constructor(_authServerJson: EdgeGatewaySslVpnAuthServerJson);
        /**
            * Get object id.
            * @returns {string}
            */
        get objectId(): string;
        /**
            * Get auth server type.
            * @returns {EdgeGatewaySslVpnAuthServerType}
            */
        get authServerType(): EdgeGatewaySslVpnAuthServerType;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get secondary auth server.
            * @returns {boolean}
            */
        get secondaryAuthServer(): boolean;
        /**
            * Get terminate session on auth fails.
            * @returns {boolean}
            */
        get terminateSessionOnAuthFails(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewaySslVpnAuthServerJson}
            */
        get json(): EdgeGatewaySslVpnAuthServerJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewaySslVpnAuthenticationConfiguration {
        constructor(_json: EdgeGatewaySslVpnAuthenticationConfigurationJson);
        /**
            * Get password authentication.
            * @returns {EdgeGatewaySslVpnPasswordAuthentication | null}
            */
        get passwordAuthentication(): EdgeGatewaySslVpnPasswordAuthentication | null;
        /**
            * Get certificate id.
            * @returns {string}
            */
        get certificateId(): string;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewaySslVpnAuthenticationConfigurationJson}
            */
        get json(): EdgeGatewaySslVpnAuthenticationConfigurationJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export enum EdgeGatewaySslVpnCipherTypeEnum {
    AES128_SHA = "AES128_SHA",
    AES256_SHA = "AES256_SHA",
    AES128_GCM_SHA256 = "AES128_GCM_SHA256",
    ECDHE_RSA_AES128_GCM_SHA256 = "ECDHE_RSA_AES128_GCM_SHA256",
    ECDHE_RSA_AES256_GCM_SHA384 = "ECDHE_RSA_AES256_GCM_SHA384",
    DES_CBC3_SHA = "DES_CBC3_SHA"
}
export type EdgeGatewaySslVpnCipherType = keyof typeof EdgeGatewaySslVpnCipherTypeEnum;

export class EdgeGatewaySslVpnClientConfiguration {
        constructor(_json: EdgeGatewaySslVpnClientConfigurationJson);
        /**
            * Get auto reconnect.
            * @returns {boolean}
            */
        get autoReconnect(): boolean;
        /**
            * Get full tunnel.
            * @returns {EdgeGatewaySslVpnFullTunnel}
            */
        get fullTunnel(): EdgeGatewaySslVpnFullTunnel;
        /**
            * Get upgrade notification.
            * @returns {boolean}
            */
        get upgradeNotification(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewaySslVpnClientConfigurationJson}
            */
        get json(): EdgeGatewaySslVpnClientConfigurationJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewaySslVpnClientInstallPackage {
        constructor(_json: EdgeGatewaySslVpnClientInstallPackageJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get profile name.
            * @returns {string}
            */
        get profileName(): string;
        /**
            * Get gateway list.
            * @returns {Array<EdgeGatewaySslVpnGateway>}
            */
        get gatewayList(): Array<EdgeGatewaySslVpnGateway>;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get create linux client.
            * @returns {boolean}
            */
        get createLinuxClient(): boolean;
        /**
            * Get create mac client.
            * @returns {boolean}
            */
        get createMacClient(): boolean;
        /**
            * Get start client on logon.
            * @returns {boolean}
            */
        get startClientOnLogon(): boolean;
        /**
            * Get hide systray icon.
            * @returns {boolean}
            */
        get hideSystrayIcon(): boolean;
        /**
            * Get remember password.
            * @returns {boolean}
            */
        get rememberPassword(): boolean;
        /**
            * Get silent mode operation.
            * @returns {boolean}
            */
        get silentModeOperation(): boolean;
        /**
            * Get silent mode installation.
            * @returns {boolean}
            */
        get silentModeInstallation(): boolean;
        /**
            * Get hide network adaptor.
            * @returns {boolean}
            */
        get hideNetworkAdaptor(): boolean;
        /**
            * Get create desktop icon.
            * @returns {boolean}
            */
        get createDesktopIcon(): boolean;
        /**
            * Get enforce server security cert validation.
            * @returns {boolean}
            */
        get enforceServerSecurityCertValidation(): boolean;
        /**
            * Get disconnect on cert validation failure.
            * @returns {boolean}
            */
        get disconnectOnCertValidationFailure(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewaySslVpnClientInstallPackageJson}
            */
        get json(): EdgeGatewaySslVpnClientInstallPackageJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewaySslVpnFullTunnel {
        constructor(_json: EdgeGatewaySslVpnFullTunnelJson);
        /**
            * Get exclude local subnets.
            * @returns {boolean}
            */
        get excludeLocalSubnets(): boolean;
        /**
            * Get gateway ip.
            * @returns {string}
            */
        get gatewayIp(): string;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewaySslVpnFullTunnelJson}
            */
        get json(): EdgeGatewaySslVpnFullTunnelJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewaySslVpnGateway {
        constructor(_json: EdgeGatewaySslVpnGatewayJson);
        /**
            * Get host name.
            * @returns {string}
            */
        get hostName(): string;
        /**
            * Get port.
            * @returns {number}
            */
        get port(): number;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewaySslVpnGatewayJson}
            */
        get json(): EdgeGatewaySslVpnGatewayJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewaySslVpnIpAddressPool {
        constructor(_json: EdgeGatewaySslVpnIpAddressPoolJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get ip range.
            * @returns {string}
            */
        get ipRange(): string;
        /**
            * Get netmask.
            * @returns {string}
            */
        get netmask(): string;
        /**
            * Get gateway.
            * @returns {string}
            */
        get gateway(): string;
        /**
            * Get primary dns.
            * @returns {string}
            */
        get primaryDns(): string;
        /**
            * Get secondary dns.
            * @returns {string}
            */
        get secondaryDns(): string;
        /**
            * Get dns suffix.
            * @returns {string}
            */
        get dnsSuffix(): string;
        /**
            * Get wins server.
            * @returns {string}
            */
        get winsServer(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewaySslVpnIpAddressPoolJson}
            */
        get json(): EdgeGatewaySslVpnIpAddressPoolJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewaySslVpnLdapAuthServer extends EdgeGatewaySslVpnAuthServer {
        constructor(_json: EdgeGatewaySslVpnLdapAuthServerJson);
        /**
            * Get object id.
            * @returns {string}
            */
        get objectId(): string;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get secondary auth server.
            * @returns {boolean}
            */
        get secondaryAuthServer(): boolean;
        /**
            * Get terminate session on auth fails.
            * @returns {boolean}
            */
        get terminateSessionOnAuthFails(): boolean;
        /**
            * Get enable ssl.
            * @returns {boolean}
            */
        get enableSsl(): boolean;
        /**
            * Get ip.
            * @returns {string}
            */
        get ip(): string;
        /**
            * Get port.
            * @returns {number}
            */
        get port(): number;
        /**
            * Get timeout.
            * @returns {number}
            */
        get timeout(): number;
        /**
            * Get search base.
            * @returns {string}
            */
        get searchBase(): string;
        /**
            * Get bind domain name.
            * @returns {string}
            */
        get bindDomainName(): string;
        /**
            * Get bind password.
            * @returns {string}
            */
        get bindPassword(): string;
        /**
            * Get login attribute name.
            * @returns {string}
            */
        get loginAttributeName(): string;
        /**
            * Get search filter.
            * @returns {string}
            */
        get searchFilter(): string;
        /**
            * Get certificate sha1 digest.
            * @returns {string}
            */
        get certificateSha1Digest(): string;
        /**
            * Get auth server type.
            * @returns {EdgeGatewaySslVpnAuthServerType}
            */
        get authServerType(): EdgeGatewaySslVpnAuthServerType;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewaySslVpnLdapAuthServerJson}
            */
        get json(): EdgeGatewaySslVpnLdapAuthServerJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewaySslVpnLocalAuthServer extends EdgeGatewaySslVpnAuthServer {
        constructor(_json: EdgeGatewaySslVpnLocalAuthServerJson);
        /**
            * Get object id.
            * @returns {string}
            */
        get objectId(): string;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get secondary auth server.
            * @returns {boolean}
            */
        get secondaryAuthServer(): boolean;
        /**
            * Get terminate session on auth fails.
            * @returns {boolean}
            */
        get terminateSessionOnAuthFails(): boolean;
        /**
            * Get password policy.
            * @returns {EdgeGatewaySslVpnPasswordPolicy | null}
            */
        get passwordPolicy(): EdgeGatewaySslVpnPasswordPolicy | null;
        /**
            * Get account lockout policy.
            * @returns {AccountLockoutPolicy | null}
            */
        get accountLockoutPolicy(): EdgeGatewaySslVpnAccountLockoutPolicy | null;
        /**
            * Get auth server type.
            * @returns {EdgeGatewaySslVpnAuthServerType}
            */
        get authServerType(): EdgeGatewaySslVpnAuthServerType;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewaySslVpnLocalAuthServerJson}
            */
        get json(): EdgeGatewaySslVpnLocalAuthServerJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewaySslVpnLogging {
        constructor(_json: EdgeGatewaySslVpnLoggingJson);
        /**
            * Get enable.
            * @returns {boolean}
            */
        get enable(): boolean;
        /**
            * Get log level.
            * @returns {LogLevelType}
            */
        get logLevel(): LogLevelType;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewaySslVpnLoggingJson}
            */
        get json(): EdgeGatewaySslVpnLoggingJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewaySslVpnPasswordAuthentication {
        constructor(_json: EdgeGatewaySslVpnPasswordAuthenticationJson);
        /**
            * Get authentication timeout.
            * @returns {number}
            */
        get authenticationTimeout(): number;
        /**
            * Get primary auth servers.
            * @returns {Array<EdgeGatewaySslVpnAuthServer>}
            */
        get primaryAuthServers(): Array<EdgeGatewaySslVpnAuthServer>;
        /**
            * Get secondary auth server.
            * @returns {EdgeGatewaySslVpnAuthServer | null}
            */
        get secondaryAuthServer(): EdgeGatewaySslVpnAuthServer | null;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewaySslVpnPasswordAuthenticationJson}
            */
        get json(): EdgeGatewaySslVpnPasswordAuthenticationJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewaySslVpnPasswordPolicy {
        constructor(_json: EdgeGatewaySslVpnPasswordPolicyJson);
        /**
            * Get min length.
            * @returns {number}
            */
        get minLength(): number;
        /**
            * Get max length.
            * @returns {number}
            */
        get maxLength(): number;
        /**
            * Get min alphabets.
            * @returns {number}
            */
        get minAlphabets(): number;
        /**
            * Get min digits.
            * @returns {number}
            */
        get minDigits(): number;
        /**
            * Get min special char.
            * @returns {number}
            */
        get minSpecialChar(): number;
        /**
            * Get allow user id within password.
            * @returns {boolean}
            */
        get allowUserIdWithinPassword(): boolean;
        /**
            * Get password life time.
            * @returns {number}
            */
        get passwordLifeTime(): number;
        /**
            * Get expiry notification.
            * @returns {number}
            */
        get expiryNotification(): number;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewaySslVpnPasswordPolicyJson}
            */
        get json(): EdgeGatewaySslVpnPasswordPolicyJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewaySslVpnPrivateNetwork {
        constructor(_json: EdgeGatewaySslVpnPrivateNetworkJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get network.
            * @returns {string}
            */
        get network(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get send over tunnel.
            * @returns {EdgeGatewaySslVpnSendOverTunnel | null}
            */
        get sendOverTunnel(): EdgeGatewaySslVpnSendOverTunnel | null;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewaySslVpnPrivateNetworkJson}
            */
        get json(): EdgeGatewaySslVpnPrivateNetworkJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewaySslVpnRadiusAuthServer extends EdgeGatewaySslVpnAuthServer {
        constructor(_json: EdgeGatewaySslVpnRadiusAuthServerJson);
        /**
            * Get object id.
            * @returns {string}
            */
        get objectId(): string;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get secondary auth server.
            * @returns {boolean}
            */
        get secondaryAuthServer(): boolean;
        /**
            * Get terminate session on auth fails.
            * @returns {boolean}
            */
        get terminateSessionOnAuthFails(): boolean;
        /**
            * Get ip.
            * @returns {string}
            */
        get ip(): string;
        /**
            * Get port.
            * @returns {number}
            */
        get port(): number;
        /**
            * Get timeout.
            * @returns {number}
            */
        get timeout(): number;
        /**
            * Get secret.
            * @returns {string}
            */
        get secret(): string;
        /**
            * Get nas ip.
            * @returns {string}
            */
        get nasIp(): string;
        /**
            * Get retry count.
            * @returns {number}
            */
        get retryCount(): number;
        /**
            * Get auth server type.
            * @returns {EdgeGatewaySslVpnAuthServerType}
            */
        get authServerType(): EdgeGatewaySslVpnAuthServerType;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewaySslVpnRadiusAuthServerJson}
            */
        get json(): EdgeGatewaySslVpnRadiusAuthServerJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewaySslVpnRsaAuthServer extends EdgeGatewaySslVpnAuthServer {
        constructor(_json: EdgeGatewaySslVpnRsaAuthServerJson);
        /**
            * Get object id.
            * @returns {string}
            */
        get objectId(): string;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get secondary auth server.
            * @returns {boolean}
            */
        get secondaryAuthServer(): boolean;
        /**
            * Get terminate session on auth fails.
            * @returns {boolean}
            */
        get terminateSessionOnAuthFails(): boolean;
        /**
            * Get timeout.
            * @returns {number}
            */
        get timeout(): number;
        /**
            * Get config file.
            * @returns {string}
            */
        get configFile(): string;
        /**
            * Get config file data.
            * @returns {string}
            */
        get configFileData(): string;
        /**
            * Get config file name.
            * @returns {string}
            */
        get configFileName(): string;
        /**
            * Get source ip.
            * @returns {string}
            */
        get sourceIp(): string;
        /**
            * Get auth server type.
            * @returns {EdgeGatewaySslVpnAuthServerType}
            */
        get authServerType(): EdgeGatewaySslVpnAuthServerType;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewaySslVpnRsaAuthServerJson}
            */
        get json(): EdgeGatewaySslVpnRsaAuthServerJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewaySslVpnSendOverTunnel {
        constructor(_json: EdgeGatewaySslVpnSendOverTunnelJson);
        /**
            * Get ports.
            * @returns {string}
            */
        get ports(): string;
        /**
            * Get optimize.
            * @returns {boolean}
            */
        get optimize(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewaySslVpnSendOverTunnelJson}
            */
        get json(): EdgeGatewaySslVpnSendOverTunnelJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewaySslVpnServerSettings {
        constructor(_json: EdgeGatewaySslVpnServerSettingsJson);
        /**
            * Get ip address.
            * @returns {string}
            */
        get ipAddress(): string;
        /**
            * Get port.
            * @returns {number}
            */
        get port(): number;
        /**
            * Get certificate id.
            * @returns {string}
            */
        get certificateId(): string;
        /**
            * Get cipher list.
            * @returns {Array<EdgeGatewaySslVpnCipherType>}
            */
        get cipherList(): Array<EdgeGatewaySslVpnCipherType>;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewaySslVpnServerSettingsJson}
            */
        get json(): EdgeGatewaySslVpnServerSettingsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewaySslVpnTimeout {
        constructor(_json: EdgeGatewaySslVpnTimeoutJson);
        /**
            * Get forced timeout.
            * @returns {number}
            */
        get forcedTimeout(): number;
        /**
            * Get session idle timeout.
            * @returns {number}
            */
        get sessionIdleTimeout(): number;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewaySslVpnTimeoutJson}
            */
        get json(): EdgeGatewaySslVpnTimeoutJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewaySslVpnUpdateRequest {
        constructor(edgeGatewaySslVpn: EdgeGatewaySslVpn);
        constructor(edgeGatewaySslVpnJson: EdgeGatewaySslVpnJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get logging.
            * @returns {EdgeGatewaySslVpnLogging}
            */
        get logging(): EdgeGatewaySslVpnLogging;
        /**
            * Get advanced config.
            * @returns {EdgeGatewaySslVpnAdvancedConfig}
            */
        get advancedConfig(): EdgeGatewaySslVpnAdvancedConfig;
        /**
            * Get client configuration.
            * @returns {EdgeGatewaySslVpnClientConfiguration}
            */
        get clientConfiguration(): EdgeGatewaySslVpnClientConfiguration;
        /**
            * Get ip address pools.
            * @returns {Array<EdgeGatewaySslVpnIpAddressPool>}
            */
        get ipAddressPools(): Array<EdgeGatewaySslVpnIpAddressPool>;
        /**
            * Get private networks.
            * @returns {Array<EdgeGatewaySslVpnPrivateNetwork>}
            */
        get privateNetworks(): Array<EdgeGatewaySslVpnPrivateNetwork>;
        /**
            * Get users.
            * @returns {Array<EdgeGatewaySslVpnUser>}
            */
        get users(): Array<EdgeGatewaySslVpnUser>;
        /**
            * Get client install packages.
            * @returns {Array<EdgeGatewaySslVpnClientInstallPackage>}
            */
        get clientInstallPackages(): Array<EdgeGatewaySslVpnClientInstallPackage>;
        /**
            * Get authentication configuration.
            * @returns {EdgeGatewaySslVpnAuthenticationConfiguration}
            */
        get authenticationConfiguration(): EdgeGatewaySslVpnAuthenticationConfiguration;
        /**
            * Get server settings.
            * @returns {EdgeGatewaySslVpnServerSettings}
            */
        get serverSettings(): EdgeGatewaySslVpnServerSettings;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewaySslVpnJson}
            */
        get json(): EdgeGatewaySslVpnJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewaySslVpnUser {
        constructor(_json: EdgeGatewaySslVpnUserJson);
        /**
            * Get user id.
            * @returns {string}
            */
        get userId(): string;
        /**
            * Get password.
            * @returns {string}
            */
        get password(): string;
        /**
            * Get first name.
            * @returns {string}
            */
        get firstName(): string;
        /**
            * Get last name.
            * @returns {string}
            */
        get lastName(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get disable user account.
            * @returns {boolean}
            */
        get disableUserAccount(): boolean;
        /**
            * Get password never expires.
            * @returns {boolean}
            */
        get passwordNeverExpires(): boolean;
        /**
            * Get allow change password.
            * @returns {boolean}
            */
        get allowChangePassword(): boolean;
        /**
            * Get change password on next login.
            * @returns {boolean}
            */
        get changePasswordOnNextLogin(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewaySslVpnUserJson}
            */
        get json(): EdgeGatewaySslVpnUserJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeGatewaySslVpn {
        constructor(_json: EdgeGatewaySslVpnJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get logging.
            * @returns {EdgeGatewaySslVpnLogging | null}
            */
        get logging(): EdgeGatewaySslVpnLogging | null;
        /**
            * Get advanced config.
            * @returns {EdgeGatewaySslVpnAdvancedConfig | null}
            */
        get advancedConfig(): EdgeGatewaySslVpnAdvancedConfig | null;
        /**
            * Get client configuration.
            * @returns {EdgeGatewaySslVpnClientConfiguration | null}
            */
        get clientConfiguration(): EdgeGatewaySslVpnClientConfiguration | null;
        /**
            * Get ip address pools.
            * @returns {Array<EdgeGatewaySslVpnIpAddressPool>}
            */
        get ipAddressPools(): Array<EdgeGatewaySslVpnIpAddressPool>;
        /**
            * Get private networks.
            * @returns {Array<EdgeGatewaySslVpnPrivateNetwork>}
            */
        get privateNetworks(): Array<EdgeGatewaySslVpnPrivateNetwork>;
        /**
            * Get users.
            * @returns {Array<EdgeGatewaySslVpnUser>}
            */
        get users(): Array<EdgeGatewaySslVpnUser>;
        /**
            * Get client install packages.
            * @returns {Array<EdgeGatewaySslVpnClientInstallPackage>}
            */
        get clientInstallPackages(): Array<EdgeGatewaySslVpnClientInstallPackage>;
        /**
            * Get authentication configuration.
            * @returns {EdgeGatewaySslVpnAuthenticationConfiguration | null}
            */
        get authenticationConfiguration(): EdgeGatewaySslVpnAuthenticationConfiguration | null;
        /**
            * Get server settings.
            * @returns {EdgeGatewaySslVpnServerSettings  | null}
            */
        get serverSettings(): EdgeGatewaySslVpnServerSettings | null;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewaySslVpnJson}
            */
        get json(): EdgeGatewaySslVpnJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export interface AddressGroupJson {
    primary_address: string;
    secondary_addresses: SecondaryAddressesJson;
    subnet_mask: string;
    subnet_prefix_length: number;
}

export interface EdgeGatewayVNICJson {
    index: number;
    label: string;
    name: string;
    type: VnicType;
    portgroup_id: string;
    portgroup_name: string;
    address_groups: Array<AddressGroupJson>;
    mac_address: Array<MacAddressJson>;
    mtu: number;
    enable_proxy_arp: boolean;
    enable_send_redirects: boolean;
    is_connected: boolean;
    in_shaping_policy: ShapingPolicyJson;
    out_shaping_policy: ShapingPolicyJson;
    sub_interfaces: Array<VnicSubInterfaceJson>;
}
export type VnicType = 'INTERNAL' | 'UPLINK' | 'TRUNK';

export interface MacAddressJson {
    edge_vm_ha_index: number;
    value: string;
}

export interface SecondaryAddressesJson {
    ip_address: Array<string>;
}

export interface ShapingPolicyJson {
    average_bandwidth: number;
    peak_bandwidth: number;
    burst_size: number;
    enabled: boolean;
    inherited: boolean;
}

export interface VnicSubInterfaceJson {
    is_connected: boolean;
    label: string;
    name: string;
    index: number;
    tunnel_id: number;
    vlan_id: number;
    enable_send_redirects: boolean;
    mtu: number;
    address_groups: Array<AddressGroupJson>;
}

/**
    * Edge Gateway VNIC Address Group.
    */
export class AddressGroup {
        constructor(_json: AddressGroupJson);
        /**
            * Get primary address.
            * @returns {string}
            */
        get primaryAddress(): string;
        /**
            * Get secondary addresses.
            * @returns {SecondaryAddresses}
            */
        get secondaryAddresses(): SecondaryAddresses | null;
        /**
            * Get subnet mask.
            * @returns {string}
            */
        get subnetMask(): string;
        /**
            * Get subnet prefix length.
            * @returns {number}
            */
        get subnetPrefixLength(): number;
        /**
            * Get the json representation of this class.
            * @returns {AddressGroup}
            */
        get json(): AddressGroupJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Edge Gateway VNIC MAC Address.
    */
export class MacAddress {
        constructor(_json: MacAddressJson);
        /**
            * Get edge vm ha index.
            * @returns {number}
            */
        get edgeVmHaIndex(): number;
        /**
            * Get value.
            * @returns {string}
            */
        get value(): string;
        /**
            * Get the json representation of this class.
            * @returns {MacAddress}
            */
        get json(): MacAddressJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Edge Gateway VNIC Secondary Addresses.
    */
export class SecondaryAddresses {
        constructor(_json: SecondaryAddressesJson);
        /**
            * Get ip address.
            * @returns {Array<string>}
            */
        get ipAddress(): Array<string>;
        /**
            * Get the json representation of this class.
            * @returns {SecondaryAddresses}
            */
        get json(): SecondaryAddressesJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Edge Gateway VNIC Shaping Policy.
    */
export class ShapingPolicy {
        constructor(_json: ShapingPolicyJson);
        /**
            * Get average bandwidth.
            * @returns {number}
            */
        get averageBandwidth(): number;
        /**
            * Get peak bandwidth.
            * @returns {number}
            */
        get peakBandwidth(): number;
        /**
            * Get burst size.
            * @returns {number}
            */
        get burstSize(): number;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get inherited.
            * @returns {boolean}
            */
        get inherited(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {ShapingPolicy}
            */
        get json(): ShapingPolicyJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VnicSubInterface {
        constructor(_json: VnicSubInterfaceJson);
        /**
            * Get is connected.
            * @returns {boolean}
            */
        get isConnected(): boolean;
        /**
            * Get label.
            * @returns {string}
            */
        get label(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get index.
            * @returns {number}
            */
        get index(): number;
        /**
            * Get tunnel id.
            * @returns {number}
            */
        get tunnelId(): number;
        /**
            * Get vlan id.
            * @returns {number}
            */
        get vlanId(): number;
        /**
            * Get enable send redirects.
            * @returns {boolean}
            */
        get enableSendRedirects(): boolean;
        /**
            * Get mtu.
            * @returns {number}
            */
        get mtu(): number;
        /**
            * Get address groups.
            * @returns {Array<AddressGroup>}
            */
        get addressGroups(): Array<AddressGroup>;
        /**
            * Get the json representation of this class.
            * @returns {VnicSubInterfaceJson}
            */
        get json(): VnicSubInterfaceJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Edge Gateway VNIC.
    */
export class EdgeGatewayVNIC {
        constructor(_json: EdgeGatewayVNICJson);
        /**
            * Get index.
            * @returns {number}
            */
        get index(): number;
        /**
            * Get label.
            * @returns {string}
            */
        get label(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get type.
            * @returns {VnicType}
            */
        get type(): VnicType;
        /**
            * Get portgroup id.
            * @returns {string}
            */
        get portgroupId(): string;
        /**
            * Get portgroup name.
            * @returns {string}
            */
        get portgroupName(): string;
        /**
            * Get address groups.
            * @returns {Array<AddressGroup>}
            */
        get addressGroups(): Array<AddressGroup>;
        /**
            * Get mac address.
            * @returns {Array<MacAddress>}
            */
        get macAddress(): Array<MacAddress>;
        /**
            * Get mtu.
            * @returns {number}
            */
        get mtu(): number;
        /**
            * Get enable proxy arp.
            * @returns {boolean}
            */
        get enableProxyArp(): boolean;
        /**
            * Get enable send redirects.
            * @returns {boolean}
            */
        get enableSendRedirects(): boolean;
        /**
            * Get is connected.
            * @returns {boolean}
            */
        get isConnected(): boolean;
        /**
            * Get in shaping policy.
            * @returns {ShapingPolicy}
            */
        get inShapingPolicy(): ShapingPolicy | null;
        /**
            * Get out shaping policy.
            * @returns {ShapingPolicy}
            */
        get outShapingPolicy(): ShapingPolicy | null;
        /**
            * Get sub interfaces.
            * @returns {Array<SubInterfaceJson>}
            */
        get subInterfaces(): Array<VnicSubInterface>;
        /**
            * Get the json representation of this class.
            * @returns {EdgeGatewayVNICJson}
            */
        get json(): EdgeGatewayVNICJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
  * Interface for Edge Interface JSON representation.
  */
export interface EdgeInterfaceJson {
    display_name: string | null;
    name: string;
    in_rate_limit: number;
    out_rate_limit: number;
    type: EdgeInterfaceType | null;
    apply_rate_limit: boolean;
    default_route: boolean | null;
    network: string | null;
    network_uuid: string | null;
    subnet_participation: Array<EdgeSubnetParticipationJson> | null;
}

/**
  * Enumeration of possible edge interface types.
  */
export type EdgeInterfaceType = 'internal' | 'uplink';

/**
  * Edge Interface Update Request JSON interface.
  */
export interface EdgeInterfaceUpdateRequestJson {
    display_name: string;
    name: string;
    in_rate_limit: number;
    out_rate_limit: number;
    interface_type: string;
    apply_rate_limit: boolean;
    use_for_default_route: boolean;
    network: string;
    network_uuid: string;
    subnet_participation: Array<SubnetParticipationUpdateRequestJson>;
}

/**
  * Subnet Participation Update Request JSON interface.
  */
export interface SubnetParticipationUpdateRequestJson {
    gateway: string;
    netmask: string;
    ip_address: string;
}

/**
    * Edge Interface Update Request.
    */
export class EdgeInterfaceUpdateRequest {
        constructor(EdgeInterfaceUpdateRequest: EdgeInterfaceUpdateRequest);
        constructor(EdgeInterfaceUpdateRequestJson: EdgeInterfaceUpdateRequestJson);
        constructor(displayName: string, name: string, inRateLimit: number, outRateLimit: number, interfaceType: string, applyRateLimit: boolean, useForDefaultRoute: boolean, network: string, networkUuid: string, subnetParticipation: Array<SubnetParticipationUpdateRequestJson>);
        /**
            * Get display name.
            * @returns {string}
            */
        get displayName(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get in rate limit.
            * @returns {number}
            */
        get inRateLimit(): number;
        /**
            * Get out rate limit.
            * @returns {number}
            */
        get outRateLimit(): number;
        /**
            * Get interface type.
            * @returns {string}
            */
        get interfaceType(): string;
        /**
            * Get apply rate limit.
            * @returns {boolean}
            */
        get applyRateLimit(): boolean;
        /**
            * Get use for default route.
            * @returns {boolean}
            */
        get useForDefaultRoute(): boolean;
        /**
            * Get network.
            * @returns {string}
            */
        get network(): string;
        /**
            * Get network uuid.
            * @returns {string}
            */
        get networkUuid(): string;
        /**
            * Get subnet participation.
            * @returns {Array<SubnetParticipationUpdateRequest>}
            */
        get subnetParticipation(): Array<SubnetParticipationUpdateRequest>;
        /**
            * Get the json representation of this class.
            * @returns {EdgeInterfaceUpdateRequestJson}
            */
        get json(): EdgeInterfaceUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Edge Gateway Interface.
    */
export class EdgeInterface {
        constructor(_json: EdgeInterfaceJson);
        /**
            * Gets the interface name.
            * @returns {string} interface name
            */
        get name(): string;
        /**
            * Gets the display name.
            * @returns {string | null} display name
            */
        get displayName(): string | null;
        /**
            * Gets the incoming rate limit setting.
            * @returns {number} incoming rate limit
            */
        get inRateLimit(): number;
        /**
            * Gets the outgoing rate limit setting.
            * @returns {number} outgoing rate limit
            */
        get outRateLimit(): number;
        /**
            * Gets the interface type.
            * @returns {EdgeInterfaceType | null} interface type
            */
        get type(): EdgeInterfaceType | null;
        /**
            * Indicates whether rate limiting is enabled on this edge.
            * @returns {boolean} value
            */
        get rateLimitEnabled(): boolean;
        /**
            * Indicates whether this edge is used as the default DNS relay route.
            * @returns {boolean | null} value
            */
        get defaultRoute(): boolean | null;
        /**
            * Gets the name of the network that is attached to this interface.
            * @returns {string | null} network name
            */
        get networkName(): string | null;
        /**
            * Gets the UUID of the network that is attached to this interface.
            * @returns {string | null} network UUID
            */
        get networkUuid(): string | null;
        /**
            * Gets the subnet participation information.
            * @returns {[SubnetParticipation]} subnet participation array
            */
        get subnetParticipation(): Array<SubnetParticipation>;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {EdgeInterfaceJson} the JSON representation
            */
        get json(): EdgeInterfaceJson;
}

/**
    * Subnet Participation Update Request.
    */
export class SubnetParticipationUpdateRequest {
        constructor(subnetParticipationUpdateRequest: SubnetParticipationUpdateRequest);
        constructor(subnetParticipationUpdateRequestJson: SubnetParticipationUpdateRequestJson);
        constructor(gateway: string, netmask: string, ipAddress: string);
        /**
            * Get gateway.
            * @returns {string}
            */
        get gateway(): string;
        /**
            * Get netmask.
            * @returns {string}
            */
        get netmask(): string;
        /**
            * Get ip address.
            * @returns {string}
            */
        get ipAddress(): string;
        /**
            * Get the json representation of this class.
            * @returns {SubnetParticipationUpdateRequestJson}
            */
        get json(): SubnetParticipationUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Edge Gateway.
    */
export class Edge extends Entity {
        constructor(_json: EdgeJson);
        /**
            * Gets an Edge by UUID.
            * @param uuid Edge UUID
            * @returns {Promise<Edge>} promise that resolves with the Edge
            */
        static getEdge(uuid: string): Promise<Edge>;
        get entityType(): EntityType;
        /**
            * Gets the status of the Edge gateway.
            * @returns {string} status
            */
        get status(): EdgeStatus;
        /**
            * Gets the UUID of the associated vDC.
            * @returns {string | null} vDC UUID
            */
        get vdcUuid(): string | null;
        /**
            * Gets the UUID of the associated Org.
            * @returns {string | null} org UUID
            */
        get orgUuid(): string | null;
        /**
            * Gets the Edges network interfaces.
            * @returns {[EdgeInterface]} array of interfaces
            */
        get interfaces(): Array<EdgeInterface>;
        /**
            * Indicates whether the edge is in backwards compatibility mode.
            * @returns {boolean} value
            */
        get backwardCompatibilityMode(): boolean;
        /**
            * Gets the type of backing configuration.
            * @returns {EdgeBackingConfigurationType | null} backing configuration type
            */
        get backingConfigurationType(): EdgeBackingConfigurationType | null;
        /**
            * Indicates whether high availability mode is enabled.
            * @returns {boolean | null} value
            */
        get highAvailabilityEnabled(): boolean | null;
        /**
            * Indicates whether this edge is the default DNS relay route.
            * @returns {boolean | null} value
            */
        get defaultDnsRelayRoute(): boolean | null;
        /**
            * Gets the data center location ID that the edge is associated with.
            * @returns {string | null} location ID
            */
        get locationId(): string | null;
        /**
            * Gets the description.
            * @returns {string | null} description
            */
        get description(): string | null;
        /**
            * Gets the vCloud HREF.
            * @returns {string|null} vCloud HREF
            */
        get vcloudHref(): string | null;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {EdgeJson} the JSON representation
            */
        get json(): EdgeJson;
        /**
            * Refreshes the Edge data by retrieving it from the API again.
            * @returns {Promise<Edge>} promise that resolves with this object
            */
        refresh(): Promise<Edge>;
        /**
            * Get the Edge Dhcp pool
            * @returns {Promise<Dhcp>}
            */
        getDhcp(): Promise<Dhcp>;
        /**
            * Get the Edge firewall
            * @deprecated This method is deprecated, use getEdgeGatewayFirewall() instead
            * @returns {Promise<Firewall>}
            */
        getFirewall(): Promise<Firewall>;
        /**
            * Get the Edge Gateway Firewall
            * @returns {Promise<EdgeGatewayFirewall>}
            */
        getEdgeGatewayFirewall(): Promise<EdgeGatewayFirewall>;
        /**
            * Gets firewall traffic log analysis in different formats that summarize the count
            * of actions that have occurred against a particular edge firewall.
            * @returns {Promise<Array<FirewallLog>>}
            * @description By default the endpoint uses 'action_source' analysis type if a specific type is not specified.
            * The time range also defaults to the last hour if no start and end epoch milliseconds are specified.
            * If one of the start or end timestamps are specified the hour range immediately after or before,
            * respectively, are defaulted to.
            */
        getFirewallLogs(type?: EdgeFirewallLogType, start?: number, end?: number): Promise<Array<FirewallLog>>;
        /**
            * Get a list of edge firewall checkpoints that are snapshots of an edge firewall in time.
            * @returns {Promise<Array<Checkpoint>>}
            * @description These checkpoints can be used to restore the edge firewall to a previous state in time.
            */
        getFirewallCheckpoints(): Promise<Array<Checkpoint>>;
        /**
            * Get an edge firewall checkpoint by edge uuid and checkpoint.
            * @param {string} checkpointUuid
            * @returns {Promise<Checkpoint>}
            * @description The actual firewall config of the checkpoint will be included in the return.
            */
        getFirewallCheckpoint(checkpointUuid: string): Promise<Checkpoint>;
        /**
            * Export an Edge Firewall configuration file that can be imported/applied to other edges.
            * @param {string} filename
            */
        getExportFirewallHref(filename?: string): Observable<string>;
        /**
            * Gets IpSec VPN Service details for an edge
            * @returns {Promise<IpsecVpn>}
            */
        getIpsecVpn(): Promise<IpsecVpn>;
        /**
            * Get a link to download an Ipsec vpn export.
            * @param {string} filename
            * @returns {Observable<string>}
            */
        getExportIpsecVpnHref(filename?: string): Observable<string>;
        /**
            * Gets Load Balancer Service details for an edge.
            * @returns {Promise<LoadBalancer>}
            */
        getLoadBalancer(): Promise<LoadBalancer>;
        /**
            * Gets the NAT service configuration for a VCD edge gateway.
            * @returns {Promise<NatService>}
            */
        getNat(): Promise<NatService>;
        /**
            * Get a list of edge NAT checkpoints that are snapshots of an edge NAT service in time
            * @returns {Promise<Array<Checkpoint>>}
            * @description These checkpoints can be used to restore the edge NAT service to a previous state in time.
            */
        getNatCheckpoints(): Promise<Array<Checkpoint>>;
        /**
            * Get a NAT checkpoint by edge uuid and checkpoint.
            * @param {string} checkpointUuid
            * @returns {Promise<Checkpoint>}
            * @description The actual NAT config of the checkpoint will be included in the return.
            */
        getNatCheckpoint(checkpointUuid: string): Promise<Checkpoint>;
        /**
            * Export an Edge NAT configuration file that can be imported/applied to other edges.
            * @param {string} filename
            * @returns {Observable<string>}
            */
        getExportNatHref(filename?: string): Observable<string>;
        /**
            * Gets SSL VPN configuration details for an edge gateway.
            * @returns {Promise<EdgeSslVpnServiceJson>}
            */
        getSslVpn(): Promise<EdgeSslVpnService>;
        /**
            * Gets static routing details for a VCD edge.
            * @returns {Promise<StaticRouting>}
            */
        getStaticRouting(): Promise<StaticRouting>;
        /**
            * Gets statistics data for a VCD edge gateway.
            * @param {PerfGroupType} group
            * @param {string} name
            * @param {PerfStatsType} type
            * @param {number} start
            * @param {number} end
            * @returns {Promise<NetworkPerfSampleSerie>}
            */
        getPerformance(group: PerfGroupType, name: string, type: PerfStatsType, start?: number, end?: number): Promise<NetworkPerfSampleSerie>;
        /**
            *  Update the static routing service.
            * @param {StaticRouting} request
            * @returns {Promise<Task>}
            */
        updateStaticRouting(request: StaticRoutingUpdateRequest): Promise<Task>;
        /**
            * Update the DHCP service.
            * @param {DhcpServiceUpdateRequest} request
            * @returns {Promise<Task>}
            */
        updateDHCP(request: DhcpServiceUpdateRequest): Promise<Task>;
        /**
            * Restore firewall from checkpoint.
            * @param {string} checkpointUuid
            * @returns {Promise<Task>}
            */
        restoreFirewallFromCheckpoint(checkpointUuid: string): Promise<Task>;
        /**
            * Restore NAT service from checkpoint.
            * @param {string} checkpointUuid
            * @returns {Promise<Task>}
            */
        restoreNATFromCheckpoint(checkpointUuid: string): Promise<Task>;
        /**
            * Update the edge firewall.
            * @deprecated This method is deprecated, use updateEdgeGatewayFirewall() instead
            * @param {EdgeFirewallUpdateRequest} firewall
            * @returns {Promise<Task>}
            */
        updateFirewall(firewall: EdgeFirewallUpdateRequest): Promise<Task>;
        /**
            * Update the edge gateway firewall.
            * @param {EdgeGatewayFirewallUpdateRequest} firewall update request
            * @returns {Promise<Task>}
            */
        updateEdgeGatewayFirewall(firewallUpdateRequest: EdgeGatewayFirewallUpdateRequest): Promise<EdgeGatewayFirewall>;
        /**
            * Update the edge interface.
            * @param {EdgeInterface} request
            * @returns {Promise<Task>}
            */
        updateInterface(request: EdgeInterfaceUpdateRequest): Promise<Task>;
        /**
            * Updates the NAT service for a VCD edge gateway.
            * @param {NATServiceUpdateRequest} request NAT service update request
            * @returns {Promise<Task>} promise Promise that resoves with a task
            */
        updateNAT(request: NATServiceUpdateRequest): Promise<Task>;
        /**
            * Update the load balancer service.
            * @param {LoadBalancerServiceUpdateRequest} request
            * @returns {Promise<Task>}
            */
        updateLoadBalancer(request: LoadBalancerServiceUpdateRequest): Promise<Task>;
        /**
            * Update the edge ip sec vpn service.
            * @param {EdgeIpSecVpnServiceUpdateRequest}
            * @returns {Promise<EdgeIpsecVpnService>>}
            */
        updateIpSecVpn(ipSecVpnService: EdgeIpSecVpnServiceUpdateRequest): Promise<IpsecVpn>;
        /**
            * Updates authentication configuration of SSL VPN for an edge gateway.
            * @param {EdgeSslVpnAuthenticationUpdateRequest} request
            * @returns {Promise<EdgeSslVpnAuthentication>}
            */
        updateSslVpnAuthentication(request: EdgeSslVpnAuthenticationUpdateRequest): Promise<EdgeSslVpnAuthentication>;
        /**
            * Updates client install package configuration of SSL VPN for an edge gateway.
            * @param {Array<EdgeSslVpnClientInstallPackageUpdateRequest>} requests
            * @returns {Promise<Array<EdgeSslVpnClientInstallPackage>>}
            */
        updateSslVpnClientInstallPackages(requests: Array<EdgeSslVpnClientInstallPackageUpdateRequest>): Promise<Array<EdgeSslVpnClientInstallPackage>>;
        /**
            * Updates the SSL VPN IP pools for an edge gateway.
            * @param {Array<EdgeSslVpnIpPoolUpdateRequest>} requests
            * @returns {Promise<Array<EdgeSslVpnIpPool>>}
            */
        updateSslVpnIpPools(requests: Array<EdgeSslVpnIpPoolUpdateRequest>): Promise<Array<EdgeSslVpnIpPool>>;
        /**
            * Updates list of private networks that are reachable through an SSL VPN for an edge gateway.
            * @param {Array<EdgeSslVpnPrivateNetworkUpdateRequest>} requests
            * @returns {Promise<Array<EdgeSslVpnPrivateNetwork>>}
            */
        updateSslVpnPrivateNetworks(requests: Array<EdgeSslVpnPrivateNetworkUpdateRequest>): Promise<Array<EdgeSslVpnPrivateNetwork>>;
        /**
            * Updates SSL VPN configuration for an edge gateway.
            * @param {EdgeSslVpnServerConfigUpdateRequest} request
            * @returns {Promise<any>}
            */
        updateSslVpnServerConfig(request: EdgeSslVpnServerConfigUpdateRequest): Promise<any>;
        /**
            * Updates SSL VPN server settings for an edge gateway.
            * @param {EdgeSslVpnServiceUpdateRequest} serverSettings
            * @returns {Promise<EdgeSslVpnService>}
            */
        updateSslVpnServerSettings(serverSettings: EdgeSslVpnServiceUpdateRequest): Promise<EdgeSslVpnService>;
        /**
            * Updates an edge SSL VPN user.
            * @param {string} userId
            * @param {EdgeSslVpnUserUpdateRequest} request
            * @returns {Promise<EdgeSslVpnUser>}
            */
        updateSslVpnUser(userId: string, request: EdgeSslVpnUserUpdateRequest): Promise<EdgeSslVpnUser>;
        /**
            * Get the Edge firewall configuration.
            * @returns {Promise<FirewallConfiguration>}
            */
        getFirewallConfiguration(): Promise<FirewallConfiguration>;
        /**
            * Import an edge firewall from a configuration.
            * @param {FirewallConfiguration} firewall
            * @returns {Promise<Task>}
            */
        importFirewallConfiguration(firewall: FirewallConfiguration): Promise<Task>;
        /**
            * Gets IpSec VPN Service configuration for an edge.
            * @returns {Promise<IpsecVpnConfiguration>}
            */
        getIpsecVpnConfiguration(): Promise<IpsecVpnConfiguration>;
        /**
            * Import an Ipsec VPN service configuration.
            * @param {IpsecVpnConfiguration} vpn
            * @returns {Promise<Task>}
            */
        importIpSecVpnConfiguration(vpn: IpsecVpnConfiguration): Promise<Task>;
        /**
            * Gets the NAT service configuration for a VCD edge gateway.
            * @returns {Promise<NatServiceConfiguration>}
            */
        getNatConfiguration(): Promise<NatServiceConfiguration>;
        /**
            * Import a NAT service configuration.
            * @param {NatServiceConfiguration} nat
            * @returns {Promise<Task>}
            */
        importNATConfiguration(nat: NatServiceConfiguration): Promise<Task>;
        /**
            * Get the list of firewall source types
            * @returns {Promise<Array<EdgeGatewayFirewallObjectType>>}
            */
        getFirewallSourceTypes(): Promise<Array<EdgeGatewayFirewallObjectType>>;
        /**
            * Get the edge firewall source objects of the specified type.
            * If the specified page number is larger than number of actual pages, the response will return as an empty list.
            * @param {string | EdgeGatewayFirewallObjectType} type Type.
            * Valid types can be retrieved from the getFirewallSourceTypes() endpoint
            * @param {number | EdgeGatewayFirewallObjectPagingParams} pageOrPagingParams The page number or paging params.
            * The index of the first page is 1. (Default: 1)
            * @param {number} pageSize The page size (Optional). (Default 25)
            * @returns {Promise<EdgeGatewayFirewallObjectList>}
            */
        getFirewallSourceObjects(type: string | EdgeGatewayFirewallObjectType, pageOrPagingParams: number | EdgeGatewayFirewallObjectPagingParams, pageSize?: number): Promise<EdgeGatewayFirewallObjectList>;
        getFirewallDestinationTypes(): Promise<Array<EdgeGatewayFirewallObjectType>>;
        /**
            * Get the edge firewall destination objects of the specified type.
            * If the specified page number is larger than number of actual pages, the response will return as an empty list.
            * @param {string | EdgeGatewayFirewallObjectType} type Type.
            * Valid types can be retrieved from the getFirewallSourceTypes() endpoint
            * @param {number | EdgeGatewayFirewallObjectPagingParams} pageOrPagingParams The page number or paging params.
            * The index of the first page is 1. (Default: 1)
            * @param {number} pageSize The page size (Optional). (Default 25)
            * @returns {Promise<EdgeGatewayFirewallObjectList>}
            */
        getFirewallDestinationObjects(type: string | EdgeGatewayFirewallObjectType, pageOrPagingParams: number | EdgeGatewayFirewallObjectPagingParams, pageSize?: number): Promise<EdgeGatewayFirewallObjectList>;
        /**
            * Retrieves name/ID mappings for all source and destination objects that are assigned to current firewall rules.
            * @returns {Promise<Array<NameId>>}
            */
        getFirewallRulesInformation(): Promise<Array<NameId>>;
        /**
            * Get the NAT configuration for current edge gateway.
            * @returns {Promise<EdgeGatewayNat>} promise Promise that resolves with the NAT configuration object
            */
        getEdgeGatewayNAT(): Promise<EdgeGatewayNat>;
        /**
            * Update the NAT configuration for current edge gateway.
            * @param {EdgeGatewayNatUpdateRequest} natUpdateRequest The update request
            * @returns {Promise<EdgeGatewayNat>} promise Promise that resolves with the updated NAT configuration object
            */
        updateEdgeGatewayNAT(natUpdateRequest: EdgeGatewayNatUpdateRequest): Promise<EdgeGatewayNat>;
        /**
            * Retrieve the edge gateway's VNICs.
            * @returns {Promise<Array<EdgeGatewayVNIC>>} promise Promise that resolves with the array of edge VNICs
            */
        getEdgeGatewayVNICs(): Promise<Array<EdgeGatewayVNIC>>;
        /**
            * Get the DHCP configuration for an edge gateway.
            * @returns {Promise<EdgeGatewayDhcp>} promise Promise that resolves with the DHCP configuration object.
            */
        getEdgeGatewayDhcp(): Promise<EdgeGatewayDhcp>;
        /**
            * Update the DHCP configuration for an edge gateway.
            * @param {EdgeGatewayDhcpUpdateRequest} edgeGatewayDhcpUpdateRequest DHCP update request
            * @returns {Promise<EdgeGatewayDhcp>} promise Promise that resolves with the updated DHCP configuration object.
            */
        updateEdgeGatewayDhcp(edgeGatewayDhcpUpdateRequest: EdgeGatewayDhcpUpdateRequest): Promise<EdgeGatewayDhcp>;
        /**
            * Get the DHCP relay types for an edge gateway.
            * @returns {Promise<Array<EdgeGatewayDhcpRelayType>>}
            */
        getEdgeGatewayDhcpRelayTypes(): Promise<Array<EdgeGatewayDhcpRelayType>>;
        /**
            * Get the DHCP relay type options for a edge gateway's relay type.
            * @param {string | EdgeGatewayDhcpRelayType} type Type name or EdgeGatewayDhcpRelayType object retrieved from API.
            * Valid types can be retrieved from the getEdgeGatewayDhcpRelayTypes() endpoint
            * @param {number | EdgeGatewayDhcpRelayTypeOptionPagingParams} pageOrPagingParams The page number or paging params.
            * The index of the first page is 1. (Default: 1)
            * @param {number} pageSize Page size
            * The page size (Optional). (Default 25)
            * @returns {Promise<EdgeGatewayDhcpRelayTypeOptionList>}
            */
        getEdgeGatewayDhcpRelayOptions(type: string | EdgeGatewayDhcpRelayType, pageOrPagingParams?: number | EdgeGatewayDhcpRelayTypeOptionPagingParams, pageSize?: number): Promise<EdgeGatewayDhcpRelayTypeOptionList>;
        /**
            * Retrieve the edge gateway's firewall restore points.
            * @returns {Promise<Array<FirewallRestorePoint>>} promise Promise that resolves with the list of restore points
            */
        getFirewallRestorePoints(): Promise<Array<FirewallRestorePoint>>;
        /**
            * Retrieve the details for a particular edge gateway firewall restore point.
            * @returns {Promise<FirewallRestorePointDetails>} promise Promise that resolves with the restore point details
            */
        getFirewallRestorePointDetails(restorePointTime: Date): Promise<FirewallRestorePointDetails>;
        /**
            * Restores the edge gateway's firewall to a specified restore point time.
            * @param request {RestoreFirewallRequest} the request body
            * @returns {Promise<EdgeGatewayFirewall>} promise Promise that resolves with the updated firewall config
            */
        restoreFirewall(request: RestoreFirewallRequest): Promise<EdgeGatewayFirewall>;
        /**
            * Retrieve the edge gateway's NAT restore points.
            * @returns {Promise<Array<NATRestorePoint>>} promise Promise that resolves with the list of restore points
            */
        getNATRestorePoints(): Promise<Array<NATRestorePoint>>;
        /**
            * Retrieve the details for a particular edge gateway NAT restore point.
            * @returns {Promise<NATRestorePointDetails>} promise Promise that resolves with the restore point details
            */
        getNATRestorePointDetails(restorePointTime: Date): Promise<NATRestorePointDetails>;
        /**
            * Restores the edge gateway's NAT config to a specified restore point time.
            * @param request {RestoreNATRequest} the request body
            * @returns {Promise<EdgeGatewayNat>} promise Promise that resolves with the updated NAT config
            */
        restoreNAT(request: RestoreNATRequest): Promise<EdgeGatewayNat>;
        /**
            * Get the L2 VPN for an edge gateway.
            * @param {boolean} showSensitiveData Show sensitive data
            * @returns {Promise<EdgeGatewayL2Vpn>} promise Promise that resolves with the Edge L2 VPN Configuration
            */
        getEdgeGatewayL2VPN(showSensitiveData?: boolean): Promise<EdgeGatewayL2Vpn>;
        /**
            * Update the L2 VPN for an edge gateway.
            * @param {EdgeGatewayL2VpnUpdateRequest} edgeGatewayL2VPNUpdateRequest
            * @returns {Promise<EdgeGatewayL2Vpn>}
            */
        updateEdgeGatewayL2VPN(edgeGatewayL2VPNUpdateRequest: EdgeGatewayL2VpnUpdateRequest): Promise<EdgeGatewayL2Vpn>;
        /**
            * Retrieve the edge gateway's routing.
            * @returns {Promise<EdgeGatewayRouting>}
            */
        getEdgeGatewayRouting(): Promise<EdgeGatewayRouting>;
        /**
            * Update the edge gateway's routing.
            * @param {EdgeGatewayRoutingUpdateRequest} edgeGatewayRoutingUpdateRequest
            * @returns {Promise<EdgeGatewayRouting>}
            */
        updateEdgeGatewayRouting(edgeGatewayRoutingUpdateRequest: EdgeGatewayRoutingUpdateRequest): Promise<EdgeGatewayRouting>;
        /**
            * Update the edge gateway's routing BGP configuration.
            * @param {RoutingBGPConfigUpdateRequest} edgeGatewayRoutingBGPConfigUpdateRequest
            * @returns {Promise<RoutingBGPConfig>}
            */
        updateEdgeGatewayRoutingBGPConfig(edgeGatewayRoutingBGPConfigUpdateRequest: RoutingBGPConfigUpdateRequest): Promise<RoutingBGPConfig>;
        /**
            * Update the edge gateway's routing global configuration.
            * @param {RoutingGlobalConfigUpdateRequest} edgeGatewayRoutingGlobalConfigUpdateRequest
            * @returns {Promise<RoutingGlobalConfig>}
            */
        updateEdgeGatewayRoutingGlobalConfig(edgeGatewayRoutingGlobalConfigUpdateRequest: RoutingGlobalConfigUpdateRequest): Promise<RoutingGlobalConfig>;
        /**
            * Update the edge gateway's routing OSPF configuration.
            * @param {RoutingOSPFConfigUpdateRequest} edgeGatewayRoutingOSPFConfigUpdateRequest
            * @returns {Promise<RoutingOSPFConfig>}
            */
        updateEdgeGatewayRoutingOSPFConfig(edgeGatewayRoutingOSPFConfigUpdateRequest: RoutingOSPFConfigUpdateRequest): Promise<RoutingOSPFConfig>;
        /**
            * Update the edge gateway's routing static configuration.
            * @param {RoutingStaticConfigUpdateRequest} edgeGatewayRoutingStaticConfigUpdateRequest
            * @returns {Promise<RoutingStaticConfig>}
            */
        updateEdgeGatewayRoutingStaticConfig(edgeGatewayRoutingStaticConfigUpdateRequest: RoutingStaticConfigUpdateRequest): Promise<RoutingStaticConfig>;
        /**
            * Get the list of certificates for an edge gateway.
            * @returns {Promise<Array<Certificate>>}
            */
        getCertificates(): Promise<Array<Certificate>>;
        /**
            * Create a certificate for an edge gateway.
            * @param {CertificateCreateRequest} createRequest Certificate create request object.
            * @returns {Promise<Certificate>} promise Resolves with the certificate created.
            */
        createCertificate(createRequest: CertificateCreateRequest): Promise<Certificate>;
        /**
            * Import a certificate or a certificate chain against a certificate signing request.
            * @param {string} csrId Csr ID (e.g. csr-25).
            * @param {CertificateCreateRequest} importRequest Certificate import request.
            * @returns {Promise<Certificate>} promise Resolves with the certificate created.
            */
        createSignedCertificate(csrId: string, importRequest: CertificateCreateRequest): Promise<Certificate>;
        /**
            * Delete a certificate from an edge gateway.
            * @param {string} certificateId Cetrificate ID
            * @returns {Promise<void>} promise Resolves with void when certificate is deleted.
            */
        deleteCertificate(certificateId: string): Promise<void>;
        /**
            * Get the list of certificate signing requests (CSR) for an edge gateway.
            * @returns {Promise<Array<CSR>>} promise Resolves with the list of CSR.
            */
        getCSRs(): Promise<Array<CSR>>;
        /**
            * Create a certificate signing request (CSR) for an edge gateway.
            * @param {CSRCreateRequest} csrCreateRequest CSR create request.
            * @returns {Promise<CSR>} promise Resolves with the CSR created.
            */
        createCSR(csrCreateRequest: CSRCreateRequest): Promise<CSR>;
        /**
            * Delete a certificate signing request (CSR) from an edge gateway.
            * @param {string} csrId Csr ID (e.g. csr-25).
            * @returns {Promise<void>} promise Resolves with void when CSR is deleted.
            */
        deleteCSR(csrId: string): Promise<void>;
        /**
            * Create a self-signed certificate on an edge gateway.
            * @param {string} csrId Csr ID (e.g. csr-25).
            * @param {SelfSignCertificateRequest} selfSignCertificateRequest The self sign certificate request.
            * @returns {Promise<Certificate>} promise Resolves with self sign certificate created.
            */
        createSelfSignedCertificate(csrId: string, selfSignCertificateRequest: SelfSignCertificateRequest): Promise<Certificate>;
        /**
            * Get the list of certificate revocation lists (CRLs) for an edge gateway.
            * @returns {Promise<Array<CRL>>} promise Promise that resolves with the list of CRLs.
            */
        getCRLs(): Promise<Array<CRL>>;
        /**
            * Create a certificate revocation list (CRL) for an edge gateway.
            * @param {CertificateCreateRequest} crlCreateRequest
            * @returns {Promise<CRL>} Resolves with the CRL created.
            */
        createCRL(crlCreateRequest: CertificateCreateRequest): Promise<CRL>;
        /**
            * Delete a certificate revocation list (CRL) from an edge gateway.
            * @param {string} crlId The CRL id (e.g. crl-25)
            * @returns {Promise<void>} promise Resolves with void when CRL is deleted.
            */
        deleteCRL(crlId: string): Promise<void>;
        /**
            * Get the IPsec VPN configuration for current Edge.
            * @param {boolean} showSensitiveData Show sensitive data.
            * @returns {Promise<EdgeGatewayIPsec>} promise Promise that resolves with the edge gateway IPsec VPN configuration.
            */
        getEdgeGatewayIPsec(showSensitiveData?: boolean): Promise<EdgeGatewayIPsec>;
        /**
            * Update the IPsec VPN configuration for current Edge.
            * @param {EdgeGatewayIPsecUpdateRequest} edgeGatewayIpsecUpdateRequest
            * @returns {Promise<EdgeGatewayIPsec>} promise Promise that resolves with the updated IPsec VPN configuration.
            */
        updateEdgeGatewayIPsec(edgeGatewayIpsecUpdateRequest: EdgeGatewayIPsecUpdateRequest): Promise<EdgeGatewayIPsec>;
        /**
            * Get the Syslog settings for current edge gateway.
            * @returns {Promise<EdgeGatewaySyslog>} promise Promise that resolves with Syslog configuration.
            */
        getEdgeGatewaySyslog(): Promise<EdgeGatewaySyslog>;
        /**
            * Update the Syslog settings for current edge gateway.
            * @param {EdgeGatewaySyslogUpdateRequest} updateRequest Syslog update request
            * @returns {Promise<EdgeGatewaySyslog>} promise Promise that resolves with updated Syslog configuration.
            */
        updateEdgeGatewaySyslog(updateRequest: EdgeGatewaySyslogUpdateRequest): Promise<EdgeGatewaySyslog>;
        /**
            * Get the SSH Settings for current edge gateway.
            * @returns {Promise<EdgeGatewaySSHSettings>} promise Promise that resolves with SSH Settings.
            */
        getEdgeGatewaySSHSettings(): Promise<EdgeGatewaySSHSettings>;
        /**
            * Update the SSH Settings for current edge gateway.
            * @param {EdgeGatewaySSHSettingsUpdateRequest} updateRequest SSH settings update request
            * @returns {Promise<EdgeGatewaySSHSettings>} promise Promise that resolves with updated SSH settings.
            */
        updateEdgeGatewaySSHSettings(updateRequest: EdgeGatewaySSHSettingsUpdateRequest): Promise<EdgeGatewaySSHSettings>;
        /**
            * Get the SSL VPN configuration for current edge gateway.
            * @returns {Promise<EdgeGatewaySslVpn>} promise Promise that resolves with SSL VPN configuration object.
            */
        getEdgeGatewaySslVpn(): Promise<EdgeGatewaySslVpn>;
        /**
            * Update the SSL VPN configuration for current edge gateway.
            * @param {EdgeGatewaySSLVPNUpdateRequest} edgeGatewaySSLVPNUpdateRequest SSL VPN update request.
            * @returns {Promise<EdgeGatewaySSLVPN>} promise Promise that resolves with the updated SSL VPN configuration object.
            */
        updateEdgeGatewaySslVpn(edgeGatewaySslVpnUpdateRequest: EdgeGatewaySslVpnUpdateRequest): Promise<EdgeGatewaySslVpn>;
        /**
            * Get the SSL VPN Statistics for current edge gateway.
            * @returns {Promise<EdgeGatewaySslVpn>} promise Promise that resolves with SSL VPN configuration object.
            */
        getEdgeGatewayL2VpnStatistics(): Promise<EdgeGatewayL2vpnStatistics>;
}
/**
    * Edge status enumeration.
    */
export type EdgeStatus = 'UP' | 'DOWN';

/**
  * Edge Firewall Config JSON interface.
  */
export interface EdgeFirewallConfigJson {
    version: number;
    edge_uuid: string | null;
    log: boolean;
    enabled: boolean;
    default_action: string | null;
    rules: Array<FirewallRuleJson> | null;
}

/**
  * Interface for Edge firewall service.
  */
export interface EdgeFirewallJson {
    edge_uuid: string | null;
    log: boolean;
    enabled: boolean;
    default_action: string | null;
    rules: Array<FirewallRuleJson> | null;
}

/**
  * Interface for Edge firewall log.
  */
export interface EdgeFirewallLogJson {
    edge_uuid: string | null;
    time: number | null;
    dest_port: number | null;
    count: number;
    dest_ip: string | null;
    action: string | null;
    source_ip: string | null;
    protocol: string | null;
}

export type EdgeFirewallLogType = 'action_source' | 'destination_port' | 'destination_port_and_protocol';

/**
  * Edge Firewall Rule Update Request JSON
  */
export interface EdgeFirewallRuleUpdateRequestJson {
    description: string;
    destination_ip: string;
    destination_port_range: string;
    direction: string;
    icmp_sub_type: string;
    id: string;
    policy: string;
    port: number;
    protocols: Array<string>;
    source_ip: string;
    source_port: number;
    source_port_range: string;
    logging_enabled: boolean;
    enabled: boolean;
    match_on_translate: boolean;
    idx: number;
}

/**
  * Edge Firewall Update Request JSON representation.
  */
export interface EdgeFirewallUpdateRequestJson {
    edge_uuid: string;
    log: boolean;
    enabled: boolean;
    default_action: string;
    rules: Array<EdgeFirewallRuleUpdateRequestJson>;
}

/**
  * Interface for Edge firewall rule.
  */
export interface FirewallRuleJson {
    description: string | null;
    destination_ip: string | null;
    destination_port_range: string | null;
    direction: string | null;
    icmp_sub_type: string | null;
    id: string | null;
    policy: string | null;
    port: number;
    protocol: Array<string> | null;
    source_ip: string | null;
    source_port: number;
    source_port_range: string | null;
    logging: boolean;
    enabled: boolean;
    match_on_translate: boolean;
    idx: number;
}

/**
    * Edge Firewall Rule Update Request
    */
export class EdgeFirewallRuleUpdateRequest {
        constructor(edgeFirewallRuleUpdateRequest: EdgeFirewallRuleUpdateRequest);
        constructor(edgeFirewallRuleUpdateRequestJson: EdgeFirewallRuleUpdateRequestJson);
        constructor(description: string, destinationIp: string, destinationPortRange: string, direction: string, icmpSubType: string, id: string, policy: string, port: number, protocols: Array<string>, sourceIp: string, sourcePort: number, sourcePortRange: string, loggingEnabled: boolean, enabled: boolean, matchOnTranslate: boolean, idx: number);
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get destination ip.
            * @returns {string}
            */
        get destinationIp(): string;
        /**
            * Get destination port range.
            * @returns {string}
            */
        get destinationPortRange(): string;
        /**
            * Get direction.
            * @returns {string}
            */
        get direction(): string;
        /**
            * Get icmp sub type.
            * @returns {string}
            */
        get icmpSubType(): string;
        /**
            * Get id.
            * @returns {string}
            */
        get id(): string;
        /**
            * Get policy.
            * @returns {string}
            */
        get policy(): string;
        /**
            * Get port.
            * @returns {number}
            */
        get port(): number;
        /**
            * Get protocols.
            * @returns {Array<string>}
            */
        get protocols(): Array<string>;
        /**
            * Get source ip.
            * @returns {string}
            */
        get sourceIp(): string;
        /**
            * Get source port.
            * @returns {number}
            */
        get sourcePort(): number;
        /**
            * Get source port range.
            * @returns {string}
            */
        get sourcePortRange(): string;
        /**
            * Get logging enabled.
            * @returns {boolean}
            */
        get loggingEnabled(): boolean;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get match on translate.
            * @returns {boolean}
            */
        get matchOnTranslate(): boolean;
        /**
            * Get idx.
            * @returns {number}
            */
        get idx(): number;
        /**
            * Get the json representation of this class.
            * @returns {EdgeFirewallRuleUpdateRequestJson}
            */
        get json(): EdgeFirewallRuleUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Edge Firewall Update Request.
    */
export class EdgeFirewallUpdateRequest {
        constructor(edgeFirewallUpdateRequest: EdgeFirewallUpdateRequest);
        constructor(edgeFirewallUpdateRequestJson: EdgeFirewallUpdateRequestJson);
        constructor(edgeUuid: string, log: boolean, enabled: boolean, defaultAction: string, rules: Array<EdgeFirewallRuleUpdateRequestJson>);
        /**
            * Get edge uuid.
            * @returns {string}
            */
        get edgeUuid(): string;
        /**
            * Get log.
            * @returns {boolean}
            */
        get log(): boolean;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get default action.
            * @returns {string}
            */
        get defaultAction(): string;
        /**
            * Get rules.
            * @returns {Array<EdgeFirewallRuleUpdateRequestJson>}
            */
        get rules(): Array<EdgeFirewallRuleUpdateRequestJson>;
        /**
            * Get the json representation of this class.
            * @returns {EdgeFirewallUpdateRequestJson}
            */
        get json(): EdgeFirewallUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Firewall Configuration class.
    */
export class FirewallConfiguration {
        constructor(_json: EdgeFirewallConfigJson);
        /**
            * Get the version.
            * @returns {number}
            */
        get version(): number;
        /**
            * Get edge uuid.
            * @returns {string | null}
            */
        get edgeUuid(): string | null;
        /**
            * Check weather the Firewall has logging enabled or not.
            * @returns {boolean}
            */
        get log(): boolean;
        /**
            * Check weather the Firewall is enabled or not.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get default action.
            * @returns {string | null}
            */
        get defaultAction(): string | null;
        /**
            * Get a list of firewall rules.
            * @returns {Array<FirewallRule>}
            */
        get rules(): Array<FirewallRule>;
        /**
            * Get the __json__ representation of this class.
            * @returns {EdgeFirewallConfigJson}
            */
        get json(): EdgeFirewallConfigJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * FirewallLog class
    */
export class FirewallLog {
        constructor(_json: EdgeFirewallLogJson);
        /**
            * Get edge uuid.
            * @returns {string | null}
            */
        get edgeUuid(): string | null;
        /**
            * Get time.
            * @returns {Date | null}
            */
        get time(): Date | null;
        /**
            * Get destination port.
            * @returns {number | null}
            */
        get destPort(): number | null;
        /**
            * Get count
            * @returns {number}
            */
        get count(): number;
        /**
            * Get destination IP.
            * @returns {string | null}
            */
        get destIp(): string | null;
        /**
            * Get action
            * @returns {string | null}
            */
        get action(): string | null;
        /**
            * Get source IP.
            * @returns {string | null}
            */
        get sourceIp(): string | null;
        /**
            * Get protocol
            * @returns {string | null}
            */
        get protocol(): string | null;
        /**
            * Get the __json__ representation of this class.
            * @returns {EdgeFirewallLogJson}
            */
        get json(): EdgeFirewallLogJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * FirewallRule class
    */
export class FirewallRule {
        constructor(_json: FirewallRuleJson);
        /**
            * Get description
            * @returns {string | null}
            */
        get description(): string | null;
        /**
            * Get destination IPq
            * @returns {string | null}
            */
        get destinationIp(): string | null;
        /**
            * Get destination port range.
            * @returns {string | null}
            */
        get destinationPortRange(): string | null;
        /**
            * Get direction.
            * @returns {string | null}
            */
        get direction(): string | null;
        /**
            * Get ICMP sub type.
            * @returns {string | null}
            */
        get icmpSubType(): string | null;
        /**
            * Get ID.
            * @returns {string | null}
            */
        get id(): string | null;
        /**
            * Get policy
            * @returns {string | null}
            */
        get policy(): string | null;
        /**
            * Get port
            * @returns {number}
            */
        get port(): number;
        /**
            * Get Protocol.
            * @returns {Array<string>}
            */
        get protocol(): Array<string>;
        /**
            * Get source IP
            * @returns {string | null}
            */
        get sourceIp(): string | null;
        /**
            * Get source port.
            * @returns {number}
            */
        get sourcePort(): number;
        /**
            * Get source port range
            * @returns {string | null}
            */
        get sourcePortRange(): string | null;
        /**
            * Check weather this FirewallRule has logging activated or not.
            * @returns {boolean}
            */
        get logging(): boolean;
        /**
            * Check weather this FirewallRule is enabled or not.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Check weather this FirewallRule match on translate or not.
            * @returns {boolean}
            */
        get matchOnTranslate(): boolean;
        /**
            * Get index
            * @returns {number}
            */
        get idx(): number;
        /**
            * Get the __json__ representation of this class.
            * @returns {FirewallRuleJson}
            */
        get json(): FirewallRuleJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Firewall class
    */
export class Firewall {
        constructor(_json: EdgeFirewallJson);
        /**
            * Get edge uuid.
            * @returns {string | null}
            */
        get edgeUuid(): string | null;
        /**
            * Check weather the Firewall has logging enabled or not.
            * @returns {boolean}
            */
        get log(): boolean;
        /**
            * Check weather the Firewall is enabled or not.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get default action.
            * @returns {string | null}
            */
        get defaultAction(): string | null;
        /**
            * Get a list of firewall rules.
            * @returns {Array<FirewallRule>}
            */
        get rules(): Array<FirewallRule>;
        /**
            * Get the __json__ representation of this class.
            * @returns {EdgeFirewallJson}
            */
        get json(): EdgeFirewallJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export interface GatewayNatRuleJson {
    description: string | null;
    id: number;
    rule_type: string;
    enabled: boolean;
    icmp_sub_type: string | null;
    original_ip: string;
    original_port: string | null;
    protocol: string | null;
    translated_ip: string;
    translated_port: string | null;
    interface_name: string;
    rule_index: number;
}

/**
    * GatewayNatRule class
    */
export class GatewayNatRule {
        constructor(_json: GatewayNatRuleJson);
        /**
            * Get description.
            * @returns {string | null}
            */
        get description(): string | null;
        /**
            * Get id.
            * @returns {number}
            */
        get id(): number;
        /**
            * Get rule type.
            * @returns {string}
            */
        get ruleType(): string;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get icmp sub type.
            * @returns {string | null}
            */
        get icmpSubType(): string | null;
        /**
            * Get original ip.
            * @returns {string}
            */
        get originalIp(): string;
        /**
            * Get original port.
            * @returns {string | null}
            */
        get originalPort(): string | null;
        /**
            * Get protocol.
            * @returns {string | null}
            */
        get protocol(): string | null;
        /**
            * Get translated ip.
            * @returns {string}
            */
        get translatedIp(): string;
        /**
            * Get translated port.
            * @returns {string | null}
            */
        get translatedPort(): string | null;
        /**
            * Get interface name.
            * @returns {string}
            */
        get interfaceName(): string;
        /**
            * Get rule index.
            * @returns {number}
            */
        get ruleIndex(): number;
        /**
            * Get the json representation of this class.
            * @returns {GatewayNatRuleJson}
            */
        get json(): GatewayNatRuleJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
  * Authentication Mode
  */
export type AuthenticationMode = 'PSK' | 'CERTIFICATE';

/**
  * DH Group
  */
export type DHGroup = 'DH2' | 'DH5' | 'DH14';

/**
  * Edge Ip Sec Vpn Service Update Request JSON interface.
  */
export interface EdgeIpSecVpnServiceUpdateRequestJson {
    enabled: boolean;
    logging_settings: LoggingSettingsRequestJson;
    global_settings: GlobalSettingsRequestJson;
    sites: Array<IpSecVpnSiteRequestJson>;
}

/**
  * Edge Ip Sec Vpn Service Config JSON interface.
  */
export interface EdgeIpsecVpnServiceConfigJson {
    version: number;
    edge_uuid: string;
    enabled: boolean | null;
    endpoints: Array<EdgeIpSecVpnEndpointJson> | null;
    tunnels: Array<EdgeIpSecVpnTunnelJson> | null;
}

/**
  * Edge Ip Sec Vpn Endpoint JSON interface.
  */
export interface EdgeIpSecVpnEndpointJson {
    public_ip: string | null;
    network: string | null;
}

/**
  * Edge Ip Sec Vpn Service JSON interface.
  */
export interface EdgeIpsecVpnServiceJson {
    edge_uuid: string;
    enabled: boolean | null;
    logging_settings: LoggingSettingsJson;
    global_settings: GlobalSettingsJson;
    sites: Array<IpSecVpnSiteJson>;
}

/**
  * Edge Ip Sec Vpn Peer JSON interface.
  */
export interface EdgeIpSecVpnPeerJson {
    type: string | null;
    id: string | null;
    name: string | null;
    vcd_url: string | null;
    vcd_org: string | null;
    vcd_username: string | null;
}

/**
  * Edge Ip Sec Vpn Subnet JSON interface.
  */
export interface EdgeIpSecVpnSubnetJson {
    name: string | null;
    gateway: string | null;
    netmask: string | null;
}

/**
  * Edge Ip Sec Vpn Tunnel JSON interface.
  */
export interface EdgeIpSecVpnTunnelJson {
    name: string | null;
    description: string | null;
    peer_ip_address: string | null;
    peer_id: string | null;
    local_id: string | null;
    local_ip_address: string | null;
    local_subnets: Array<EdgeIpSecVpnSubnetJson> | null;
    peer_subnets: Array<EdgeIpSecVpnSubnetJson> | null;
    shared_secret: string | null;
    shared_secret_encrypted: boolean | null;
    encryption_protocol: string | null;
    mtu: number | null;
    enabled: boolean | null;
    operational: boolean | null;
    error_details: string | null;
    vpn_peer: EdgeIpSecVpnPeerJson | null;
}

/**
  * Encryption Algorithm
  */
export type EncryptionAlgorithm = 'AES' | 'AE256' | 'AES_GCM' | '_3DES';

/**
  * Edge Ip Sec Vpn Global Settings JSON interface.
  */
export interface GlobalSettingsJson {
    psk: string;
    service_certificate: string;
    ca_certificates: Array<string>;
    crl_certificates: Array<string>;
}

/**
  * Global Settings Request JSON Interface.
  */
export interface GlobalSettingsRequestJson {
    psk: string;
    service_certificate: string;
    ca_certificates: Array<string>;
    crl_certificates: Array<string>;
}

/**
  * Edge Ip Sec Vpn Site JSON interface.
  */
export interface IpSecVpnSiteJson {
    enabled: boolean;
    name: string;
    description: string;
    local_id: string;
    local_ip: string;
    peer_id: string;
    peer_ip: string;
    psk: string;
    encryption_algorithm: EncryptionAlgorithm;
    authentication_mode: AuthenticationMode;
    enable_pfs: boolean;
    dh_group: DHGroup;
    local_subnets: Array<string>;
    peer_subnets: Array<string>;
}

/**
  * Ip Sec Vpn Site Request JSON Interface.
  */
export interface IpSecVpnSiteRequestJson {
    enabled: boolean;
    name: string;
    description: string;
    local_id: string;
    local_ip: string;
    peer_id: string;
    peer_ip: string;
    psk: string;
    encryption_algorithm: EncryptionAlgorithm;
    authentication_mode: AuthenticationMode;
    enable_pfs: boolean;
    dh_group: DHGroup;
    local_subnets: Array<string>;
    peer_subnets: Array<string>;
}

/**
  * Edge Ip Sec Vpn Logging Settings JSON interface.
  */
export interface LoggingSettingsJson {
    log_level: string;
    enabled: boolean;
}

/**
  * Logging Settings Request JSON interface.
  */
export interface LoggingSettingsRequestJson {
    log_level: string;
    enabled: boolean;
}

/**
    * Edge Ip Sec Vpn Service Update Request.
    */
export class EdgeIpSecVpnServiceUpdateRequest {
        constructor(edgeIpSecVpnServiceUpdateRequest: EdgeIpSecVpnServiceUpdateRequest);
        constructor(edgeIpSecVpnServiceUpdateRequestJson: EdgeIpSecVpnServiceUpdateRequestJson);
        constructor(enabled: boolean, loggingSettings: LoggingSettingsRequestJson, globalSettings: GlobalSettingsRequestJson, sites: Array<IpSecVpnSiteRequestJson>);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get logging settings.
            * @returns {LoggingSettingsRequest}
            */
        get loggingSettings(): LoggingSettingsRequest;
        /**
            * Get global settings.
            * @returns {GlobalSettingsRequest}
            */
        get globalSettings(): GlobalSettingsRequest;
        /**
            * Get sites.
            * @returns {Array<IpSecVpnSiteRequest>}
            */
        get sites(): Array<IpSecVpnSiteRequest>;
        /**
            * Get the json representation of this class.
            * @returns {EdgeIpSecVpnServiceUpdateRequestJson}
            */
        get json(): EdgeIpSecVpnServiceUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Global Settings Request.
    */
export class GlobalSettingsRequest {
        constructor(globalSettingsRequest: GlobalSettingsRequest);
        constructor(globalSettingsRequestJson: GlobalSettingsRequestJson);
        constructor(psk: string, serviceCertificate: string, caCertificates: Array<string>, crlCertificates: Array<string>);
        /**
            * Get psk.
            * @returns {string}
            */
        get psk(): string;
        /**
            * Get service certificate.
            * @returns {string}
            */
        get serviceCertificate(): string;
        /**
            * Get ca certificates.
            * @returns {Array<string>}
            */
        get caCertificates(): Array<string>;
        /**
            * Get crl certificates.
            * @returns {Array<string>}
            */
        get crlCertificates(): Array<string>;
        /**
            * Get the json representation of this class.
            * @returns {GlobalSettingsRequestJson}
            */
        get json(): GlobalSettingsRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * IpSecVpnEndpoint class
    */
export class IpSecVpnEndpoint {
        constructor(_json: EdgeIpSecVpnEndpointJson);
        /**
            * Get public IP
            * @returns {string | null}
            */
        get publicIp(): string | null;
        /**
            * Get network
            * @returns {string | null}
            */
        get network(): string | null;
        /**
            * Get the __json__ representation of this class.
            * @returns {EdgeIpSecVpnEndpointJson}
            */
        get json(): EdgeIpSecVpnEndpointJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * IpSecVpnPeer class
    */
export class IpSecVpnPeer {
        constructor(_json: EdgeIpSecVpnPeerJson);
        /**
            * Get type.
            * @returns {string | null}
            */
        get type(): string | null;
        /**
            * Get ID
            * @returns {string | null}
            */
        get id(): string | null;
        /**
            * Get name
            * @returns {string | null}
            */
        get name(): string | null;
        /**
            * Get vdc URL
            * @returns {string | null}
            */
        get vcdUrl(): string | null;
        /**
            * Get vdc Org
            * @returns {string | null}
            */
        get vcdOrg(): string | null;
        /**
            * Get vdc username
            * @returns {string | null}
            */
        get vcdUsername(): string | null;
        /**
            * Get the __json__ representation of this class.
            * @returns {EdgeIpSecVpnPeerJson}
            */
        get json(): EdgeIpSecVpnPeerJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Ip Sec Vpn Site Request.
    */
export class IpSecVpnSiteRequest {
        constructor(ipSecVpnSiteRequest: IpSecVpnSiteRequest);
        constructor(ipSecVpnSiteRequestJson: IpSecVpnSiteRequestJson);
        constructor(enabled: boolean, name: string, description: string, localId: string, localIp: string, peerId: string, peerIp: string, psk: string, encryptionAlgorithm: EncryptionAlgorithm, authenticationMode: AuthenticationMode, enablePfs: boolean, dhGroup: DHGroup, localSubnets: Array<string>, peerSubnets: Array<string>);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get local id.
            * @returns {string}
            */
        get localId(): string;
        /**
            * Get local ip.
            * @returns {string}
            */
        get localIp(): string;
        /**
            * Get peer id.
            * @returns {string}
            */
        get peerId(): string;
        /**
            * Get peer ip.
            * @returns {string}
            */
        get peerIp(): string;
        /**
            * Get psk.
            * @returns {string}
            */
        get psk(): string;
        /**
            * Get encryption algorithm.
            * @returns {EncryptionAlgorithm}
            */
        get encryptionAlgorithm(): EncryptionAlgorithm;
        /**
            * Get authentication mode.
            * @returns {AuthenticationMode}
            */
        get authenticationMode(): AuthenticationMode;
        /**
            * Get enable pfs.
            * @returns {boolean}
            */
        get enablePfs(): boolean;
        /**
            * Get dh group.
            * @returns {DHGroup}
            */
        get dhGroup(): DHGroup;
        /**
            * Get local subnets.
            * @returns {Array<string>}
            */
        get localSubnets(): Array<string>;
        /**
            * Get peer subnets.
            * @returns {Array<string>}
            */
        get peerSubnets(): Array<string>;
        /**
            * Get the json representation of this class.
            * @returns {IpSecVpnSiteRequestJson}
            */
        get json(): IpSecVpnSiteRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class IpSecVpnSite {
        constructor(_json: IpSecVpnSiteJson);
        /**
            * Get name
            * @returns {string | null}
            */
        get name(): string | null;
        /**
            * Get description
            * @returns {string | null}
            */
        get description(): string | null;
        /**
            * Check weather IpSecVpnTunnel is enabled or not.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get local ID
            * @returns {string | null}
            */
        get localId(): string | null;
        /**
            * Get local IP address
            * @returns {string | null}
            */
        get localIp(): string | null;
        /**
            * Get peer ID
            * @returns {string | null}
            */
        get peerId(): string | null;
        /**
            * Get peer IP address
            * @returns {string | null}
            */
        get peerIp(): string | null;
        /**
            * Get vpn's psk
            * @returns {string}
            */
        get psk(): string | null;
        /**
            * Get encryption algorithm
            * @returns {EncryptionAlgorithm}
            */
        get encryptionAlgorithm(): EncryptionAlgorithm;
        /**
            * Get authentication mode
            * @returns {AuthenticationMode}
            */
        get authenticationMode(): AuthenticationMode;
        /**
            * Get enable pfs
            * @returns {boolean}
            */
        get enablePfs(): boolean;
        /**
            * Get DH Group
            * @returns {DHGroup}
            */
        get dhGroup(): DHGroup;
        /**
            * Get local subnets
            * @returns {Array<string>}
            */
        get localSubnets(): Array<string>;
        /**
            * Get peer subnets
            * @returns {Array<string>}
            */
        get peerSubnets(): Array<string>;
        /**
            * Get the __json__ representation of this class.
            * @returns {IpSecVpnSiteJson}
            */
        get json(): IpSecVpnSiteJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * IpSecVpnSubnet class
    */
export class IpSecVpnSubnet {
        constructor(_json: EdgeIpSecVpnSubnetJson);
        /**
            * Get name
            * @returns {string | null}
            */
        get name(): string | null;
        /**
            * Get gateway
            * @returns {string | null}
            */
        get gateway(): string | null;
        /**
            * Get netmask
            * @returns {string | null}
            */
        get netmask(): string | null;
        /**
            * Get the __json__ representation of this class.
            * @returns {EdgeIpSecVpnSubnetJson}
            */
        get json(): EdgeIpSecVpnSubnetJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * IpSecVpnTunnel class
    */
export class IpSecVpnTunnel {
        constructor(_json: EdgeIpSecVpnTunnelJson);
        /**
            * Get name
            * @returns {string | null}
            */
        get name(): string | null;
        /**
            * Get description
            * @returns {string | null}
            */
        get description(): string | null;
        /**
            * Get peer IP address
            * @returns {string | null}
            */
        get peerIpAddress(): string | null;
        /**
            * Get peer ID
            * @returns {string | null}
            */
        get peerId(): string | null;
        /**
            * Get local ID
            * @returns {string | null}
            */
        get localId(): string | null;
        /**
            * Get local IP address
            * @returns {string | null}
            */
        get localIpAddress(): string | null;
        /**
            * Get shared secret
            * @returns {string | null}
            */
        get sharedSecret(): string | null;
        /**
            * Check weather IpSecVpnTunnel shared secret is encrypted or not.
            * @returns {boolean | null}
            */
        get sharedSecretEncrypted(): boolean | null;
        /**
            * Get encryption protocol
            * @returns {string | null}
            */
        get encryptionProtocol(): string | null;
        /**
            * Get mtu
            * @returns {number | null}
            */
        get mtu(): number | null;
        /**
            * Check weather IpSecVpnTunnel is enabled or not.
            * @returns {boolean | null}
            */
        get enabled(): boolean | null;
        /**
            * Check weather IpSecVpnTunnel is operational or not.
            * @returns {boolean | null}
            */
        get operational(): boolean | null;
        /**
            * Get error details
            * @returns {string | null}
            */
        get errorDetails(): string | null;
        /**
            * Get list of localSubnet
            * @returns {Array<IpSecVpnSubnet>}
            */
        get localSubnets(): Array<IpSecVpnSubnet>;
        /**
            * Get list of peerSubnet
            * @returns {Array<IpSecVpnSubnet>}
            */
        get peerSubnets(): Array<IpSecVpnSubnet>;
        /**
            * Get vpn peer
            * @returns {IpSecVpnPeer | null}
            */
        get vpnPeer(): IpSecVpnPeer | null;
        /**
            * Get the __json__ representation of this class.
            * @returns {EdgeIpSecVpnTunnelJson}
            */
        get json(): EdgeIpSecVpnTunnelJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Ipsec Vpn Configuration class.
    */
export class IpsecVpnConfiguration {
        constructor(_json: EdgeIpsecVpnServiceConfigJson);
        /**
            * Get the version.
            * @returns {number}
            */
        get version(): number;
        /**
            * Get edge uuid
            * @returns {string | null}
            */
        get edgeUuid(): string | null;
        /**
            * Check weather IpsecVpn is enabled or not.
            * @returns {boolean | null}
            */
        get enabled(): boolean | null;
        /**
            * Get list of vpn-endpoints
            * @returns {Array<IpSecVpnEndpoint>}
            */
        get endpoints(): Array<IpSecVpnEndpoint>;
        /**
            * Get list of tunnels
            * @returns {Array<IpSecVpnTunnel>}
            */
        get tunnels(): Array<IpSecVpnTunnel>;
        /**
            * Get the __json__ representation of this class.
            * @returns {EdgeIpsecVpnServiceConfigJson}
            */
        get json(): EdgeIpsecVpnServiceConfigJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * IpsecVpn class
    */
export class IpsecVpn {
        constructor(_json: EdgeIpsecVpnServiceJson);
        /**
            * Get edge uuid
            * @returns {string | null}
            */
        get edgeUuid(): string | null;
        /**
            * Check weather IpsecVpn is enabled or not.
            * @returns {boolean | null}
            */
        get enabled(): boolean | null;
        /**
            * Get global settings
            * @returns {GlobalSettingsJson}
            */
        get globalSettings(): GlobalSettingsJson;
        /**
            * Get logging settings
            * @returns {LoggingSettingsJson}
            */
        get loggingSettings(): LoggingSettingsJson;
        /**
            * Get Ip Sec Vpn Sites
            * @returns {Array<IpSecVpnSite>}
            */
        get sites(): Array<IpSecVpnSite>;
        /**
            * Get the __json__ representation of this class.
            * @returns {EdgeIpsecVpnServiceJson}
            */
        get json(): EdgeIpsecVpnServiceJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Logging Settings Request
    */
export class LoggingSettingsRequest {
        constructor(loggingSettingsRequest: LoggingSettingsRequest);
        constructor(loggingSettingsRequestJson: LoggingSettingsRequestJson);
        constructor(logLevel: string, enabled: boolean);
        /**
            * Get log level.
            * @returns {string}
            */
        get logLevel(): string;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {LoggingSettingsRequestJson}
            */
        get json(): LoggingSettingsRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export interface LoadBalancerServiceJson {
    edge_uuid: string;
    enabled: boolean;
    pools: Array<LoadBalancerPoolJson> | null;
    virtual_servers: Array<LoadBalancerVirtualServerJson> | null;
}
export interface LoadBalancerPoolJson {
    id: string | null;
    name: string | null;
    description: string | null;
    service_ports: Array<LbPoolServicePortJson> | null;
    members: Array<LbPoolMemberJson> | null;
    operational: boolean;
    error_details: string | null;
}
export interface LoadBalancerVirtualServerJson {
    name: string | null;
    enabled: boolean;
    description: string | null;
    ip_address: string | null;
    service_profiles: Array<LbVirtualServerServiceProfileJson> | null;
    logging: boolean;
    pool: string | null;
    network: string | null;
}
export interface LbPoolServicePortJson {
    enabled: boolean;
    protocol: string | null;
    algorithm: string | null;
    port: string | null;
    health_check_port: string | null;
    health_checks: Array<LbPoolHealthCheckJson> | null;
}
export interface LbPoolMemberJson {
    ip_address: string | null;
    weight: string | null;
    service_ports: Array<LbPoolServicePortJson> | null;
}
export interface LbVirtualServerServiceProfileJson {
    enabled: boolean;
    protocol: string | null;
    port: string | null;
    persistence: LbPersistenceJson | null;
}
export interface LbPoolHealthCheckJson {
    mode: string | null;
    uri: string | null;
    health_threshold: string | null;
    unhealth_threshold: string | null;
    interval: string | null;
    timeout: string | null;
}
export interface LbPersistenceJson {
    method: string | null;
    cookie_name: string | null;
    cookie_mode: string | null;
}

/**
  * Load Balancer Persistence Update Request JSON interface.
  */
export interface LoadBalancerPersistenceUpdateRequestJson {
    method: string;
    cookie_name: string;
    cookie_mode: string;
}

/**
  * Load Balancer Pool Member Update Request JSON interface.
  */
export interface LoadBalancerPoolMemberUpdateRequestJson {
    ip_address: string;
    weight: string;
}

/**
  * Load Balancer Pool Service Port Update Request JSON interface.
  */
export interface LoadBalancerPoolServicePortUpdateRequestJson {
    enabled: boolean;
    protocol: string;
    algorithm: string;
    port: string;
    health_check_port: string;
}

/**
  * Load Balancer Pool Update Request JSON interface.
  */
export interface LoadBalancerPoolUpdateRequestJson {
    id: string;
    name: string;
    description: string;
    service_ports: Array<LoadBalancerPoolServicePortUpdateRequestJson>;
    members: Array<LoadBalancerPoolMemberUpdateRequestJson>;
    operational: boolean;
    error_details: string;
}

/**
  * Load Balancer Service Update Request JSON interface.
  */
export interface LoadBalancerServiceUpdateRequestJson {
    edge_uuid: string;
    enabled: boolean;
    pools: Array<LoadBalancerPoolUpdateRequestJson>;
    virtual_servers: Array<LoadBalancerVirtualServerUpdateRequestJson>;
}

/**
  * Load Balancer Virtual Server Service Profile Update Request JSON interface.
  */
export interface LoadBalancerVirtualServerServiceProfileUpdateRequestJson {
    enabled: boolean;
    protocol: string;
    port: string;
    persistence: LoadBalancerPersistenceUpdateRequestJson;
}

/**
  * Load Balancer Virtual Server Update Request JSON interface.
  */
export interface LoadBalancerVirtualServerUpdateRequestJson {
    name: string;
    enabled: boolean;
    description: string;
    ip_address: string;
    service_profiles: Array<LoadBalancerVirtualServerServiceProfileUpdateRequestJson>;
    logging: boolean;
    pool: string;
    network: string;
}

/**
    * LbPersistence class
    */
export class LbPersistence {
        constructor(_json: LbPersistenceJson);
        /**
            * Get method
            * @returns {string | null}
            */
        get method(): string | null;
        /**
            * Get cookie name
            * @returns {string | null}
            */
        get cookieName(): string | null;
        /**
            * Get cookie mode
            * @returns {string | null}
            */
        get cookieMode(): string | null;
        /**
            * Get the __json__ representation of this class.
            * @returns {LbPersistenceJson}
            */
        get json(): LbPersistenceJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * LbPoolHealthCheck class
    */
export class LbPoolHealthCheck {
        constructor(_json: LbPoolHealthCheckJson);
        /**
            * Get mode
            * @returns {string | null}
            */
        get mode(): string | null;
        /**
            * Get uri
            * @returns {string | null}
            */
        get uri(): string | null;
        /**
            * Get health threshold
            * @returns {string | null}
            */
        get healthThreshold(): string | null;
        /**
            * Get unhealth threshold
            * @returns {string | null}
            */
        get unhealthThreshold(): string | null;
        /**
            * Get interval
            * @returns {string | null}
            */
        get interval(): string | null;
        /**
            * Get timeout
            * @returns {string | null}
            */
        get timeout(): string | null;
        /**
            * Get the __json__ representation of this class.
            * @returns {LbPoolHealthCheckJson}
            */
        get json(): LbPoolHealthCheckJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * LbPoolMember class
    */
export class LbPoolMember {
        constructor(_json: LbPoolMemberJson);
        /**
            * Get ip address
            * @returns {string | null}
            */
        get ipAddress(): string | null;
        /**
            * Get weight
            * @returns {string | null}
            */
        get weight(): string | null;
        /**
            * Get list of service ports.
            * @returns {Array<LbPoolServicePort>}
            */
        get servicePorts(): Array<LbPoolServicePort>;
        /**
            * Get the __json__ representation of this class.
            * @returns {LbPoolMemberJson}
            */
        get json(): LbPoolMemberJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * LbPoolServicePort class
    */
export class LbPoolServicePort {
        constructor(_json: LbPoolServicePortJson);
        /**
            * Check weather LbPoolServicePort is enabled or not.
            * @returns {boolean | null}
            */
        get enabled(): boolean | null;
        /**
            * Get protocol
            * @returns {string | null}
            */
        get protocol(): string | null;
        /**
            * Get algorithm
            * @returns {string | null}
            */
        get algorithm(): string | null;
        /**
            * Get port
            * @returns {string | null}
            */
        get port(): string | null;
        /**
            * Get health check port
            * @returns {string | null}
            */
        get healthCheckPort(): string | null;
        /**
            * Get list of health checks.
            * @returns {Array<LbPoolHealthCheck>}
            */
        get healthChecks(): Array<LbPoolHealthCheck>;
        /**
            * Get the __json__ representation of this class.
            * @returns {LbPoolServicePortJson}
            */
        get json(): LbPoolServicePortJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * LbVirtualServerServiceProfile class
    */
export class LbVirtualServerServiceProfile {
        constructor(_json: LbVirtualServerServiceProfileJson);
        /**
            * Check weather profile is enabled or not.
            * @returns {boolean | null}
            */
        get enabled(): boolean | null;
        /**
            * Get protocol
            * @returns {string | null}
            */
        get protocol(): string | null;
        /**
            * Get port
            * @returns {string | null}
            */
        get port(): string | null;
        /**
            * Get persistence
            * @returns {LbPersistence | null}
            */
        get persistence(): LbPersistence | null;
        /**
            * Get the __json__ representation of this class.
            * @returns {LbVirtualServerServiceProfileJson}
            */
        get json(): LbVirtualServerServiceProfileJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Load Balancer Persistence Update Request.
    */
export class LoadBalancerPersistenceUpdateRequest {
        constructor(loadBalancerPersistenceUpdateRequest: LoadBalancerPersistenceUpdateRequest);
        constructor(loadBalancerPersistenceUpdateRequestJson: LoadBalancerPersistenceUpdateRequestJson);
        constructor(method: string, cookieName: string, cookieMode: string);
        /**
            * Get method.
            * @returns {string}
            */
        get method(): string;
        /**
            * Get cookie name.
            * @returns {string}
            */
        get cookieName(): string;
        /**
            * Get cookie mode.
            * @returns {string}
            */
        get cookieMode(): string;
        /**
            * Get the json representation of this class.
            * @returns {LoadBalancerPersistenceUpdateRequestJson}
            */
        get json(): LoadBalancerPersistenceUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Load Balancer Pool Member Update Request.
    */
export class LoadBalancerPoolMemberUpdateRequest {
        constructor(loadBalancerPoolMemberUpdateRequest: LoadBalancerPoolMemberUpdateRequest);
        constructor(loadBalancerPoolMemberUpdateRequestJson: LoadBalancerPoolMemberUpdateRequestJson);
        constructor(ipAddress: string, weight: string);
        /**
            * Get ip address.
            * @returns {string}
            */
        get ipAddress(): string;
        /**
            * Get weight.
            * @returns {string}
            */
        get weight(): string;
        /**
            * Get the json representation of this class.
            * @returns {LoadBalancerPoolMemberUpdateRequestJson}
            */
        get json(): LoadBalancerPoolMemberUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Load Balancer Pool Service Port Update Request.
    */
export class LoadBalancerPoolServicePortUpdateRequest {
        constructor(loadBalancerPoolServicePortUpdateRequest: LoadBalancerPoolServicePortUpdateRequest);
        constructor(loadBalancerPoolServicePortUpdateRequestJson: LoadBalancerPoolServicePortUpdateRequestJson);
        constructor(enabled: boolean, protocol: string, algorithm: string, port: string, healthCheckPort: string);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get protocol.
            * @returns {string}
            */
        get protocol(): string;
        /**
            * Get algorithm.
            * @returns {string}
            */
        get algorithm(): string;
        /**
            * Get port.
            * @returns {string}
            */
        get port(): string;
        /**
            * Get health check port.
            * @returns {string}
            */
        get healthCheckPort(): string;
        /**
            * Get the json representation of this class.
            * @returns {LoadBalancerPoolServicePortUpdateRequestJson}
            */
        get json(): LoadBalancerPoolServicePortUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Load Balancer Pool Update Request.
    */
export class LoadBalancerPoolUpdateRequest {
        constructor(loadBalancerPoolUpdateRequest: LoadBalancerPoolUpdateRequest);
        constructor(loadBalancerPoolUpdateRequestJson: LoadBalancerPoolUpdateRequestJson);
        constructor(id: string, name: string, description: string, servicePorts: Array<LoadBalancerPoolServicePortUpdateRequestJson>, members: Array<LoadBalancerPoolMemberUpdateRequestJson>, operational: boolean, errorDetails: string);
        /**
            * Get id.
            * @returns {string}
            */
        get id(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get service ports.
            * @returns {Array<LoadBalancerPoolServicePortUpdateRequest>}
            */
        get servicePorts(): Array<LoadBalancerPoolServicePortUpdateRequest>;
        /**
            * Get members.
            * @returns {Array<LoadBalancerPoolMemberUpdateRequest>}
            */
        get members(): Array<LoadBalancerPoolMemberUpdateRequest>;
        /**
            * Get operational.
            * @returns {boolean}
            */
        get operational(): boolean;
        /**
            * Get error details.
            * @returns {string}
            */
        get errorDetails(): string;
        /**
            * Get the json representation of this class.
            * @returns {LoadBalancerPoolUpdateRequestJson}
            */
        get json(): LoadBalancerPoolUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * LoadBalancerPool class
    */
export class LoadBalancerPool {
        constructor(_json: LoadBalancerPoolJson);
        /**
            * Get id
            * @returns {string | null}
            */
        get id(): string | null;
        /**
            * Get name
            * @returns {string | null}
            */
        get name(): string | null;
        /**
            * Get description
            * @returns {string | null}
            */
        get description(): string | null;
        /**
            * Check weather this LoadBalancerPool is operational or not.
            * @returns {boolean | null}
            */
        get operational(): boolean | null;
        /**
            * Get error details.
            * @returns {string | null}
            */
        get errorDetails(): string | null;
        /**
            * Get a list of pool service ports
            * @returns {Array<LbPoolServicePort>}
            */
        get servicePorts(): Array<LbPoolServicePort>;
        /**
            * Get a list of pool members
            * @returns {Array<LbPoolMember>}
            */
        get members(): Array<LbPoolMember>;
        /**
            * Get the __json__ representation of this class.
            * @returns {LoadBalancerPoolJson}
            */
        get json(): LoadBalancerPoolJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Load Balancer Service Update Request.
    */
export class LoadBalancerServiceUpdateRequest {
        constructor(loadBalancerServiceUpdateRequest: LoadBalancerServiceUpdateRequest);
        constructor(loadBalancerServiceUpdateRequestJson: LoadBalancerServiceUpdateRequestJson);
        constructor(edgeUuid: string, enabled: boolean, pools: Array<LoadBalancerPoolUpdateRequestJson>, virtualServers: Array<LoadBalancerVirtualServerUpdateRequestJson>);
        /**
            * Get edge uuid.
            * @returns {string}
            */
        get edgeUuid(): string;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get pools.
            * @returns {Array<LoadBalancerPoolUpdateRequest>}
            */
        get pools(): Array<LoadBalancerPoolUpdateRequest>;
        /**
            * Get virtual servers.
            * @returns {Array<LoadBalancerVirtualServerUpdateRequest>}
            */
        get virtualServers(): Array<LoadBalancerVirtualServerUpdateRequest>;
        /**
            * Get the json representation of this class.
            * @returns {LoadBalancerServiceUpdateRequestJson}
            */
        get json(): LoadBalancerServiceUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Load Balancer Virtual Server Service Profile Request.
    */
export class LoadBalancerVirtualServerServiceProfileUpdateRequest {
        constructor(loadBalancerVirtualServerServiceProfileUpdateRequest: LoadBalancerVirtualServerServiceProfileUpdateRequest);
        constructor(loadBalancerVirtualServerServiceProfileUpdateRequestJson: LoadBalancerVirtualServerServiceProfileUpdateRequestJson);
        constructor(enabled: boolean, protocol: string, port: string, persistence: LoadBalancerPersistenceUpdateRequestJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get protocol.
            * @returns {string}
            */
        get protocol(): string;
        /**
            * Get port.
            * @returns {string}
            */
        get port(): string;
        /**
            * Get persistence.
            * @returns {LoadBalancerPersistenceUpdateRequest}
            */
        get persistence(): LoadBalancerPersistenceUpdateRequest;
        /**
            * Get the json representation of this class.
            * @returns {LoadBalancerVirtualServerServiceProfileUpdateRequestJson}
            */
        get json(): LoadBalancerVirtualServerServiceProfileUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Load Balancer Virtual Server Update Request.
    */
export class LoadBalancerVirtualServerUpdateRequest {
        constructor(loadBalancerVirtualServerUpdateRequest: LoadBalancerVirtualServerUpdateRequest);
        constructor(loadBalancerVirtualServerUpdateRequestJson: LoadBalancerVirtualServerUpdateRequestJson);
        constructor(name: string, enabled: boolean, description: string, ipAddress: string, serviceProfiles: Array<LoadBalancerVirtualServerServiceProfileUpdateRequestJson>, logging: boolean, pool: string, network: string);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get ip address.
            * @returns {string}
            */
        get ipAddress(): string;
        /**
            * Get service profiles.
            * @returns {Array<LoadBalancerVirtualServerServiceProfileUpdateRequest>}
            */
        get serviceProfiles(): Array<LoadBalancerVirtualServerServiceProfileUpdateRequest>;
        /**
            * Get logging.
            * @returns {boolean}
            */
        get logging(): boolean;
        /**
            * Get pool.
            * @returns {string}
            */
        get pool(): string;
        /**
            * Get network.
            * @returns {string}
            */
        get network(): string;
        /**
            * Get the json representation of this class.
            * @returns {LoadBalancerVirtualServerUpdateRequestJson}
            */
        get json(): LoadBalancerVirtualServerUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * LoadBalancerVirtualServer class
    */
export class LoadBalancerVirtualServer {
        constructor(_json: LoadBalancerVirtualServerJson);
        /**
            * Get name
            * @returns {string | null}
            */
        get name(): string | null;
        /**
            * Check weather this LoadBalancerVirtualServer is enabled or not.
            * @returns {boolean | null}
            */
        get enabled(): boolean | null;
        /**
            * Get description
            * @returns {string | null}
            */
        get description(): string | null;
        /**
            * Get id address
            * @returns {string | null}
            */
        get ipAddress(): string | null;
        /**
            * Check weather this LoadBalancerVirtualServer has logging enabled or not.
            * @returns {boolean | null}
            */
        get logging(): boolean | null;
        /**
            * Get pool
            * @returns {string | null}
            */
        get pool(): string | null;
        /**
            * Get network
            * @returns {string | null}
            */
        get network(): string | null;
        /**
            * Get a list of virtual server service profiles
            * @returns {Array<LbVirtualServerServiceProfile>}
            */
        get serviceProfiles(): Array<LbVirtualServerServiceProfile>;
        /**
            * Get the __json__ representation of this class.
            * @returns {LoadBalancerVirtualServerJson}
            */
        get json(): LoadBalancerVirtualServerJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * LoadBalancer class
    */
export class LoadBalancer {
        constructor(_json: LoadBalancerServiceJson);
        /**
            * Get edge uuid
            * @returns {string | null}
            */
        get edgeUuid(): string | null;
        /**
            * Check weather this LoadBalancer is enabled or not.
            * @returns {boolean | null}
            */
        get enabled(): boolean | null;
        /**
            * Get a list of virtual servers
            * @returns {Array<LoadBalancerVirtualServer>}
            */
        get virtualServers(): Array<LoadBalancerVirtualServer>;
        /**
            * Get a list of load balancer pools
            * @returns {Array<LoadBalancerPool>}
            */
        get pools(): Array<LoadBalancerPool>;
        /**
            * Get the __json__ representation of this class.
            * @returns {LoadBalancerServiceJson}
            */
        get json(): LoadBalancerServiceJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
  * Edge Nat Rule Update Request JSON
  */
export interface EdgeNATRuleUpdateRequestJson {
    description: string;
    id: number;
    rule_type: string;
    enabled: boolean;
    icmp_sub_type: string;
    original_ip: string;
    original_port: string;
    protocol: string;
    translated_ip: string;
    translated_port: string;
    interface: string;
    idx: number;
}

/**
  * Nat Service Config JSON interface.
  */
export interface NatServiceConfigJson {
    version: number;
    external_ip: string | null;
    type: string | null;
    policy: string | null;
    rules: Array<GatewayNatRuleJson> | null;
    enabled: boolean | null;
}

export interface NatServiceJson {
    external_ip: string | null;
    nat_type: string | null;
    policy: string | null;
    rules: Array<GatewayNatRuleJson>;
    enabled: boolean;
}

/**
  * Nat Service Update Request JSON.
  */
export interface NATServiceUpdateRequestJson {
    external_ip: string;
    nat_type: string;
    policy: string;
    enabled: boolean;
    rules: Array<EdgeNATRuleUpdateRequestJson>;
}

/**
    * Edge Nat Rule Update Request
    */
export class EdgeNATRuleUpdateRequest {
        constructor(edgeNATRuleUpdateRequest: EdgeNATRuleUpdateRequest);
        constructor(edgeNATRuleUpdateRequestJson: EdgeNATRuleUpdateRequestJson);
        constructor(description: string, id: number, ruleType: string, enabled: boolean, icmpSubType: string, originalIp: string, originalPort: string, protocol: string, translatedIp: string, translatedPort: string, interfaceName: string, idx: number);
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get id.
            * @returns {number}
            */
        get id(): number;
        /**
            * Get rule type.
            * @returns {string}
            */
        get ruleType(): string;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get icmp sub type.
            * @returns {string}
            */
        get icmpSubType(): string;
        /**
            * Get original ip.
            * @returns {string}
            */
        get originalIp(): string;
        /**
            * Get original port.
            * @returns {string}
            */
        get originalPort(): string;
        /**
            * Get protocol.
            * @returns {string}
            */
        get protocol(): string;
        /**
            * Get translated ip.
            * @returns {string}
            */
        get translatedIp(): string;
        /**
            * Get translated port.
            * @returns {string}
            */
        get translatedPort(): string;
        /**
            * Get interface.
            * @returns {string}
            */
        get interface(): string;
        /**
            * Get idx.
            * @returns {number}
            */
        get idx(): number;
        /**
            * Get the json representation of this class.
            * @returns {EdgeNATRuleUpdateRequestJson}
            */
        get json(): EdgeNATRuleUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Nat Service Configuration class.
    */
export class NatServiceConfiguration {
        constructor(_json: NatServiceConfigJson);
        /**
            * Get the version.
            * @returns {number}
            */
        get version(): number;
        /**
            * Get external ip
            * @returns {string | null}
            */
        get externalIp(): string | null;
        /**
            * Get type
            * @returns {string | null}
            */
        get type(): string | null;
        /**
            * Get policy
            * @returns {string | null}
            */
        get policy(): string | null;
        /**
            * Check weather nat service is enabled or not
            * @returns {boolean | null}
            */
        get enabled(): boolean | null;
        /**
            * Get a list of gateway nat rules.
            * @returns {Array<GatewayNatRule>}
            */
        get rules(): Array<GatewayNatRule>;
        /**
            * Get the __json__ representation of this class.
            * @returns {NatServiceConfigJson}
            */
        get json(): NatServiceConfigJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Nat Service Update Request.
    */
export class NATServiceUpdateRequest {
        constructor(nATServiceUpdateRequest: NATServiceUpdateRequest);
        constructor(nATServiceUpdateRequestJson: NATServiceUpdateRequestJson);
        constructor(externalIp: string, natType: string, policy: string, rules: Array<EdgeNATRuleUpdateRequestJson>, enabled: boolean);
        /**
            * Get external ip.
            * @returns {string}
            */
        get externalIp(): string;
        /**
            * Get nat type.
            * @returns {string}
            */
        get natType(): string;
        /**
            * Get policy.
            * @returns {string}
            */
        get policy(): string;
        /**
            * Get rules.
            * @returns {Array<EdgeNATRuleUpdateRequestJson>}
            */
        get rules(): Array<EdgeNATRuleUpdateRequestJson>;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {NATServiceUpdateRequestJson}
            */
        get json(): NATServiceUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * NatService class
    */
export class NatService {
        constructor(_json: NatServiceJson);
        /**
            * Get external ip.
            * @returns {string | null}
            */
        get externalIp(): string | null;
        /**
            * Get nat type.
            * @returns {string | null}
            */
        get natType(): string | null;
        /**
            * Get policy.
            * @returns {string | null}
            */
        get policy(): string | null;
        /**
            * Get rules.
            * @returns {Array<GatewayNatRule>}
            */
        get rules(): Array<GatewayNatRule>;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {NatServiceJson}
            */
        get json(): NatServiceJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export interface NetworkPerfSampleSerieJson {
    summary: string | null;
    interval: number;
    group: PerfGroupType | null;
    name: string | null;
    type: PerfStatsType | null;
    unit: string | null;
    samples: Array<NetworkPerfSampleJson> | null;
}
export interface NetworkPerfSampleJson {
    time: number | null;
    value: number | null;
}

export type PerfGroupType = 'cpu' | 'disk' | 'mem' | 'net';

export type PerfStatsType = 'absolute' | 'delta' | 'rate';

/**
    * NetworkPerfSampleSerie class
    */
export class NetworkPerfSampleSerie {
        constructor(_json: NetworkPerfSampleSerieJson);
        /**
            * Get summary
            * @returns {string | null}
            */
        get summary(): string | null;
        /**
            * Get interval
            * @returns {number}
            */
        get interval(): number;
        /**
            * Get group
            * @returns {PerfGroupType | null}
            */
        get group(): PerfGroupType | null;
        /**
            * Get name
            * @returns {string | null}
            */
        get name(): string | null;
        /**
            * Get type
            * @returns {PerfStatsType | null}
            */
        get type(): PerfStatsType | null;
        /**
            * Get unit
            * @returns {string | null}
            */
        get unit(): string | null;
        /**
            * Get a list of network perf samples.
            * @returns {Array<NetworkPerfSample>}
            */
        get samples(): Array<NetworkPerfSample>;
        /**
            * Get the __json__ representation of this class.
            * @returns {NetworkPerfSampleSerieJson}
            */
        get json(): NetworkPerfSampleSerieJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * NetworkPerfSample class
    */
export class NetworkPerfSample {
        constructor(_json: NetworkPerfSampleJson);
        /**
            * Get time
            * @returns {Date | null}
            */
        get time(): Date | null;
        /**
            * Get value
            * @returns {number | null}
            */
        get value(): number | null;
        /**
            * Get the __json__ representation of this class.
            * @returns {NetworkPerfSampleJson}
            */
        get json(): NetworkPerfSampleJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export interface FirewallRestorePointDetailsJson {
    description: string;
    restore_point_time: number;
    data: EdgeGatewayFirewallJson;
}

export interface FirewallRestorePointJson {
    description: string;
    restore_point_time: number;
}

export interface NATRestorePointDetailsJson {
    description: string;
    restore_point_time: number;
    data: EdgeGatewayNatJson;
}

export interface NATRestorePointJson {
    description: string;
    restore_point_time: number;
}

export interface RestoreFirewallRequestJson {
    restore_point_time: number;
}

export interface RestoreNATRequestJson {
    restore_point_time: number;
}

/**
    * Firewall Restore Point Details.
    */
export class FirewallRestorePointDetails {
        constructor(_json: FirewallRestorePointDetailsJson);
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get restore point time.
            * @returns {number}
            */
        get restorePointTime(): Date;
        /**
            * Get firewall configuration.
            * @returns {EdgeGatewayFirewall}
            */
        get data(): EdgeGatewayFirewall;
        /**
            * Get the json representation of this class.
            * @returns {FirewallRestorePointDetailsJson}
            */
        get json(): FirewallRestorePointDetailsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Firewall Restore Point.
    */
export class FirewallRestorePoint {
        constructor(_json: FirewallRestorePointJson);
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get restore point time.
            * @returns {number}
            */
        get restorePointTime(): Date;
        /**
            * Get the json representation of this class.
            * @returns {FirewallRestorePointJson}
            */
        get json(): FirewallRestorePointJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * NAT Restore Point Details.
    */
export class NATRestorePointDetails {
        constructor(_json: NATRestorePointDetailsJson);
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get restore point time.
            * @returns {number}
            */
        get restorePointTime(): Date;
        /**
            * Get NAT configuration.
            * @returns {EdgeGatewayNat}
            */
        get data(): EdgeGatewayNat;
        /**
            * Get the json representation of this class.
            * @returns {NATRestorePointDetailsJson}
            */
        get json(): NATRestorePointDetailsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * NAT Restore Point.
    */
export class NATRestorePoint {
        constructor(_json: NATRestorePointJson);
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get restore point time.
            * @returns {number}
            */
        get restorePointTime(): Date;
        /**
            * Get the json representation of this class.
            * @returns {NATRestorePointJson}
            */
        get json(): NATRestorePointJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Restore Firewall Request.
    */
export class RestoreFirewallRequest {
        constructor(restoreFirewallRequest: RestoreFirewallRequest);
        constructor(restoreFirewallRequestJson: RestoreFirewallRequestJson);
        constructor(restorePointTime: number);
        /**
            * Get restore point time.
            * @returns {number}
            */
        get restorePointTime(): Date;
        /**
            * Get the json representation of this class.
            * @returns {RestoreFirewallRequestJson}
            */
        get json(): RestoreFirewallRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Restore NAT Request.
    */
export class RestoreNATRequest {
        constructor(restoreNatRequest: RestoreNATRequest);
        constructor(restoreNatRequestJson: RestoreNATRequestJson);
        constructor(restorePointTime: number);
        /**
            * Get restore point time.
            * @returns {number}
            */
        get restorePointTime(): Date;
        /**
            * Get the json representation of this class.
            * @returns {RestoreNATRequestJson}
            */
        get json(): RestoreNATRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export type EdgeSslVpnAuthServerType = 'LOCAL' | 'LDAP' | 'AD' | 'RADIUS' | 'RSA';

export interface EdgeSslVpnAuthenticationServerUpdateRequestJson {
    type: EdgeSslVpnAuthServerType;
}

export interface EdgeSslVpnAuthenticationUpdateRequestJson {
    authentication_servers: Array<EdgeSslVpnAuthenticationServerUpdateRequestJson>;
    secondary_authentication_server: EdgeSslVpnAuthenticationServerUpdateRequestJson;
}

export interface EdgeSslVpnClientInstallPackageUpdateRequestJson {
    profile_name: string;
    gateway_list: Array<EdgeSslVpnGatewayUpdateRequestJson>;
    start_client_on_login: boolean;
    hide_systray_icon: boolean;
    remember_password: boolean;
    silent_mode_operation: boolean;
    silent_mode_installation: boolean;
    hide_network_adaptor: boolean;
    create_desktop_icon: boolean;
    enforce_server_security_cert_validation: boolean;
    create_linux_client: boolean;
    create_mac_client: boolean;
    description: string;
    enabled: boolean;
}

export interface EdgeSslVpnGatewayUpdateRequestJson {
    host_name: string;
    port: string;
}

export interface EdgeSslVpnIpPoolUpdateRequestJson {
    description: string;
    ip_range: string;
    netmask: string;
    gateway: string;
    primary_dns: string;
    secondary_dns: string;
    dns_suffix: string;
    wins_server: string;
    enabled: boolean;
}

export interface EdgeSslVpnServiceJson {
    edge_uuid: string;
    enabled: boolean;
    log_enabled: boolean;
    log_level: string;
    ip: string;
    port: number;
    cipher_list: Array<string>;
    private_networks: Array<EdgeSslVpnPrivateNetworkJson>;
    users: Array<EdgeSslVpnUserJson>;
    ip_pools: Array<EdgeSslVpnIpPoolJson>;
    client_install_packages: Array<EdgeSslVpnClientInstallPackageJson>;
    authentication_config: EdgeSslVpnLocalAuthenticationServerJson;
    authentication: EdgeSslVpnAuthenticationJson;
}
export interface EdgeSslVpnPrivateNetworkJson {
    enabled: boolean;
    description: string;
    network: string;
    ports: string;
    optimize: boolean;
}
export interface EdgeSslVpnUserJson {
    user_id: string;
    object_id: string;
    first_name: string;
    last_name: string;
    description: string;
    disable_account: boolean;
    password: string;
    password_never_expires: boolean;
    change_pwd_on_next_login: boolean;
}
export interface EdgeSslVpnIpPoolJson {
    description: string;
    ip_range: string;
    netmask: string;
    gateway: string;
    primary_dns: string;
    secondary_dns: string;
    dns_suffix: string;
    wins_server: string;
    enabled: boolean;
}
export interface EdgeSslVpnClientInstallPackageJson {
    profile_name: string;
    gateway_list: Array<EdgeSslVpnGatewayJson>;
    start_client_on_login: boolean;
    hide_systray_icon: boolean;
    remember_password: boolean;
    silent_mode_operation: boolean;
    silent_mode_installation: boolean;
    hide_network_adaptor: boolean;
    create_desktop_icon: boolean;
    enforce_server_security_cert_validation: boolean;
    create_linux_client: boolean;
    create_mac_client: boolean;
    description: string;
    enabled: boolean;
}
export interface EdgeSslVpnAuthenticationServerJson {
    type: EdgeSslVpnAuthServerType;
}
export interface EdgeSslVpnLocalAuthenticationServerJson {
    enabled: boolean;
    pwd_min_length: number;
    pwd_max_length: number;
    pwd_min_alphabets: number;
    pwd_min_digits: number;
    pwd_min_special_characters: number;
    allow_user_id_within_pwd: boolean;
    pwd_lifetime: number;
    pwd_expiry_notification: number;
    retry_count: number;
    retry_duration: number;
    lockout_duration: number;
    type: EdgeSslVpnAuthServerType;
}
export interface EdgeSslVpnAdAuthenticationServerJson {
    enabled: boolean;
    ip: string;
    port: number;
    timeout: number;
    enable_ssl: boolean;
    search_base: string;
    bind_domain_name: string;
    bind_password: string;
    login_attribute_name: string;
    search_filter: string;
    terminate_session_on_auth_fails: boolean;
    type: EdgeSslVpnAuthServerType;
}
export interface EdgeSslVpnLdapAuthenticationServerJson {
    enabled: boolean;
    search_filter: string;
    login_attribute_name: string;
    bind_password: string;
    bind_domain_name: string;
    search_base: string;
    enable_ssl: boolean;
    timeout: number;
    port: number;
    ip: string;
    type: EdgeSslVpnAuthServerType;
}
export interface EdgeSslVpnRadiusAuthenticationServerJson {
    ip: string;
    port: number;
    timeout: number;
    secret: string;
    nas_ip: string;
    retry_count: number;
    type: EdgeSslVpnAuthServerType;
}
export interface EdgeSslVpnRsaAuthenticationServerJson {
    timeout: number;
    source_ip: string;
    type: EdgeSslVpnAuthServerType;
}
export interface EdgeSslVpnAuthenticationJson {
    authentication_servers: Array<EdgeSslVpnLocalAuthenticationServerJson | EdgeSslVpnLdapAuthenticationServerJson | EdgeSslVpnAdAuthenticationServerJson | EdgeSslVpnRadiusAuthenticationServerJson | EdgeSslVpnRsaAuthenticationServerJson>;
    secondary_authentication_server: EdgeSslVpnLocalAuthenticationServerJson | EdgeSslVpnLdapAuthenticationServerJson | EdgeSslVpnAdAuthenticationServerJson | EdgeSslVpnRadiusAuthenticationServerJson | EdgeSslVpnRsaAuthenticationServerJson | null;
}
export interface EdgeSslVpnGatewayJson {
    host_name: string;
    port: string;
}

export interface EdgeSslVpnLocalAuthenticationServerUpdateRequestJson {
    enabled: boolean;
    pwd_min_length: number;
    pwd_max_length: number;
    pwd_min_alphabets: number;
    pwd_min_digits: number;
    pwd_min_special_characters: number;
    allow_user_id_within_pwd: boolean;
    pwd_lifetime: number;
    pwd_expiry_notification: number;
    retry_count: number;
    retry_duration: number;
    lockout_duration: number;
    type: EdgeSslVpnAuthServerType;
}

export interface EdgeSslVpnPrivateNetworkUpdateRequestJson {
    enabled: boolean;
    description: string;
    network: string;
    ports: string;
    optimize: boolean;
}

export interface EdgeSslVpnServerConfigUpdateRequestJson {
    enabled: boolean;
}

export interface EdgeSslVpnServiceUpdateRequestJson {
    edge_uuid: string;
    enabled: boolean;
    log_enabled: boolean;
    log_level: string;
    ip: string;
    port: number;
    cipher_list: Array<string>;
    private_networks: Array<EdgeSslVpnPrivateNetworkUpdateRequestJson>;
    users: Array<EdgeSslVpnUserUpdateRequestJson>;
    ip_pools: Array<EdgeSslVpnIpPoolUpdateRequestJson>;
    install_packages: Array<EdgeSslVpnClientInstallPackageUpdateRequestJson>;
    authentication_config: EdgeSslVpnLocalAuthenticationServerUpdateRequestJson;
    authentication: EdgeSslVpnAuthenticationUpdateRequestJson;
}

export interface EdgeSslVpnUserUpdateRequestJson {
    user_id: string;
    object_id: string;
    first_name: string;
    last_name: string;
    description: string;
    disable_account: boolean;
    password: string;
    password_never_expires: boolean;
    change_pwd_on_next_login: boolean;
}

export class EdgeSslVpnAdAuthenticationServer extends EdgeSslVpnAuthenticationServer {
        protected _json: EdgeSslVpnAdAuthenticationServerJson;
        constructor(_json: EdgeSslVpnAdAuthenticationServerJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get ip.
            * @returns {string}
            */
        get ip(): string;
        /**
            * Get port.
            * @returns {number}
            */
        get port(): number;
        /**
            * Get timeout.
            * @returns {number}
            */
        get timeout(): number;
        /**
            * Get enable ssl.
            * @returns {boolean}
            */
        get enableSsl(): boolean;
        /**
            * Get search base.
            * @returns {string}
            */
        get searchBase(): string;
        /**
            * Get bind domain name.
            * @returns {string}
            */
        get bindDomainName(): string;
        /**
            * Get bind password.
            * @returns {string}
            */
        get bindPassword(): string;
        /**
            * Get login attribute name.
            * @returns {string}
            */
        get loginAttributeName(): string;
        /**
            * Get search filter.
            * @returns {string}
            */
        get searchFilter(): string;
        /**
            * Get terminate session on auth fails.
            * @returns {boolean}
            */
        get terminateSessionOnAuthFails(): boolean;
        /**
            * Get type.
            * @returns {EdgeSslVpnAuthServerType}
            */
        get type(): EdgeSslVpnAuthServerType;
        /**
            * Get the json representation of this class.
            * @returns {EdgeSslVpnAdAuthenticationServerJson}
            */
        get json(): EdgeSslVpnAdAuthenticationServerJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeSslVpnAuthenticationServerUpdateRequest {
        constructor(edgeSslVpnAuthenticationServerUpdateRequest: EdgeSslVpnAuthenticationServerUpdateRequest);
        constructor(edgeSslVpnAuthenticationServerUpdateRequestJson: EdgeSslVpnAuthenticationServerUpdateRequestJson);
        /**
            * Get type.
            * @returns {EdgeSslVpnAuthServerType}
            */
        get type(): EdgeSslVpnAuthServerType;
        /**
            * Get the json representation of this class.
            * @returns {EdgeSslVpnAuthenticationServerUpdateRequestJson}
            */
        get json(): EdgeSslVpnAuthenticationServerUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * EdgeSslVpnAuthenticationServer class.
    */
export class EdgeSslVpnAuthenticationServer {
        protected _json: EdgeSslVpnAuthenticationServerJson;
        constructor(_json: EdgeSslVpnAuthenticationServerJson);
        /**
            * Get type.
            * @returns {EdgeSslVpnAuthServerType}
            */
        get type(): EdgeSslVpnAuthServerType;
        /**
            * Get the json representation of this class.
            * @returns {EdgeSslVpnAuthenticationServerJson}
            */
        get json(): EdgeSslVpnAuthenticationServerJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeSslVpnAuthenticationUpdateRequest {
        constructor(edgeSslVpnAuthenticationUpdateRequest: EdgeSslVpnAuthenticationUpdateRequest);
        constructor(edgeSslVpnAuthenticationUpdateRequestJson: EdgeSslVpnAuthenticationUpdateRequestJson);
        /**
            * Get authentication servers.
            * @returns {Array<EdgeSslVpnAuthenticationServerUpdateRequest>}
            */
        get authenticationServers(): Array<EdgeSslVpnAuthenticationServerUpdateRequest>;
        /**
            * Get secondary authentication server.
            * @returns {EdgeSslVpnAuthenticationServerUpdateRequest}
            */
        get secondaryAuthenticationServer(): EdgeSslVpnAuthenticationServerUpdateRequest;
        /**
            * Get the json representation of this class.
            * @returns {EdgeSslVpnAuthenticationUpdateRequestJson}
            */
        get json(): EdgeSslVpnAuthenticationUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * EdgeSslVpnAuthentication class
    */
export class EdgeSslVpnAuthentication {
        constructor(_json: EdgeSslVpnAuthenticationJson);
        /**
            * Get a list of authentication servers
            * @returns {Array<EdgeSslVpnAuthenticationServer>}
            */
        get authenticationServers(): Array<EdgeSslVpnAuthenticationServer>;
        /**
            * Get secondary authentication server
            * @returns {EdgeSslVpnAuthenticationServer | null}
            */
        get secondaryAuthenticationServer(): EdgeSslVpnLocalAuthenticationServer | EdgeSslVpnLdapAuthenticationServer | EdgeSslVpnAdAuthenticationServer | EdgeSslVpnRadiusAuthenticationServer | EdgeSslVpnRsaAuthenticationServer | null;
        /**
            * Get the __json__ representation of this class.
            * @returns {EdgeSslVpnAuthenticationJson}
            */
        get json(): EdgeSslVpnAuthenticationJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeSslVpnClientInstallPackageUpdateRequest {
        constructor(edgeSslVpnClientInstallPackageUpdateRequest: EdgeSslVpnClientInstallPackageUpdateRequest);
        constructor(edgeSslVpnClientInstallPackageUpdateRequestJson: EdgeSslVpnClientInstallPackageUpdateRequestJson);
        constructor(profileName: string, gatewayList: Array<EdgeSslVpnGatewayUpdateRequestJson>, startClientOnLogin: boolean, hideSystrayIcon: boolean, rememberPassword: boolean, silentModeOperation: boolean, silentModeInstallation: boolean, hideNetworkAdaptor: boolean, createDesktopIcon: boolean, enforceServerSecurityCertValidation: boolean, createLinuxClient: boolean, createMacClient: boolean, description: string, enabled: boolean);
        /**
            * Get profile name.
            * @returns {string}
            */
        get profileName(): string;
        /**
            * Get gateway list.
            * @returns {Array<EdgeSslVpnGatewayUpdateRequest>}
            */
        get gatewayList(): Array<EdgeSslVpnGatewayUpdateRequest>;
        /**
            * Get start client on login.
            * @returns {boolean}
            */
        get startClientOnLogin(): boolean;
        /**
            * Get hide systray icon.
            * @returns {boolean}
            */
        get hideSystrayIcon(): boolean;
        /**
            * Get remember password.
            * @returns {boolean}
            */
        get rememberPassword(): boolean;
        /**
            * Get silent mode operation.
            * @returns {boolean}
            */
        get silentModeOperation(): boolean;
        /**
            * Get silent mode installation.
            * @returns {boolean}
            */
        get silentModeInstallation(): boolean;
        /**
            * Get hide network adaptor.
            * @returns {boolean}
            */
        get hideNetworkAdaptor(): boolean;
        /**
            * Get create desktop icon.
            * @returns {boolean}
            */
        get createDesktopIcon(): boolean;
        /**
            * Get enforce server security cert validation.
            * @returns {boolean}
            */
        get enforceServerSecurityCertValidation(): boolean;
        /**
            * Get create linux client.
            * @returns {boolean}
            */
        get createLinuxClient(): boolean;
        /**
            * Get create mac client.
            * @returns {boolean}
            */
        get createMacClient(): boolean;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {EdgeSslVpnClientInstallPackageUpdateRequestJson}
            */
        get json(): EdgeSslVpnClientInstallPackageUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * SslVpnClientInstallPackage class
    */
export class EdgeSslVpnClientInstallPackage {
        constructor(_json: EdgeSslVpnClientInstallPackageJson);
        /**
            * Get profile name.
            * @returns {string}
            */
        get profileName(): string;
        /**
            * Get gateway list.
            * @returns {Array<EdgeSslVpnGateway>}
            */
        get gatewayList(): Array<EdgeSslVpnGateway>;
        /**
            * Get start client on login.
            * @returns {boolean}
            */
        get startClientOnLogin(): boolean;
        /**
            * Get hide systray icon.
            * @returns {boolean}
            */
        get hideSystrayIcon(): boolean;
        /**
            * Get remember password.
            * @returns {boolean}
            */
        get rememberPassword(): boolean;
        /**
            * Get silent mode operation.
            * @returns {boolean}
            */
        get silentModeOperation(): boolean;
        /**
            * Get silent mode installation.
            * @returns {boolean}
            */
        get silentModeInstallation(): boolean;
        /**
            * Get hide network adaptor.
            * @returns {boolean}
            */
        get hideNetworkAdaptor(): boolean;
        /**
            * Get create desktop icon.
            * @returns {boolean}
            */
        get createDesktopIcon(): boolean;
        /**
            * Get enforce server security cert validation.
            * @returns {boolean}
            */
        get enforceServerSecurityCertValidation(): boolean;
        /**
            * Get create linux client.
            * @returns {boolean}
            */
        get createLinuxClient(): boolean;
        /**
            * Get create mac client.
            * @returns {boolean}
            */
        get createMacClient(): boolean;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {EdgeSslVpnClientInstallPackageJson}
            */
        get json(): EdgeSslVpnClientInstallPackageJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeSslVpnGatewayUpdateRequest {
        constructor(edgeSslVpnGatewayUpdateRequest: EdgeSslVpnGatewayUpdateRequest);
        constructor(edgeSslVpnGatewayUpdateRequestJson: EdgeSslVpnGatewayUpdateRequestJson);
        constructor(hostName: string, port: string);
        /**
            * Get host name.
            * @returns {string}
            */
        get hostName(): string;
        /**
            * Get port.
            * @returns {string}
            */
        get port(): string;
        /**
            * Get the json representation of this class.
            * @returns {EdgeSslVpnGatewayUpdateRequestJson}
            */
        get json(): EdgeSslVpnGatewayUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * EdgeSslVpnGateway class
    */
export class EdgeSslVpnGateway {
        constructor(_json: EdgeSslVpnGatewayJson);
        /**
            * Get host name.
            * @returns {string}
            */
        get hostName(): string;
        /**
            * Get port.
            * @returns {string}
            */
        get port(): string;
        /**
            * Get the json representation of this class.
            * @returns {EdgeSslVpnGatewayJson}
            */
        get json(): EdgeSslVpnGatewayJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeSslVpnIpPoolUpdateRequest {
        constructor(edgeSslVpnIpPoolUpdateRequest: EdgeSslVpnIpPoolUpdateRequest);
        constructor(edgeSslVpnIpPoolUpdateRequestJson: EdgeSslVpnIpPoolUpdateRequestJson);
        constructor(description: string, ipRange: string, netmask: string, gateway: string, primaryDns: string, secondaryDns: string, dnsSuffix: string, winsServer: string, enabled: boolean);
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get ip range.
            * @returns {string}
            */
        get ipRange(): string;
        /**
            * Get netmask.
            * @returns {string}
            */
        get netmask(): string;
        /**
            * Get gateway.
            * @returns {string}
            */
        get gateway(): string;
        /**
            * Get primary dns.
            * @returns {string}
            */
        get primaryDns(): string;
        /**
            * Get secondary dns.
            * @returns {string}
            */
        get secondaryDns(): string;
        /**
            * Get dns suffix.
            * @returns {string}
            */
        get dnsSuffix(): string;
        /**
            * Get wins server.
            * @returns {string}
            */
        get winsServer(): string;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {EdgeSslVpnIpPoolUpdateRequestJson}
            */
        get json(): EdgeSslVpnIpPoolUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * EdgeSslVpnIpPool class
    */
export class EdgeSslVpnIpPool {
        constructor(_json: EdgeSslVpnIpPoolJson);
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get ip range.
            * @returns {string}
            */
        get ipRange(): string;
        /**
            * Get netmask.
            * @returns {string}
            */
        get netmask(): string;
        /**
            * Get gateway.
            * @returns {string}
            */
        get gateway(): string;
        /**
            * Get primary dns.
            * @returns {string}
            */
        get primaryDns(): string;
        /**
            * Get secondary dns.
            * @returns {string}
            */
        get secondaryDns(): string;
        /**
            * Get dns suffix.
            * @returns {string}
            */
        get dnsSuffix(): string;
        /**
            * Get wins server.
            * @returns {string}
            */
        get winsServer(): string;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {EdgeSslVpnIpPoolJson}
            */
        get json(): EdgeSslVpnIpPoolJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeSslVpnLdapAuthenticationServer extends EdgeSslVpnAuthenticationServer {
        protected _json: EdgeSslVpnLdapAuthenticationServerJson;
        constructor(_json: EdgeSslVpnLdapAuthenticationServerJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get search filter.
            * @returns {string}
            */
        get searchFilter(): string;
        /**
            * Get login attribute name.
            * @returns {string}
            */
        get loginAttributeName(): string;
        /**
            * Get bind password.
            * @returns {string}
            */
        get bindPassword(): string;
        /**
            * Get bind domain name.
            * @returns {string}
            */
        get bindDomainName(): string;
        /**
            * Get search base.
            * @returns {string}
            */
        get searchBase(): string;
        /**
            * Get enable ssl.
            * @returns {boolean}
            */
        get enableSsl(): boolean;
        /**
            * Get timeout.
            * @returns {number}
            */
        get timeout(): number;
        /**
            * Get port.
            * @returns {number}
            */
        get port(): number;
        /**
            * Get ip.
            * @returns {string}
            */
        get ip(): string;
        /**
            * Get type.
            * @returns {EdgeSslVpnAuthServerType}
            */
        get type(): EdgeSslVpnAuthServerType;
        /**
            * Get the json representation of this class.
            * @returns {EdgeSslVpnLdapAuthenticationServerJson}
            */
        get json(): EdgeSslVpnLdapAuthenticationServerJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeSslVpnLocalAuthenticationServerUpdateRequest {
        constructor(edgeSslVpnLocalAuthenticationServerUpdateRequest: EdgeSslVpnLocalAuthenticationServerUpdateRequest);
        constructor(edgeSslVpnLocalAuthenticationServerUpdateRequestJson: EdgeSslVpnLocalAuthenticationServerUpdateRequestJson);
        constructor(enabled: boolean, pwdMinLength: number, pwdMaxLength: number, pwdMinAlphabets: number, pwdMinDigits: number, pwdMinSpecialCharacters: number, allowUserIdWithinPwd: boolean, pwdLifetime: number, pwdExpiryNotification: number, retryCount: number, retryDuration: number, lockoutDuration: number, type: EdgeSslVpnAuthServerType);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get pwd min length.
            * @returns {number}
            */
        get pwdMinLength(): number;
        /**
            * Get pwd max length.
            * @returns {number}
            */
        get pwdMaxLength(): number;
        /**
            * Get pwd min alphabets.
            * @returns {number}
            */
        get pwdMinAlphabets(): number;
        /**
            * Get pwd min digits.
            * @returns {number}
            */
        get pwdMinDigits(): number;
        /**
            * Get pwd min special characters.
            * @returns {number}
            */
        get pwdMinSpecialCharacters(): number;
        /**
            * Get allow user id within pwd.
            * @returns {boolean}
            */
        get allowUserIdWithinPwd(): boolean;
        /**
            * Get pwd lifetime.
            * @returns {number}
            */
        get pwdLifetime(): number;
        /**
            * Get pwd expiry notification.
            * @returns {number}
            */
        get pwdExpiryNotification(): number;
        /**
            * Get retry count.
            * @returns {number}
            */
        get retryCount(): number;
        /**
            * Get retry duration.
            * @returns {number}
            */
        get retryDuration(): number;
        /**
            * Get lockout duration.
            * @returns {number}
            */
        get lockoutDuration(): number;
        /**
            * Get type.
            * @returns {EdgeSslVpnAuthServerType}
            */
        get type(): EdgeSslVpnAuthServerType;
        /**
            * Get the json representation of this class.
            * @returns {EdgeSslVpnLocalAuthenticationServerUpdateRequestJson}
            */
        get json(): EdgeSslVpnLocalAuthenticationServerUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * SslVpnLocalAuthenticationServer class
    */
export class EdgeSslVpnLocalAuthenticationServer extends EdgeSslVpnAuthenticationServer {
        protected _json: EdgeSslVpnLocalAuthenticationServerJson;
        constructor(_json: EdgeSslVpnLocalAuthenticationServerJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get pwd min length.
            * @returns {number}
            */
        get pwdMinLength(): number;
        /**
            * Get pwd max length.
            * @returns {number}
            */
        get pwdMaxLength(): number;
        /**
            * Get pwd min alphabets.
            * @returns {number}
            */
        get pwdMinAlphabets(): number;
        /**
            * Get pwd min digits.
            * @returns {number}
            */
        get pwdMinDigits(): number;
        /**
            * Get pwd min special characters.
            * @returns {number}
            */
        get pwdMinSpecialCharacters(): number;
        /**
            * Get allow user id within pwd.
            * @returns {boolean}
            */
        get allowUserIdWithinPwd(): boolean;
        /**
            * Get pwd lifetime.
            * @returns {number}
            */
        get pwdLifetime(): number;
        /**
            * Get pwd expiry notification.
            * @returns {number}
            */
        get pwdExpiryNotification(): number;
        /**
            * Get retry count.
            * @returns {number}
            */
        get retryCount(): number;
        /**
            * Get retry duration.
            * @returns {number}
            */
        get retryDuration(): number;
        /**
            * Get lockout duration.
            * @returns {number}
            */
        get lockoutDuration(): number;
        /**
            * Get type.
            * @returns {EdgeSslVpnAuthServerType}
            */
        get type(): EdgeSslVpnAuthServerType;
        /**
            * Get the json representation of this class.
            * @returns {EdgeSslVpnLocalAuthenticationServerJson}
            */
        get json(): EdgeSslVpnLocalAuthenticationServerJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeSslVpnPrivateNetworkUpdateRequest {
        constructor(edgeSslVpnPrivateNetworkUpdateRequest: EdgeSslVpnPrivateNetworkUpdateRequest);
        constructor(edgeSslVpnPrivateNetworkUpdateRequestJson: EdgeSslVpnPrivateNetworkUpdateRequestJson);
        constructor(enabled: boolean, description: string, network: string, ports: string, optimize: boolean);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get network.
            * @returns {string}
            */
        get network(): string;
        /**
            * Get ports.
            * @returns {string}
            */
        get ports(): string;
        /**
            * Get optimize.
            * @returns {boolean}
            */
        get optimize(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {EdgeSslVpnPrivateNetworkUpdateRequestJson}
            */
        get json(): EdgeSslVpnPrivateNetworkUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * EdgeSslVpnPrivateNetwork class
    */
export class EdgeSslVpnPrivateNetwork {
        constructor(_json: EdgeSslVpnPrivateNetworkJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get network.
            * @returns {string}
            */
        get network(): string;
        /**
            * Get ports.
            * @returns {string}
            */
        get ports(): string;
        /**
            * Get optimize.
            * @returns {boolean}
            */
        get optimize(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {EdgeSslVpnPrivateNetworkJson}
            */
        get json(): EdgeSslVpnPrivateNetworkJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeSslVpnRadiusAuthenticationServer extends EdgeSslVpnAuthenticationServer {
        protected _json: EdgeSslVpnRadiusAuthenticationServerJson;
        constructor(_json: EdgeSslVpnRadiusAuthenticationServerJson);
        /**
            * Get ip.
            * @returns {string}
            */
        get ip(): string;
        /**
            * Get port.
            * @returns {number}
            */
        get port(): number;
        /**
            * Get timeout.
            * @returns {number}
            */
        get timeout(): number;
        /**
            * Get secret.
            * @returns {string}
            */
        get secret(): string;
        /**
            * Get nas ip.
            * @returns {string}
            */
        get nasIp(): string;
        /**
            * Get retry count.
            * @returns {number}
            */
        get retryCount(): number;
        /**
            * Get type.
            * @returns {EdgeSslVpnAuthServerType}
            */
        get type(): EdgeSslVpnAuthServerType;
        /**
            * Get the json representation of this class.
            * @returns {EdgeSslVpnRadiusAuthenticationServerJson}
            */
        get json(): EdgeSslVpnRadiusAuthenticationServerJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeSslVpnRsaAuthenticationServer extends EdgeSslVpnAuthenticationServer {
        protected _json: EdgeSslVpnRsaAuthenticationServerJson;
        constructor(_json: EdgeSslVpnRsaAuthenticationServerJson);
        /**
            * Get timeout.
            * @returns {number}
            */
        get timeout(): number;
        /**
            * Get source ip.
            * @returns {string}
            */
        get sourceIp(): string;
        /**
            * Get type.
            * @returns {EdgeSslVpnAuthServerType}
            */
        get type(): EdgeSslVpnAuthServerType;
        /**
            * Get the json representation of this class.
            * @returns {EdgeSslVpnRsaAuthenticationServerJson}
            */
        get json(): EdgeSslVpnRsaAuthenticationServerJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeSslVpnServerConfigUpdateRequest {
        constructor(edgeSslVpnServerConfigUpdateRequest: EdgeSslVpnServerConfigUpdateRequest);
        constructor(edgeSslVpnServerConfigUpdateRequestJson: EdgeSslVpnServerConfigUpdateRequestJson);
        constructor(enabled: boolean);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {EdgeSslVpnServerConfigUpdateRequestJson}
            */
        get json(): EdgeSslVpnServerConfigUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeSslVpnServiceUpdateRequest {
        constructor(edgeSslVpnServiceUpdateRequest: EdgeSslVpnServiceUpdateRequest);
        constructor(edgeSslVpnServiceUpdateRequestJson: EdgeSslVpnServiceUpdateRequestJson);
        constructor(edgeUuid: string, enabled: boolean, logEnabled: boolean, logLevel: string, ip: string, port: number, cipherList: Array<string>, privateNetworks: Array<EdgeSslVpnPrivateNetworkUpdateRequestJson>, users: Array<EdgeSslVpnUserUpdateRequestJson>, ipPools: Array<EdgeSslVpnIpPoolUpdateRequestJson>, installPackages: Array<EdgeSslVpnClientInstallPackageUpdateRequestJson>, authenticationConfig: EdgeSslVpnLocalAuthenticationServerUpdateRequestJson, authentication: EdgeSslVpnAuthenticationUpdateRequestJson);
        /**
            * Get edge uuid.
            * @returns {string}
            */
        get edgeUuid(): string;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get log enabled.
            * @returns {boolean}
            */
        get logEnabled(): boolean;
        /**
            * Get log level.
            * @returns {string}
            */
        get logLevel(): string;
        /**
            * Get ip.
            * @returns {string}
            */
        get ip(): string;
        /**
            * Get port.
            * @returns {number}
            */
        get port(): number;
        /**
            * Get cipher list.
            * @returns {Array<string>}
            */
        get cipherList(): Array<string>;
        /**
            * Get private networks.
            * @returns {Array<EdgeSslVpnPrivateNetworkUpdateRequest>}
            */
        get privateNetworks(): Array<EdgeSslVpnPrivateNetworkUpdateRequest>;
        /**
            * Get users.
            * @returns {Array<EdgeSslVpnUserUpdateRequest>}
            */
        get users(): Array<EdgeSslVpnUserUpdateRequest>;
        /**
            * Get ip pools.
            * @returns {Array<EdgeSslVpnIpPoolUpdateRequest>}
            */
        get ipPools(): Array<EdgeSslVpnIpPoolUpdateRequest>;
        /**
            * Get install packages.
            * @returns {Array<EdgeSslVpnClientInstallPackageUpdateRequest>}
            */
        get installPackages(): Array<EdgeSslVpnClientInstallPackageUpdateRequest>;
        /**
            * Get authentication config.
            * @returns {EdgeSslVpnLocalAuthenticationServerUpdateRequest}
            */
        get authenticationConfig(): EdgeSslVpnLocalAuthenticationServerUpdateRequest;
        /**
            * Get authentication.
            * @returns {EdgeSslVpnAuthenticationUpdateRequest}
            */
        get authentication(): EdgeSslVpnAuthenticationUpdateRequest;
        /**
            * Get the json representation of this class.
            * @returns {EdgeSslVpnServiceUpdateRequestJson}
            */
        get json(): EdgeSslVpnServiceUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * EdgeSslVpnService class
    */
export class EdgeSslVpnService {
        constructor(_json: EdgeSslVpnServiceJson);
        /**
            * Get edge uuid.
            * @returns {string}
            */
        get edgeUuid(): string;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get log enabled.
            * @returns {boolean}
            */
        get logEnabled(): boolean;
        /**
            * Get log level.
            * @returns {string}
            */
        get logLevel(): string;
        /**
            * Get ip.
            * @returns {string}
            */
        get ip(): string;
        /**
            * Get port.
            * @returns {number}
            */
        get port(): number;
        /**
            * Get cipher list.
            * @returns {Array<string>}
            */
        get cipherList(): Array<string>;
        /**
            * Get private networks.
            * @returns {Array<EdgeSslVpnPrivateNetwork>}
            */
        get privateNetworks(): Array<EdgeSslVpnPrivateNetwork>;
        /**
            * Get users.
            * @returns {Array<EdgeSslVpnUser>}
            */
        get users(): Array<EdgeSslVpnUser>;
        /**
            * Get ip pools.
            * @returns {Array<EdgeSslVpnIpPool>}
            */
        get ipPools(): Array<EdgeSslVpnIpPool>;
        /**
            * Get client install packages.
            * @returns {Array<EdgeSslVpnClientInstallPackage>}
            */
        get clientInstallPackages(): Array<EdgeSslVpnClientInstallPackage>;
        /**
            * Get authentication config.
            * @returns {EdgeSslVpnLocalAuthenticationServerJson}
            */
        get authenticationConfig(): EdgeSslVpnLocalAuthenticationServer;
        /**
            * Get authentication.
            * @returns {EdgeSslVpnAuthentication}
            */
        get authentication(): EdgeSslVpnAuthentication;
        /**
            * Get the json representation of this class.
            * @returns {EdgeSslVpnServiceJson}
            */
        get json(): EdgeSslVpnServiceJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class EdgeSslVpnUserUpdateRequest {
        constructor(edgeSslVpnUserUpdateRequest: EdgeSslVpnUserUpdateRequest);
        constructor(edgeSslVpnUserUpdateRequestJson: EdgeSslVpnUserUpdateRequestJson);
        constructor(userId: string, objectId: string, firstName: string, lastName: string, description: string, disableAccount: boolean, password: string, passwordNeverExpires: boolean, changePwdOnNextLogin: boolean);
        /**
            * Get user id.
            * @returns {string}
            */
        get userId(): string;
        /**
            * Get object id.
            * @returns {string}
            */
        get objectId(): string;
        /**
            * Get first name.
            * @returns {string}
            */
        get firstName(): string;
        /**
            * Get last name.
            * @returns {string}
            */
        get lastName(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get disable account.
            * @returns {boolean}
            */
        get disableAccount(): boolean;
        /**
            * Get password.
            * @returns {string}
            */
        get password(): string;
        /**
            * Get password never expires.
            * @returns {boolean}
            */
        get passwordNeverExpires(): boolean;
        /**
            * Get change pwd on next login.
            * @returns {boolean}
            */
        get changePwdOnNextLogin(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {EdgeSslVpnUserUpdateRequestJson}
            */
        get json(): EdgeSslVpnUserUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * EdgeSslVpnUser class
    */
export class EdgeSslVpnUser {
        constructor(_json: EdgeSslVpnUserJson);
        /**
            * Get user id.
            * @returns {string}
            */
        get userId(): string;
        /**
            * Get object id.
            * @returns {string}
            */
        get objectId(): string;
        /**
            * Get first name.
            * @returns {string}
            */
        get firstName(): string;
        /**
            * Get last name.
            * @returns {string}
            */
        get lastName(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get disable account.
            * @returns {boolean}
            */
        get disableAccount(): boolean;
        /**
            * Get password.
            * @returns {string}
            */
        get password(): string;
        /**
            * Get password never expires.
            * @returns {boolean}
            */
        get passwordNeverExpires(): boolean;
        /**
            * Get change pwd on next login.
            * @returns {boolean}
            */
        get changePwdOnNextLogin(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {EdgeSslVpnUserJson}
            */
        get json(): EdgeSslVpnUserJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
  * Interface for Static Route JSON representation
  */
export interface StaticRouteJson {
    edge_uuid: string;
    idx: number;
    name: string;
    network: string;
    next_hop_ip: string;
    interface_type: string;
    interface: string;
}

/**
  * Static Route Update Request JSON interface.
  */
export interface StaticRouteUpdateRequestJson {
    edge_uuid: string;
    idx: number;
    name: string;
    network: string;
    next_hop_ip: string;
    interface_type: string;
    interface: string;
}

/**
  * Interface for Static Routing Service JSON representation
  */
export interface StaticRoutingServiceJson {
    edge_uuid: string;
    enabled: boolean;
    routes: Array<StaticRouteJson> | null;
}

/**
  * Static Routing Update Request JSON interface.
  */
export interface StaticRoutingUpdateRequestJson {
    edge_uuid: string;
    enabled: boolean;
    routes: Array<StaticRouteUpdateRequestJson>;
}

/**
    * Static Route Update Request.
    */
export class StaticRouteUpdateRequest {
        constructor(staticRouteUpdateRequest: StaticRouteUpdateRequest);
        constructor(staticRouteUpdateRequestJson: StaticRouteUpdateRequestJson);
        constructor(edgeUuid: string, idx: number, name: string, network: string, nextHopIP: string, interfaceType: string, _interface: string);
        /**
            * Get edge uuid.
            * @returns {string}
            */
        get edgeUuid(): string;
        /**
            * Get idx.
            * @returns {number}
            */
        get idx(): number;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get network.
            * @returns {string}
            */
        get network(): string;
        /**
            * Get next hop ip.
            * @returns {string}
            */
        get nextHopIP(): string;
        /**
            * Get interface type.
            * @returns {string}
            */
        get interfaceType(): string;
        /**
            * Get interface.
            * @returns {string}
            */
        get interface(): string;
        /**
            * Get the json representation of this class.
            * @returns {StaticRouteUpdateRequestJson}
            */
        get json(): StaticRouteUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * StaticRoute class
    */
export class StaticRoute {
        constructor(_json: StaticRouteJson);
        /**
            * Get edge uuid
            * @returns {string | null}
            */
        get edgeUuid(): string | null;
        /**
            * Get index
            * @returns {number}
            */
        get idx(): number;
        /**
            * Get name
            * @returns {string | null}
            */
        get name(): string | null;
        /**
            * Get network
            * @returns {string | null}
            */
        get network(): string | null;
        /**
            * Get next hop IP
            * @returns {string | null}
            */
        get nextHopIp(): string | null;
        /**
            * Get interface type
            * @returns {string | null}
            */
        get interfaceType(): string | null;
        /**
            * Get interface
            * @returns {string | null}
            */
        get interface(): string | null;
        /**
            * Get the __json__ representation of this class.
            * @returns {StaticRouteJson}
            */
        get json(): StaticRouteJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Static Routing Update Request.
    */
export class StaticRoutingUpdateRequest {
        constructor(StaticRoutingUpdateRequest: StaticRoutingUpdateRequest);
        constructor(StaticRoutingUpdateRequestJson: StaticRoutingUpdateRequestJson);
        constructor(edgeUuid: string, enabled: boolean, routes: Array<StaticRouteUpdateRequestJson>);
        /**
            * Get edge uuid.
            * @returns {string}
            */
        get edgeUuid(): string;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get routes.
            * @returns {Array<StaticRouteUpdateRequest>}
            */
        get routes(): Array<StaticRouteUpdateRequest>;
        /**
            * Get the json representation of this class.
            * @returns {StaticRoutingUpdateRequestJson}
            */
        get json(): StaticRoutingUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * StaticRouting class
    */
export class StaticRouting {
        constructor(_json: StaticRoutingServiceJson);
        /**
            * Get edge uuid
            * @returns {string | null}
            */
        get edgeUuid(): string | null;
        /**
            * Check weather static routing is enabled or not
            * @returns {boolean | null}
            */
        get enabled(): boolean | null;
        /**
            * Get list of static routes.
            * @returns {Array<StaticRoute>}
            */
        get routes(): Array<StaticRoute>;
        /**
            * Get the __json__ representation of this class.
            * @returns {StaticRoutingServiceJson}
            */
        get json(): StaticRoutingServiceJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
  * Interface for Edge SubnetParticipation JSON representation.
  */
export interface EdgeSubnetParticipationJson {
    gateway: string | null;
    netmask: string | null;
    ip_address: string | null;
    ip_ranges: Array<IpRangeJson> | null;
}

/**
    * Edge Gateway Subnet Participation.
    */
export class SubnetParticipation {
        constructor(_json: EdgeSubnetParticipationJson);
        /**
            * Gets the gateway address on the network.
            * @returns {string | null} gateway address
            */
        get gatewayAddress(): string | null;
        /**
            * Gets the networks netmask.
            * @returns {string | null} netmask
            */
        get netmask(): string | null;
        /**
            * Gets the IP address.
            * @returns {string | null} IP address
            */
        get ipAddress(): string | null;
        /**
            * Gets the assigned IP ranges.
            * @returns {[IpRange]} IP address ranges
            */
        get ipRanges(): Array<IpRange>;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {EdgeSubnetParticipationJson} the JSON representation
            */
        get json(): EdgeSubnetParticipationJson;
}

export interface EventFilterParamsJson {
    entity_uuid: string;
    entity_type: EntityType;
    include_descendant_events?: boolean;
    type?: EventType;
    task_uuid?: string;
    initiated_by?: string;
    timestamp_after?: number;
    timestamp_before?: number;
    query_timestamp?: number;
    offset?: number;
    limit?: number;
    order?: PagingOrder;
}

export interface EventFilterQueryParams {
    entityUuid: string;
    entityType: EntityType;
    includeDescendantEvents?: boolean;
    type?: EventType;
    taskUuid?: string;
    initiatedBy?: string;
    timestampAfter?: number;
    timestampBefore?: number;
    queryTimestamp?: number;
    offset?: number;
    limit?: number;
    order?: PagingOrder;
}

/**
  * Interface for Event json properties.
  */
export interface EventJson {
    uuid: string;
    owner_type: EventOwnerType;
    owner_id: string;
    entity_uuid: string;
    entity_name: string;
    entity_type: EntityType;
    type: EventType;
    timestamp: number;
    task_uuid?: string;
    initiated_by_username: string;
    initiated_by_full_name: string;
    details: string;
}

/**
  * Interface for event list json
  */
export interface EventListJson {
    current_page_parameters: EventFilterParamsJson;
    next_page_parameters: EventFilterParamsJson;
    total_records: number;
    last_page: boolean;
    data: Array<EventJson>;
}

/**
  * Enumeration of possible event owner types.
  */
export type EventOwnerType = 'COMPANY' | 'USER';

/**
  * Enumeration of possible event types.
  */
export type EventType = 'ORG_CREATE' | 'ORG_DELETE' | 'ORG_MODIFY' | 'ORG_ANTIMALWARE_REPORT_GENERATE' | 'ORG_BILLING_REPORT_GENERATE' | 'ORG_CONTINUITY_PROTECTION_REPORT_GENERATE' | 'ORG_DR_ADMIN_REPORT_GENERATE' | 'ORG_DPI_EVENT_REPORT_GENERATE' | 'ORG_ECS_EVENT_HISTORY_REPORT_GENERATE' | 'ORG_FAILOVER_TEST_REPORT_GENERATE' | 'ORG_FIREWALL_EVENT_REPORT_GENERATE' | 'ORG_HIPAA_REPORT_GENERATE' | 'ORG_INTEGRITY_EVENT_REPORT_GENERATE' | 'ORG_LOG_INSPECTION_REPORT_GENERATE' | 'ORG_LOGIN_EVENT_HISTORY_REPORT_GENERATE' | 'ORG_SUPPORT_REQUEST_REPORT_GENERATE' | 'ORG_VM_ENCRYPTION_REPORT_GENERATE' | 'ORG_VULNERABILITY_REPORT_GENERATE' | 'ORG_WEB_REPUTATION_REPORT_GENERATE' | 'ORG_DR_RUNBOOK_REPORT_GENERATE' | 'ORG_VM_INVENTORY_REPORT_GENERATE' | 'ORG_BILL_CALCULATED' | 'ORG_DELETE_DNS_ZONE' | 'ORG_ADD_DNS_ZONE' | 'ORG_PUSH_DNS_ZONE' | 'ORG_DELETE_DNS_RECORD' | 'ORG_UPDATE_DNS_RECORD' | 'ORG_ADD_DNS_RECORD' | 'ORG_VULNERABILITY_SCAN_LAUNCH' | 'ORG_VULNERABILITY_SCAN_PAUSE' | 'ORG_VULNERABILITY_SCAN_STOP' | 'ORG_VULNERABILITY_SCAN_RESUME' | 'ORG_VDI_AUTOMATION_DEPLOY_REQUEST' | 'ORG_VDI_AUTOMATION_UNDEPLOY_REQUEST' | 'ORG_VDI_USER_CREATED' | 'ORG_VDI_USER_UPDATED' | 'ORG_VDI_USER_DELETED' | 'ORG_VDI_TEAM_CREATED' | 'ORG_VDI_TEAM_UPDATED' | 'ORG_VDI_TEAM_DELETED' | 'ORG_VDI_AUTOMATION_GROUP_CREATED' | 'ORG_VDI_AUTOMATION_GROUP_UPDATED' | 'ORG_VDI_AUTOMATION_GROUP_DELETED' | 'ORG_BACKUP_POLICY_CREATE_REQUEST' | 'ORG_BACKUP_POLICY_UPDATE_REQUEST' | 'ORG_BACKUP_POLICY_DELETE_REQUEST' | 'EDGE_CREATE' | 'EDGE_DELETE' | 'EDGE_MODIFY' | 'EDGE_UPGRADE' | 'EDGE_FIREWALL_MODIFIED' | 'EDGE_DHCP_MODIFIED' | 'EDGE_ROUTING_MODIFIED' | 'EDGE_NAT_MODIFIED' | 'EDGE_IPSEC_VPN_SERVICE_UPDATE' | 'EDGE_L2_VPN_MODIFIED' | 'EDGE_CERTIFICATE_CREATE' | 'EDGE_CERTIFICATE_DELETE' | 'EDGE_CSR_CREATE' | 'EDGE_CSR_DELETE' | 'EDGE_CRL_CREATE' | 'EDGE_CRL_DELETE' | 'EDGE_SYSLOG_MODIFIED' | 'EDGE_SSH_SETTINGS_MODIFIED' | 'EDGE_SSL_VPN_MODIFIED' | 'VM_CREATE' | 'VM_CREATE_REQUEST' | 'VM_DELETE' | 'VM_MODIFY' | 'VM_MODIFY_REQUEST' | 'VM_DEPLOY' | 'VM_DEPLOY_REQUEST' | 'VM_UNDEPLOY_REQUEST' | 'VM_UNDEPLOY' | 'VM_CONSOLIDATE' | 'VM_CONSOLIDATE_REQUEST' | 'VM_RELOCATE' | 'VM_RELOCATE_REQUEST' | 'VM_POWER_STATE_CHANGE' | 'VM_IP_ADDRESS_CHANGED' | 'VM_RESTORE_BACKUP_START' | 'VM_RESTORE_BACKUP_END' | 'VM_IDENTITY_CHANGED' | 'VM_BILL_CALCULATED' | 'VM_FIREWALL_EVENT' | 'VM_ANTIMALWARE_EVENT' | 'VM_WEB_REPUTATION_EVENT' | 'VM_LOG_INSPECTION_EVENT' | 'VM_DPI_EVENT' | 'VM_INTEGRITY_EVENT' | 'VM_UPDATE_VMWARE_TOOLS_UPGRADE_POLICY' | 'VM_UPDATE_BOOT_OPTIONS' | 'VM_VMWARE_TOOLS_REINSTALL' | 'VM_DRS_RULES_UPDATE' | 'VM_DRS_RULES_ADD' | 'VM_DRS_RULES_DELETE' | 'VM_VMWARE_TOOLS_UPGRADE' | 'VM_BACKUP_RESTORE_SNAPSHOT_REQUEST' | 'VM_BACKUP_FILE_BUNDLE_DOWNLOAD_REQUEST' | 'VM_BACKUP_FILE_DOWNLOAD_REQUEST' | 'VM_BACKUP_FILE_BUNDLE_CREATE' | 'VAPP_CREATE' | 'VAPP_IMPORT' | 'VAPP_DELETE' | 'VAPP_MODIFY' | 'VAPP_DEPLOY' | 'VAPP_UNDEPLOY' | 'VAPP_UPLOAD_TIMEOUT' | 'VAPP_RUNTIME_LEASE_EXPIRE' | 'VAPP_IMPORT_REQUEST' | 'VAPP_MODIFY_REQUEST' | 'VAPP_CREATE_REQUEST' | 'VAPP_DELETE_REQUEST' | 'VAPP_DEPLOY_REQUEST' | 'VAPP_UNDEPLOY_REQUEST' | 'VAPP_LEASE_EXPIRATION_CHANGED' | 'VAPP_BILL_CALCULATED' | 'VAPP_ENABLE_DOWNLOAD' | 'VAPP_DOWNLOAD' | 'VDC_VM_INVENTORY_REPORT_GENERATE' | 'VDC_CREATE_REQUEST' | 'VDC_DELETE_REQUEST' | 'VDC_CREATE' | 'VDC_DELETE' | 'VDC_MODIFY' | 'VDC_FAST_PROVISIONING_MODIFY' | 'VDC_THIN_PROVISIONING_MODIFY' | 'VDC_BILL_CALCULATED' | 'VDC_CONTRACT_CHANGED' | 'VDC_IP_SET_CREATED' | 'VDC_IP_SET_UPDATED' | 'VDC_IP_SET_DELETED' | 'VDC_MAC_SET_CREATED' | 'VDC_MAC_SET_UPDATED' | 'VDC_MAC_SET_DELETED' | 'VDC_SECURITY_GROUP_CREATED' | 'VDC_SECURITY_GROUP_UPDATED' | 'VDC_SECURITY_GROUP_DELETED' | 'VDC_SECURITY_TAG_CREATED' | 'VDC_SECURITY_TAG_UPDATED' | 'VDC_SECURITY_TAG_DELETED' | 'VDC_BACKUP_POLICY_CREATE_REQUEST' | 'VDC_BACKUP_POLICY_UPDATE_REQUEST' | 'VDC_BACKUP_POLICY_DELETE_REQUEST' | 'VDC_BACKUP_RESTORE_SNAPSHOTS_REQUEST' | 'PROVIDER_VDC_CREATE' | 'PROVIDER_VDC_CREATE_REQUEST' | 'PROVIDER_VDC_DELETE' | 'PROVIDER_VDC_DELETE_REQUEST' | 'PROVIDER_VDC_MODIFY' | 'VAPP_NETWORK_CREATE' | 'VAPP_NETWORK_DELETE' | 'VAPP_NETWORK_MODIFY' | 'VAPP_NETWORK_DEPLOY' | 'VAPP_NETWORK_UNDEPLOY' | 'VAPP_NETWORK_UPGRADE' | 'ORG_VDC_NETWORK_CREATE' | 'ORG_VDC_NETWORK_DELETE' | 'ORG_VDC_NETWORK_MODIFY' | 'ORG_VDC_NETWORK_DEPLOY' | 'ORG_VDC_NETWORK_UNDEPLOY' | 'ORG_VDC_NETWORK_UPGRADE' | 'EXTERNAL_NETWORK_CREATE' | 'EXTERNAL_NETWORK_DELETE' | 'EXTERNAL_NETWORK_MODIFY' | 'EXTERNAL_NETWORK_DEPLOY' | 'EXTERNAL_NETWORK_UNDEPLOY' | 'EXTERNAL_NETWORK_UPGRADE' | 'MEDIA_CREATE' | 'MEDIA_IMPORT' | 'MEDIA_MODIFY' | 'MEDIA_DELETE' | 'MEDIA_CREATE_REQUEST' | 'MEDIA_IMPORT_REQUEST' | 'MEDIA_MODIFY_REQUEST' | 'MEDIA_DELETE_REQUEST' | 'MEDIA_UPLOAD_TIMEOUT' | 'MEDIA_QUARANTINE_REJECT' | 'VAPP_TEMPLATE_CREATE' | 'VAPP_TEMPLATE_IMPORT' | 'VAPP_TEMPLATE_MODIFY' | 'VAPP_TEMPLATE_DELETE' | 'VAPP_TEMPLATE_CREATE_REQUEST' | 'VAPP_TEMPLATE_IMPORT_REQUEST' | 'VAPP_TEMPLATE_MODIFY_REQUEST' | 'VAPP_TEMPLATE_DELETE_REQUEST' | 'VAPP_TEMPLATE_ENABLE_DOWNLOAD' | 'VAPP_TEMPLATE_DOWNLOAD' | 'CATALOG_CREATE' | 'CATALOG_DELETE' | 'CATALOG_MODIFY' | 'CATALOG_PUBLISH' | 'VCD_USER_SESSION_LOGIN' | 'VCD_USER_SESSION_AUTHORIZE' | 'VCD_USER_IMPORT' | 'VCD_USER_REMOVE' | 'VCD_USER_MODIFY' | 'VCD_USER_LOCKOUT' | 'VCD_USER_UNLOCK' | 'VCD_USER_LOCK_EXPIRED' | 'VCD_USER_CREATE' | 'VCD_USER_DELETE' | 'VCD_USER_ENABLE' | 'VCD_USER_DISABLE' | 'USER_LOGIN' | 'USER_LOGOUT' | 'USER_REFRESH_TOKEN' | 'USER_UPDATE_PASSWORD' | 'USER_UPDATE_TOTP' | 'USER_REMOVE_TOTP' | 'USER_SEND_RESET_PASSWORD' | 'USER_RESET_PASSWORD' | 'USER_IMPERSONATE' | 'TASK_CREATE' | 'TASK_START' | 'TASK_ABORT' | 'TASK_COMPLETE' | 'TASK_FAIL' | 'STORAGE_PROFILE_CREATE' | 'STORAGE_PROFILE_DELETE' | 'STORAGE_PROFILE_MODIFY' | 'STORAGE_PROFILE_ADD' | 'STORAGE_PROFILE_REMOVE' | 'SUPPORT_TICKET_CREATED' | 'SUPPORT_TICKET_UPDATED' | 'SUPPORT_TICKET_COMMENT_CREATED' | 'SUPPORT_TICKET_ATTACHMENT_CREATED' | 'VPG_LIVE_FAILOVER_START' | 'VPG_TEST_FAILOVER_START' | 'VPG_TEST_FAILOVER_STOP' | 'VPG_LIVE_FAILOVER_ROLLBACK' | 'VPG_LIVE_FAILOVER_ROLLBACK_FAILED' | 'VPG_LIVE_FAILOVER_COMMIT_FAILED' | 'VPG_LIVE_FAILOVER_COMMIT' | 'DISK_DETACH' | 'DISK_ATTACH' | 'DISK_CREATE_REQUEST' | 'DISK_CREATE' | 'DISK_DELETE_REQUEST' | 'DISK_DELETE' | 'DR_RUNBOOK_CREATE' | 'DR_RUNBOOK_UPDATE' | 'DR_RUNBOOK_DELETE' | 'USER_CREATE' | 'USER_UPDATE' | 'USER_DELETE' | 'VAC_COMPANY_UPDATE' | 'VAC_COMPANY_STORAGE_QUOTA_UPDATE' | 'VAC_COMPANY_DELETE' | 'VAC_COMPANY_CREATE' | 'O365_RESTORE_SESSION_STOP' | 'O365_RESTORE_SESSION_START' | 'O365_JOB_START' | 'O365_JOB_STOP' | 'O365_JOB_DISABLE' | 'O365_JOB_ENABLE' | 'O365_JOB_MODIFY' | 'O365_JOB_DELETE' | 'O365_JOB_CREATE' | 'O365_ORGANIZATION_CREATE' | 'O365_ORGANIZATION_DELETE' | 'VDC_DISTRIBUTED_FIREWALL_ENABLED' | 'VDC_DISTRIBUTED_FIREWALL_UPDATED' | 'VDC_DISTRIBUTED_FIREWALL_RULE_CREATED' | 'VDC_DISTRIBUTED_FIREWALL_RULE_DELETED' | 'VDC_DISTRIBUTED_FIREWALL_RULE_UPDATED' | 'BACKUP_GROUP_CREATE_REQUEST' | 'BACKUP_GROUP_UPDATE_REQUEST' | 'BACKUP_GROUP_DELETE_REQUEST' | 'COMPANY_ROLE_CREATE' | 'COMPANY_ROLE_MODIFY' | 'COMPANY_ROLE_DELETE' | 'COMPANY_ROLE_ASSIGNED' | 'COMPANY_ROLE_UNASSIGNED' | 'COMPANY_TWO_FACTOR_SETTINGS_UPDATE' | 'IDENTITY_PROVIDER_CREATE' | 'IDENTITY_PROVIDER_UPDATE' | 'IDENTITY_PROVIDER_DELETE';

/**
    * Class EventFilterParams
    */
export class EventFilterParams implements EventFilterQueryParams {
        constructor(eventFilterParams: EventFilterParams);
        constructor(eventFilterParamsJson: EventFilterParamsJson);
        constructor(entityUuid: string, entityType: EntityType, includeDescendantEvents?: boolean, type?: EventType, taskUuid?: string, initiatedBy?: string, timestampAfter?: number, timestampBefore?: number, queryTimestamp?: number, offset?: number, limit?: number, order?: PagingOrder);
        /**
            * Get entity uuid.
            * @returns {string}
            */
        get entityUuid(): string;
        /**
            * Set entity uuid
            * @param entityUuid
            * @returns {EventFilterParams}
            */
        setEntityUuid(entityUuid: string): EventFilterParams;
        /**
            * Get entity type.
            * @returns {EntityType}
            */
        get entityType(): EntityType;
        /**
            * Set entity type
            * @param entityType
            * @returns {EventFilterParams}
            */
        setEntityType(entityType: EntityType): EventFilterParams;
        /**
            * Get include descendant events.
            * @returns {boolean | undefined}
            */
        get includeDescendantEvents(): boolean | undefined;
        /**
            * Set include descendant events.
            * @param includeDescendantEvents
            * @returns {EventFilterParams}
            */
        setIncludeDescendantEvents(includeDescendantEvents: boolean): EventFilterParams;
        /**
            * Get type.
            * @returns {EventType | undefined}
            */
        get type(): EventType | undefined;
        /**
            * Set event type.
            * @param type
            * @returns {EventFilterParams}
            */
        setType(type: EventType): EventFilterParams;
        /**
            * Get task uuid.
            * @returns {string | undefined}
            */
        get taskUuid(): string | undefined;
        /**
            * Set task uuid.
            * @param taskUuid
            * @returns {EventFilterParams}
            */
        setTaskUuid(taskUuid: string): EventFilterParams;
        /**
            * Get initiated by.
            * @returns {string | undefined}
            */
        get initiatedBy(): string | undefined;
        /**
            * Set initiated by.
            * @param initiatedBy
            * @returns {EventFilterParams}
            */
        setInitiatedBy(initiatedBy: string): EventFilterParams;
        /**
            * Get timestamp after.
            * @returns {number | undefined}
            */
        get timestampAfter(): number | undefined;
        /**
            * Set timestamp after.
            * @param timestampAfter
            * @returns {EventFilterParams}
            */
        setTimestampAfter(timestampAfter: number): EventFilterParams;
        /**
            * Get timestamp before.
            * @returns {number | undefined}
            */
        get timestampBefore(): number | undefined;
        /**
            * Set timestamp before.
            * @param timestampBefore
            * @returns {EventFilterParams}
            */
        setTimestampBefore(timestampBefore: number): EventFilterParams;
        /**
            * Get query timestamp.
            * @returns {number | undefined}
            */
        get queryTimestamp(): number | undefined;
        /**
            * Set query timestamp.
            * @returns {EventFilterParams}
            */
        setQueryTimestamp(queryTimestamp: number): EventFilterParams;
        /**
            * Get offset.
            * @returns {number | undefined}
            */
        get offset(): number | undefined;
        /**
            * Set offset.
            * @param offset
            * @returns {EventFilterParams}
            */
        setOffset(offset: number): EventFilterParams;
        /**
            * Get limit.
            * @returns {number | undefined}
            */
        get limit(): number | undefined;
        /**
            * Set limit.
            * @param limit
            * @returns {EventFilterParams}
            */
        setLimit(limit: number): EventFilterParams;
        /**
            * Get order.
            * @returns {PagingOrder | undefined}
            */
        get order(): PagingOrder | undefined;
        /**
            * Set order.
            * @param order
            * @returns {EventFilterParams}
            */
        setOrder(order: PagingOrder): EventFilterParams;
        /**
            * Get the json representation of this class.
            * @returns {EventFilterParamsJson}
            */
        get json(): EventFilterParamsJson;
        /**
            * Get query params.
            */
        getQueryParams(): EventFilterQueryParams;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Class EventList
    */
export class EventList {
        constructor(_json: EventListJson);
        /**
            * Get current page parameters.
            * @returns {EventFilterParams}
            */
        get currentPageParameters(): EventFilterParams;
        /**
            * Get next page parameters.
            * @returns {EventFilterParams}
            */
        get nextPageParameters(): EventFilterParams;
        /**
            * Get total records.
            * @returns {number}
            */
        get totalRecords(): number;
        /**
            * Get last page.
            * @returns {boolean}
            */
        get lastPage(): boolean;
        /**
            * Get data.
            * @returns {Array<Event>}
            */
        get data(): Array<Event>;
        /**
            * Get the json representation of this class.
            * @returns {EventListJson}
            */
        get json(): EventListJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Event.
    */
export class Event {
        constructor(_json: EventJson);
        /**
            * Gets an event by UUID.
            * @param uuid event UUID
            * @returns {Promise<Event>} promise that resolves with the Event
            */
        static getEvent(uuid: string): Promise<Event>;
        /**
            * Get a list of events depending on filter params.
            * @param filterParams
            * @returns {Promise<EventList>} promise that resolves with the EventList
            */
        static getEvents(filterParams: EventFilterParams): Promise<EventList>;
        /**
            * Gets the event UUID.
            * @returns {string} the UUID
            */
        get uuid(): string;
        /**
            * Gets the event owner type.
            * @returns {EventOwnerType} the owner type
            */
        get ownerType(): EventOwnerType;
        /**
            * Gets the event owner ID.
            * @returns {string} the owner ID
            */
        get ownerId(): string;
        /**
            * Gets the entity UUID.
            * @returns {string} the entity UUID
            */
        get entityUuid(): string;
        /**
            * Gets the entity type.
            * @returns {EntityType} the entity type
            */
        get entityType(): EntityType;
        /**
            * Gets the entity name.
            * @returns {string} the entity name
            */
        get entityName(): string;
        /**
            * Gets the event type.
            * @returns {EventType} the event type
            */
        get type(): EventType;
        /**
            * Gets the event timestamp.
            * @returns {Date} the event timestamp
            */
        get timestamp(): Date;
        /**
            * Gets the UUID of the task that is associated with the event or null if not applicable.
            * @returns {string | null} the task UUID or null
            */
        get taskUuid(): string | null;
        /**
            * Gets the username of the user who caused the event.
            * @returns {string} the username
            */
        get initiatedByUsername(): string;
        /**
            * Gets the full name of the user who caused the event.
            * @returns {string} the user's full name
            */
        get initiatedByFullName(): string;
        /**
            * Gets the string describing the event.
            * @returns {string} the event description
            */
        get details(): string;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {EventJson} the API json object
            */
        get json(): EventJson;
}

export type AccessType = 'WRITE' | 'READ';

/**
  * Enumeration of iland Permission keys.
  */
export type PermissionType = 'VIEW_ILAND_O365' | 'VIEW_ILAND_O365_BILLING' | 'VIEW_ILAND_O365_ORGANIZATION' | 'VIEW_ILAND_O365_JOB' | 'VIEW_ILAND_O365_JOB_SESSION' | 'VIEW_ILAND_O365_RESTORE_SESSION' | 'VIEW_ILAND_O365_LOCATION_BILLING' | 'VIEW_ILAND_O365_LOCATION' | 'MANAGE_ILAND_O365_ORGANIZATION' | 'MANAGE_ILAND_O365_RESTORE_SESSION' | 'MANAGE_ILAND_O365_JOB' | 'CREATE_ILAND_O365_JOB' | 'DELETE_ILAND_O365_JOB' | 'CREATE_ILAND_O365_ORGANIZATION' | 'DELETE_ILAND_O365_ORGANIZATION' | 'VIEW_ILAND_CLOUD_BACKUP_GROUP' | 'MANAGE_ILAND_CLOUD_BACKUP_GROUP_CONFIGURATION' | 'DELETE_ILAND_CLOUD_BACKUP_GROUP' | 'VIEW_ILAND_BACKUP_TENANT' | 'MANAGE_ILAND_BACKUP_TENANT_STORAGE' | 'MANAGE_ILAND_BACKUP_TENANT_PASSWORD' | 'MANAGE_ILAND_BACKUP_TENANT' | 'CREATE_ILAND_BACKUP_TENANT' | 'DELETE_ILAND_BACKUP_TENANT' | 'MANAGE_ILAND_BACKUP_TENANT_JOB' | 'VIEW_ILAND_BACKUP_LOCATION' | 'VIEW_ILAND_BACKUP_LOCATION_BILLING' | 'MANAGE_ILAND_BACKUP_DATA_CENTER_STORAGE' | 'VIEW_ILAND_CLOUD_VM' | 'VIEW_ILAND_CLOUD_VM_BILLING' | 'ACCESS_ILAND_CLOUD_VM_CONSOLE' | 'MANAGE_ILAND_CLOUD_VM_POWER_STATE' | 'MANAGE_ILAND_CLOUD_VM_CONFIGURATION' | 'MANAGE_ILAND_CLOUD_VM_SNAPSHOTS' | 'COPY_MOVE_RESTORE_ILAND_CLOUD_VM' | 'DELETE_ILAND_CLOUD_VM' | 'VIEW_ILAND_CLOUD_VAPP_NETWORK' | 'MANAGE_ILAND_CLOUD_VAPP_NETWORK_CONFIGURATION' | 'DELETE_ILAND_CLOUD_VAPP_NETWORK' | 'VIEW_ILAND_CLOUD_VAPP' | 'VIEW_ILAND_CLOUD_VAPP_BILLING' | 'MANAGE_ILAND_CLOUD_VAPP_POWER_STATE' | 'MANAGE_ILAND_CLOUD_VAPP_CONFIGURATION' | 'MANAGE_ILAND_CLOUD_VAPP_SNAPSHOTS' | 'MANAGE_ILAND_CLOUD_VAPP_LEASES' | 'COPY_MOVE_DOWNLOAD_ILAND_CLOUD_VAPP' | 'DELETE_ILAND_CLOUD_VAPP' | 'CREATE_ILAND_CLOUD_VAPP_VMS' | 'CREATE_ILAND_CLOUD_VAPP_NETWORKS' | 'VIEW_ILAND_CLOUD_INTERNAL_NETWORK' | 'MANAGE_ILAND_CLOUD_INTERNAL_NETWORK_CONFIGURATION' | 'DELETE_ILAND_CLOUD_INTERNAL_NETWORK' | 'VIEW_ILAND_CLOUD_EDGE' | 'MANAGE_ILAND_CLOUD_EDGE_DHCP_CONFIGURATION' | 'MANAGE_ILAND_CLOUD_EDGE_LOAD_BALANCER_CONFIGURATION' | 'MANAGE_ILAND_CLOUD_EDGE_STATIC_ROUTING_CONFIGURATION' | 'MANAGE_ILAND_CLOUD_EDGE_RATE_LIMIT_CONFIGURATION' | 'MANAGE_ILAND_CLOUD_EDGE_IPSEC_VPN_CONFIGURATION' | 'MANAGE_ILAND_CLOUD_EDGE_SSL_VPN_CONFIGURATION' | 'MANAGE_ILAND_CLOUD_EDGE_FIREWALL_CONFIGURATION' | 'MANAGE_ILAND_CLOUD_EDGE_NAT_CONFIGURATION' | 'MANAGE_ILAND_CLOUD_EDGE_L2_VPN_CONFIGURATION' | 'MANAGE_ILAND_CLOUD_EDGE_CERTIFICATE_CONFIGURATION' | 'MANAGE_ILAND_CLOUD_EDGE_SETTINGS_CONFIGURATION' | 'VIEW_ILAND_CLOUD_VDC' | 'VIEW_ILAND_CLOUD_VDC_BILLING' | 'MANAGE_ILAND_CLOUD_VDC_CONFIGURATION' | 'CREATE_ILAND_CLOUD_VDC_VAPPS' | 'CREATE_ILAND_CLOUD_VDC_CATALOG_ITEMS' | 'CREATE_ILAND_CLOUD_VDC_INTERNAL_NETWORKS' | 'VIEW_ILAND_CLOUD_VAPP_TEMPLATE' | 'MANAGE_ILAND_CLOUD_VAPP_TEMPLATE_CONFIGURATION' | 'DOWNLOAD_ILAND_CLOUD_VAPP_TEMPLATE' | 'DELETE_ILAND_CLOUD_VAPP_TEMPLATE' | 'VIEW_ILAND_CLOUD_MEDIA' | 'MANAGE_ILAND_CLOUD_MEDIA_CONFIGURATION' | 'CLONE_DOWNLOAD_ILAND_CLOUD_MEDIA' | 'DELETE_ILAND_CLOUD_MEDIA' | 'VIEW_ILAND_CLOUD_CATALOG' | 'MANAGE_ILAND_CLOUD_CATALOG_CONFIGURATION' | 'DELETE_ILAND_CLOUD_CATALOG' | 'CREATE_ILAND_CLOUD_CATALOG_VAPP_TEMPLATES' | 'CREATE_ILAND_CLOUD_CATALOG_MEDIA' | 'VIEW_ILAND_CLOUD_VCC_FAILOVER_PLAN' | 'TEST_ILAND_CLOUD_VCC_FAILOVER_PLAN' | 'START_ILAND_CLOUD_VCC_FAILOVER_PLAN' | 'UNDO_ILAND_CLOUD_VCC_FAILOVER_PLAN' | 'VIEW_ILAND_CLOUD_VPG' | 'MANAGE_ILAND_CLOUD_VPG_CONFIGURATION' | 'INITIATE_ILAND_CLOUD_VPG_TEST_FAILOVER' | 'INITIATE_ILAND_CLOUD_VPG_LIVE_FAILOVER' | 'VIEW_ILAND_CLOUD_ORG' | 'VIEW_ILAND_CLOUD_ORG_SECURITY' | 'VIEW_ILAND_CLOUD_ORG_BILLING' | 'MANAGE_ILAND_CLOUD_ORG_CONFIGURATION' | 'MANAGE_ILAND_CLOUD_ORG_DNS' | 'CREATE_ILAND_CLOUD_ORG_CATALOGS' | 'MANAGE_ILAND_CLOUD_ORG_SECURITY' | 'VIEW_ILAND_CLOUD_ORG_DR_RUNBOOKS' | 'MANAGE_ILAND_CLOUD_ORG_DR_RUNBOOKS' | 'MANAGE_ILAND_CLOUD_ORG_VDI_DEPLOYMENTS' | 'VIEW_ILAND_CLOUD_ORG_VDI' | 'MANAGE_ILAND_CLOUD_ORG_VDI' | 'VIEW_ILAND_CLOUD_LOCATION' | 'VIEW_ILAND_CLOUD_LOCATION_BILLING' | 'VIEW_ILAND_BACKUP' | 'VIEW_ILAND_BACKUP_BILLING' | 'MANAGE_ILAND_OBJECT_STORAGE_LOCATION' | 'MANAGE_ILAND_OBJECT_STORAGE' | 'VIEW_ILAND_CEPH_OBJECT_STORAGE_LOCATION' | 'CREATE_ILAND_OBJECT_STORAGE_USER_SESSION' | 'CREATE_ILAND_OBJECT_STORAGE_KEY' | 'DELETE_ILAND_OBJECT_STORAGE_KEY' | 'VIEW_ILAND_CEPH_OBJECT_STORAGE_TENANT' | 'MANAGE_ILAND_CEPH_OBJECT_STORAGE' | 'VIEW_ILAND_CLOUD' | 'VIEW_ILAND_CLOUD_BILLING' | 'VIEW_COMPANY' | 'VIEW_COMPANY_SUPPORT_TICKETS' | 'VIEW_COMPANY_IAM' | 'MANAGE_COMPANY_SETTINGS' | 'MANAGE_COMPANY_IAM' | 'MANAGE_COMPANY_SUPPORT_TICKETS' | 'MANAGE_COMPANY_IDENTITY_PROVIDER';

/**
    * DomainPermissionsMap
    */
export class DomainPermissionsMap {
        /**
            * Get an instance of DomainPermissionsMap. Singleton implementation.
            * @returns {DomainPermissionsMap}
            */
        static getInstance(): DomainPermissionsMap;
        /**
            * Get the domains permissions map.
            * @returns {Map<IamEntityType, Array<Permission>>}
            */
        get domainPermissions(): Map<IamEntityType, Array<Permission>>;
}

/**
    * PermissionsMap
    */
export class PermissionsMap {
        /**
            * Get an instance of PermissionMap. Singleton implementation.
            * @returns {PermissionsMap}
            */
        static getInstance(): PermissionsMap;
        /**
            * Get the permissions map.
            * @returns {Map<PermissionType, Permission>}
            */
        get permissions(): Map<PermissionType, Permission>;
}

/**
    * Permission
    */
export class Permission {
        constructor(_permissionType: PermissionType, _domain: IamEntityType, _accessType: AccessType, _availableToCustomPolicy: boolean, _requiredForCustomPolicy: boolean, _impliedPermissions: Array<PermissionType> | null);
        /**
            * Get the IamEntityType for a permission.
            * @returns {IamEntityType}
            */
        get domain(): IamEntityType;
        /**
            * Get the PermissionType for a permission.
            * @returns {PermissionType}
            */
        get permissionType(): PermissionType;
        /**
            * Get the AccessType for a permission.
            * @returns {AccessType}
            */
        get accessType(): AccessType;
        /**
            * Check whether or not this permission is available to custom policy.
            * @returns {boolean}
            */
        get availableToCustomPolicy(): boolean;
        /**
            * Check whether or not a permission is required for custom policy.
            * @returns {boolean}
            */
        get requiredForCustomPolicy(): boolean;
        /**
            * Get the implied permissions.
            * @returns {Array<PermissionType> | null}
            */
        get impliedPermissions(): Array<PermissionType> | null;
        /**
            * Get the string representation of a permission. Which is the PermissionType.
            * @returns {string}
            */
        toString(): string;
        /**
            * Get the entity domain class for this permission.
            * @returns {EntityDomain}
            */
        getDomain(): EntityDomain;
}

/**
  * Interface for Policy JSON properties.
  */
export interface PolicyJson {
    entity_uuid: string;
    domain: IamEntityType;
    type: PolicyType;
    permissions: Array<PermissionType>;
}

export type PolicyType = 'ADMIN' | 'READ_ONLY' | 'CUSTOM';

/**
    * Policy.
    */
export class Policy {
        constructor(_json: PolicyJson);
        /**
            * Gets the entity UUID associated with the policy.
            * @returns {string} the entity UUID
            */
        get entityUuid(): string;
        /**
            * Gets the entity domain of the policy.
            * @returns {IamEntityType} the entity domain
            */
        get entityDomain(): IamEntityType;
        /**
            * Gets the policy type.
            * @returns {PolicyType} the policy type
            */
        get type(): PolicyType;
        /**
            * Gets the permissions assigned to the policy.
            * @returns {Array<PermissionType>} the policy permissions
            */
        get permissions(): Array<PermissionType>;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {PolicyJson} the JSON representation
            */
        get json(): PolicyJson;
        /**
            * Indicate whether the policy has the specified permission.
            * @param {PermissionType} permissionType
            * @returns {boolean}
            */
        hasPermission(permissionType: PermissionType): boolean;
}
/**
    * Policy Builder.
    */
export class PolicyBuilder {
        /**
            * Creates a new PolicyBuilder.
            * @param {string} _entityUuid the UUID of the entity that the policy will apply to
            * @param {IamEntityType} _entityDomain the EntityDomain of the entity that the policy will apply to
            * @param {PolicyType} _type the policy type
            */
        constructor(_entityUuid: string, _entityDomain: IamEntityType, _type: PolicyType);
        /**
            * Set an array of permissions.
            * @param {Array<PermissionType>} array
            * @throws Error
            */
        setPermissions(array: Array<PermissionType>): PolicyBuilder;
        /**
            * Adds a permission.
            * @param {PermissionType} permission the permission to add
            * @returns {PolicyBuilder} the builder
            * @throws Error
            */
        addPermission(permission: PermissionType): PolicyBuilder;
        /**
            * Removes a permission.
            * @param {PermissionType} permission the permission to remove
            * @returns {PolicyBuilder} the builder
            */
        removePermission(permission: PermissionType): PolicyBuilder;
        /**
            * Builds the policy.
            * @returns {Policy} the new policy
            */
        build(): Policy;
}

/**
  * Role Creation Request JSON properties.
  */
export interface RoleCreationRequestJson {
    company_id: string;
    name: string;
    description: string;
    policies: Array<PolicyJson>;
}

/**
  * Interface for Role JSON properties.
  */
export interface RoleJson {
    uuid: string;
    company_id: string;
    name: string;
    description: string;
    policies: Array<PolicyJson>;
    type: RoleType;
}

export type RoleType = 'CUSTOM' | 'BUILT_IN';

/**
    * Role Creation Request Implementation.
    */
export class RoleCreationRequest {
        companyId: string;
        name: string;
        description: string;
        policies: Array<Policy>;
        /**
            * Creates a new role creation request.
            * @param {string} companyId the ID of the company that the role will be created in
            * @param {string} name the name of the role
            * @param {string} description the description of the role
            * @param {Array<Policy>} policies the policies that define the role
            */
        constructor(companyId: string, name: string, description: string, policies: Array<Policy>);
        /**
            * Gets the raw JSON object for the API.
            * @returns {RoleCreationRequestJson} JSON representation
            */
        get json(): RoleCreationRequestJson;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Return the policy for the specified uuid.
            * @param {string} entityUuid
            * @returns {Policy | null}
            */
        getPolicy(entityUuid: string): Policy | null;
}
/**
    * Role Creation Request Builder.
    */
export class RoleCreationRequestBuilder {
        constructor(_companyId: string, _name: string, _description: string);
        /**
            * Sets the name for the role creation request.
            * @param {string} name
            * @returns {RoleCreationRequestBuilder} the builder
            */
        setName(name: string): RoleCreationRequestBuilder;
        /**
            * Sets the description for the role creation request.
            * @param {string} description
            * @returns {RoleCreationRequestBuilder} the builder
            */
        setDescription(description: string): RoleCreationRequestBuilder;
        /**
            * Sets a policy on the role creation request.
            * @param {Policy} policy
            * @returns {RoleCreationRequestBuilder} the builder
            */
        setPolicy(policy: Policy): RoleCreationRequestBuilder;
        /**
            * Removes a policy for a specified entity.
            * @param {string} entityUuid the UUID of the entity
            * @returns {RoleCreationRequestBuilder} the builder
            */
        removePolicy(entityUuid: string): RoleCreationRequestBuilder;
        /**
            * Clears all policies.
            * @returns {RoleCreationRequestBuilder} the builder
            */
        clearPolicies(): RoleCreationRequestBuilder;
        /**
            * Builds the RoleCreationRequest.
            * @returns {RoleCreationRequest}
            */
        build(): RoleCreationRequest;
}

/**
    * Role.
    */
export class Role {
        constructor(_json: RoleJson);
        /**
            * Gets the UUID of the role.
            * @returns {string} role UUID
            */
        get uuid(): string;
        /**
            * Gets the ID of the company that the role is associated with.
            * @returns {string} company ID
            */
        get companyId(): string;
        /**
            * Gets the name of the role.
            * @returns {string} the role name
            */
        get name(): string;
        /**
            * Gets the role description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Gets the policies that define the role.
            * @returns {Array<Policy>} the array of role policies
            */
        get policies(): Array<Policy>;
        /**
            * Gets the role type.
            * @returns {RoleType} role type
            */
        get type(): RoleType;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Return the policy for the specified uuid.
            * @param {string} entityUuid
            * @returns {Policy | null}
            */
        getPolicy(entityUuid: string): Policy | null;
        /**
            * Gets the raw JSON object from the API.
            * @returns {RoleJson} the JSON representation
            */
        get json(): RoleJson;
}

/**
  * Company Location Integrated Backup Status JSON.
  */
export interface CompanyLocationIntegratedBackupStatusJson {
    company_id: string;
    location_id: string;
    org_statuses: Array<OrgIntegratedBackupStatusJson>;
}

/**
  * Enumeration of possible backup states associated with Integrated Backups.
  * {IntegratedBackupStatus.PARTIAL_BACKUPS_CONFIGURED} only applies to composite entities (not VMs).
  */
export enum IntegratedBackupStatus {
    FULL_BACKUPS_CONFIGURED = "FULL_BACKUPS_CONFIGURED",
    PARTIAL_BACKUPS_CONFIGURED = "PARTIAL_BACKUPS_CONFIGURED",
    BACKUPS_NOT_CONFIGURED = "BACKUPS_NOT_CONFIGURED"
}

/**
  * Org Integrated Backup Status JSON.
  */
export interface OrgIntegratedBackupStatusJson {
    org_uuid: string;
    status: IntegratedBackupStatus;
    vdc_statuses: Array<VdcIntegratedBackupStatusJson>;
}

/**
  * vApp Integrated Backup Status Detail JSON.
  */
export interface VappIntegratedBackupStatusDetailJson extends VappIntegratedBackupStatusJson {
    has_integrated_backups: boolean;
}

/**
  * vApp Integrated Backup Status JSON.
  */
export interface VappIntegratedBackupStatusJson {
    vapp_uuid: string;
    status: IntegratedBackupStatus;
    vm_statuses: Array<VmIntegratedBackupStatusJson>;
}

/**
  * Vdc Integrated Backup Status Detail JSON.
  */
export interface VdcIntegratedBackupStatusDetailJson extends VdcIntegratedBackupStatusJson {
    has_integrated_backups: boolean;
}

/**
  * vDC Integrated Backup Status JSON.
  */
export interface VdcIntegratedBackupStatusJson {
    vdc_uuid: string;
    status: IntegratedBackupStatus;
    vapp_statuses: Array<VappIntegratedBackupStatusJson>;
}

/**
  * VM Integrated Backup Status Detail JSON.
  */
export interface VmIntegratedBackupStatusDetailJson extends VmIntegratedBackupStatusJson {
    has_integrated_backups: boolean;
}

/**
  * VM Integrated Backup Status JSON.
  */
export interface VmIntegratedBackupStatusJson {
    vm_uuid: string;
    status: IntegratedBackupStatus;
}

/**
    * Company Location Integrated Backup Status.
    */
export class CompanyLocationIntegratedBackupStatus {
        constructor(_json: CompanyLocationIntegratedBackupStatusJson);
        /**
            * Get the ID of the company.
            * @returns {string}
            */
        get companyId(): string;
        /**
            * Get the ID of the datacenter location.
            * @returns {string}
            */
        get locationId(): string;
        /**
            * Get the statuses of child orgs.
            * @returns {Array<OrgIntegratedBackupStatus>}
            */
        get orgStatuses(): OrgIntegratedBackupStatus[];
        /**
            * Get the json representation of this class.
            * @returns {CompanyLocationIntegratedBackupStatusJson}
            */
        get json(): CompanyLocationIntegratedBackupStatusJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Org Integrated Backup Status.
    */
export class OrgIntegratedBackupStatus {
        constructor(_json: OrgIntegratedBackupStatusJson);
        /**
            * Get the UUID of the org.
            * @returns {string}
            */
        get orgUuid(): string;
        /**
            * Get the org's backup configuration status.
            * @returns {IntegratedBackupStatus}
            */
        get status(): IntegratedBackupStatus;
        /**
            * Get the statuses of child vDCs.
            * @returns {Array<VdcIntegratedBackupStatus>}
            */
        get vdcStatuses(): VdcIntegratedBackupStatus[];
        /**
            * Get the json representation of this class.
            * @returns {OrgIntegratedBackupStatusJson}
            */
        get json(): OrgIntegratedBackupStatusJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * vApp Integrated Backup Status Detail.
    */
export class VappIntegratedBackupStatusDetail extends VappIntegratedBackupStatus {
        constructor(_json: VappIntegratedBackupStatusDetailJson);
        /**
            * Get whether the vApp belongs to a vDC that has the integrated backups offering.
            * @returns {boolean}
            */
        get hasIntegratedBackups(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {VappIntegratedBackupStatusDetailJson}
            */
        get json(): VappIntegratedBackupStatusDetailJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * vApp Integrated Backup Status.
    */
export class VappIntegratedBackupStatus {
        constructor(_intBackupStatusJson: VappIntegratedBackupStatusJson);
        /**
            * Get the UUID of the vApp.
            * @returns {string}
            */
        get vappUuid(): string;
        /**
            * Get the vApp's backup configuration status.
            * @returns {IntegratedBackupStatus}
            */
        get status(): IntegratedBackupStatus;
        /**
            * Get the statuses of child VMs.
            * @returns {Array<VmIntegratedBackupStatus>}
            */
        get vmStatuses(): VmIntegratedBackupStatus[];
        /**
            * Get the json representation of this class.
            * @returns {VappIntegratedBackupStatusJson}
            */
        get json(): VappIntegratedBackupStatusJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * vDC Integrated Backup Status Detail.
    */
export class VdcIntegratedBackupStatusDetail extends VdcIntegratedBackupStatus {
        constructor(_json: VdcIntegratedBackupStatusDetailJson);
        /**
            * Get whether the vDC has the integrated backups offering.
            * @returns {boolean}
            */
        get hasIntegratedBackups(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {VdcIntegratedBackupStatusDetailJson}
            */
        get json(): VdcIntegratedBackupStatusDetailJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * vDC Integrated Backup Status.
    */
export class VdcIntegratedBackupStatus {
        constructor(_intBackupStatusJson: VdcIntegratedBackupStatusJson);
        /**
            * Get the UUID of the vDC.
            * @returns {string}
            */
        get vdcUuid(): string;
        /**
            * Get the vDC's backup configuration status.
            * @returns {IntegratedBackupStatus}
            */
        get status(): IntegratedBackupStatus;
        /**
            * Get the statuses of child vApps.
            * @returns {Array<VappIntegratedBackupStatus>}
            */
        get vappStatuses(): VappIntegratedBackupStatus[];
        /**
            * Get the json representation of this class.
            * @returns {VdcIntegratedBackupStatusJson}
            */
        get json(): VdcIntegratedBackupStatusJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * VM Integrated Backup Status Detail.
    */
export class VmIntegratedBackupStatusDetail extends VmIntegratedBackupStatus {
        constructor(_json: VmIntegratedBackupStatusDetailJson);
        /**
            * Whether the VM belongs to a vDC that has the integrated backups offering.
            * @returns {boolean}
            */
        get hasIntegratedBackups(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {VmIntegratedBackupStatusDetailJson}
            */
        get json(): VmIntegratedBackupStatusDetailJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * VM Integrated Backup Status.
    */
export class VmIntegratedBackupStatus {
        constructor(_intBackupStatusJson: VmIntegratedBackupStatusJson);
        /**
            * Get the UUID of the VM.
            * @returns {string}
            */
        get vmUuid(): string;
        /**
            * Get the integrated backup config status of the VM.
            * @returns {IntegratedBackupStatus}
            */
        get status(): IntegratedBackupStatus;
        /**
            * Get the json representation of this class.
            * @returns {VmIntegratedBackupStatusJson}
            */
        get json(): VmIntegratedBackupStatusJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
  * Interface for abstract Network JSON properties.
  */
export interface AbstractNetworkJson extends EntityJson {
    location_id: string;
    org_uuid: string;
    vdc_uuid: string;
    description: string;
    primary_dns: string;
    secondary_dns: string;
    dns_suffix: string;
    fence_mode: FenceModeType;
    gateway: string;
    netmask: string;
    ip_ranges: Array<IpRangeJson>;
    inherited: boolean;
    parent_network_uuid: string | null;
}

/**
  * Interface for Internal Network JSON properties.
  */
export interface InternalNetworkJson extends AbstractNetworkJson {
    edge_uuid: string | null;
    shared: boolean;
    retain_net_info_across_deployments: boolean;
    sub_interface: boolean;
    distributed_interface: boolean;
    guest_vlan_allowed: boolean;
}

export interface IpScopeJson {
    inherited?: boolean;
    enabled?: boolean;
    gateway: string;
    netmask: string;
    primary_dns: string;
    secondary_dns: string;
    dns_suffix: string;
    ip_ranges: Array<IpRangeJson>;
    allocated_ip_addresses?: Array<string>;
    sub_allocations?: Array<NetworkSubAllocationJson>;
}

/**
  * Org vDC Network Create Request JSON interface.
  */
export interface OrgVdcNetworkCreateRequestJson {
    name: string;
    description: string;
    edge_uuid: string;
    shared: boolean;
    fence_mode: FenceModeType;
    ip_scope: IpScopeJson;
    retain_net_info_across_deployments: boolean;
    sub_interface: boolean;
    distributed_interface: boolean;
    guest_vlan_allowed: boolean;
}

export interface OrgVdcNetworkUpdateRequestJson {
    uuid: string;
    name: string;
    description: string;
    edge_uuid: string;
    shared: boolean;
    fence_mode: OrgVdcNetworkUpdateFenceMode;
    ip_scope: IpScopeJson;
}
export type OrgVdcNetworkUpdateFenceMode = 'NAT_ROUTED' | 'ISOLATED';

/**
    * Abstract Network.
    */
export abstract class AbstractNetwork extends Entity {
        protected _json: AbstractNetworkJson;
        constructor(_json: AbstractNetworkJson);
        /**
            * Gets the description.
            * @returns {string} description
            */
        get description(): string;
        /**
            * Gets the datacenter location identifier.
            * @returns {string} location ID
            */
        get locationId(): string;
        /**
            * Gets the UUID of the Org that the network is associated with.
            * @returns {string} Org UUID
            */
        get orgUuid(): string;
        /**
            * Gets the UUID of the vDC that the network is associated with.
            * @returns {string} vDC UUID
            */
        get vdcUuid(): string;
        /**
            * Gets the primary DNS host.
            * @returns {string} primary DNS host
            */
        get primaryDns(): string;
        /**
            * Gets the secondary DSN host.
            * @returns {string} secondary DNS host
            */
        get secondaryDns(): string;
        /**
            * Gets the DNS suffix.
            * @returns {string} DNS suffix
            */
        get dnsSuffix(): string;
        /**
            * Gets the networks fence mode.
            * @returns {FenceModeType} fence mode
            */
        get fenceMode(): FenceModeType;
        /**
            * Gets the gateway address of the network.
            * @returns {string} gateway address
            */
        get gatewayAddress(): string;
        /**
            * Gets the netmask of the network.
            * @returns {string} netmask
            */
        get netmask(): string;
        /**
            * Gets the static IP Ranges for the newtork.
            * @returns {[IpRange]} static IP ranges
            */
        get ipRanges(): Array<IpRange>;
        /**
            * Indicates whether this network is inherited.
            * @returns {boolean} value
            */
        get inherited(): boolean;
        /**
            * Gets the UUID of the parent external network if this is a bridged network, otherwise null.
            * @returns {string|null} parent external network UUID
            */
        get parentNetworkUuid(): string | null;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Internal Network.
    */
export class InternalNetwork extends AbstractNetwork {
        constructor(_json: InternalNetworkJson);
        /**
            * Gets an internal network by UUID.
            * @param uuid internal network UUID
            * @returns {Promise<InternalNetwork>} promise that resolves with the internal network
            */
        static getInternalNetwork(uuid: string): Promise<InternalNetwork>;
        get entityType(): EntityType;
        /**
            * Gets the UUID of the edge gateway that the network is connected to, if its a NAT routed network or null otherwise.
            * @returns {string|null} edge gateway UUID or null
            */
        get edgeUuid(): string | null;
        /**
            * Indicates whether this network is shared with other vDCs within the same organization.
            * @returns {boolean} value
            */
        get shared(): boolean;
        /**
            *
            * @returns {boolean} value
            */
        get retainNetInfoAcrossDeployments(): boolean;
        /**
            * Indicates whether this network is a sub-interface
            * @returns {boolean} value
            */
        get subInterface(): boolean;
        /**
            * Indicates whether this network is a distributed interface
            * @returns {boolean} value
            */
        get distributedInterface(): boolean;
        /**
            * Indicates whether guest VLAN is allowed for this network
            * @returns {boolean} value
            */
        get guestVlanAllowed(): boolean;
        /**
            * Gets the raw JSON object from the API.
            * @returns {InternalNetworkJson} the API __json__ object
            */
        get json(): InternalNetworkJson;
        /**
            * Refreshes the internal network data by retrieving it from the API again.
            * @returns {Promise<InternalNetwork>} promise that resolves with this object
            */
        refresh(): Promise<InternalNetwork>;
        /**
            * Updates the configuration of the network.
            * @param {OrgVdcNetworkUpdateRequest} request the update request
            * @returns {Promise<Task>} a promise that resolves with a task
            */
        updateOrgVdcNetwork(request: OrgVdcNetworkUpdateRequest): Promise<Task>;
        /**
            * Deletes the network.
            * @returns {Promise<Task>} a promise that resolves with a task
            */
        deleteOrgVdcNetwork(): Promise<Task>;
        /**
            * Convert org vdc network to a distributed interface.
            * @return {Promise<Task>} a promise that resolves with a task
            */
        convertToDistributedInterface(): Promise<Task>;
        /**
            * Convert org vdc network to a sub interface.
            * @return {Promise<Task>} a promise that resolves with a task
            */
        convertToSubInterface(): Promise<Task>;
        /**
            * Convert org vdc network to an internal interface.
            * @return {Promise<Task>} a promise that resolves with a task
            */
        convertToInternalInterface(): Promise<Task>;
}

/**
    * Ip Scope.
    */
export class IpScope {
        constructor(IpScope: IpScope);
        constructor(IpScopeJson: IpScopeJson);
        constructor(inherited: boolean, enabled: boolean, gateway: string, netmask: string, primaryDns: string, secondaryDns: string, dnsSuffix: string, ipRanges: Array<IpRangeJson>, allocatedIpAddresses: Array<string>, subAllocations: Array<NetworkSubAllocationJson>);
        /**
            * Get inherited.
            * @returns {boolean | undefined}
            */
        get inherited(): boolean | undefined;
        /**
            * Get enabled.
            * @returns {boolean | undefined}
            */
        get enabled(): boolean | undefined;
        /**
            * Get gateway.
            * @returns {string}
            */
        get gateway(): string;
        /**
            * Get netmask.
            * @returns {string}
            */
        get netmask(): string;
        /**
            * Get primary dns.
            * @returns {string}
            */
        get primaryDns(): string;
        /**
            * Get secondary dns.
            * @returns {string}
            */
        get secondaryDns(): string;
        /**
            * Get dns suffix.
            * @returns {string}
            */
        get dnsSuffix(): string;
        /**
            * Get ip ranges.
            * @returns {Array<IpRange>}
            */
        get ipRanges(): Array<IpRange>;
        /**
            * Get allocated ip addresses.
            * @returns {Array<string> | undefined}
            */
        get allocatedIpAddresses(): Array<string> | undefined;
        /**
            * Get sub allocations.
            * @returns {Array<NetworkSubAllocation> | undefined}
            */
        get subAllocations(): Array<NetworkSubAllocation> | undefined;
        /**
            * Get the json representation of this class.
            * @returns {IpScopeJson}
            */
        get json(): IpScopeJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Org vDC Network Create Request.
    */
export class OrgVdcNetworkCreateRequest {
        constructor(orgVdcNetworkRequest: OrgVdcNetworkCreateRequest);
        constructor(orgVdcNetworkRequestJson: OrgVdcNetworkCreateRequestJson);
        constructor(name: string, description: string, edgeUuid: string, shared: boolean, fenceMode: FenceModeType, ipScope: IpScopeJson, retainNetInfoAcrossDeployments: boolean, subInterface: boolean, distributedInterface: boolean, guestVlanAllowed: boolean);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get edge uuid.
            * @returns {string}
            */
        get edgeUuid(): string;
        /**
            * Get shared.
            * @returns {boolean}
            */
        get shared(): boolean;
        /**
            * Get fence mode.
            * @returns {FenceModeType}
            */
        get fenceMode(): FenceModeType;
        /**
            * Get ip scope.
            * @returns {IpScope}
            */
        get ipScope(): IpScope;
        /**
            * Get retain net info across deployments.
            * @returns {boolean}
            */
        get retainNetInfoAcrossDeployments(): boolean;
        /**
            * Get sub interface.
            * @returns {boolean}
            */
        get subInterface(): boolean;
        /**
            * Get distributed interface.
            * @returns {boolean}
            */
        get distributedInterface(): boolean;
        /**
            * Get guest vlan allowed.
            * @returns {boolean}
            */
        get guestVlanAllowed(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {OrgVdcNetworkCreateRequestJson}
            */
        get json(): OrgVdcNetworkCreateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Org vDC Network Update Request.
    */
export class OrgVdcNetworkUpdateRequest {
        constructor(orgVdcNetworkUpdateRequest: OrgVdcNetworkUpdateRequest);
        constructor(orgVdcNetworkUpdateRequestJson: OrgVdcNetworkUpdateRequestJson);
        constructor(uuid: string, name: string, description: string, edgeUuid: string, shared: boolean, fenceMode: OrgVdcNetworkUpdateFenceMode, ipScope: IpScopeJson);
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get edge uuid.
            * @returns {string}
            */
        get edgeUuid(): string;
        /**
            * Get shared.
            * @returns {boolean}
            */
        get shared(): boolean;
        /**
            * Get fence mode.
            * @returns {OrgVdcNetworkUpdateFenceMode}
            */
        get fenceMode(): OrgVdcNetworkUpdateFenceMode;
        /**
            * Get ip scope.
            * @returns {IpScope}
            */
        get ipScope(): IpScope;
        /**
            * Get the json representation of this class.
            * @returns {OrgVdcNetworkUpdateRequestJson}
            */
        get json(): OrgVdcNetworkUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export interface LocationJson {
    uuid: string;
    name: string;
}

export interface VmConfigurationLimitsJson {
    max_memory_mebibytes: number;
    min_memory_mebibytes: number;
    max_cpu_core_count: number;
    max_disk_size_mebibytes: number;
    min_disk_size_mebibytes: number;
}

export class Location {
    constructor(_json: LocationJson);
    get uuid(): string;
    get name(): string;
}

export class VmConfigurationLimits {
        constructor(_json: VmConfigurationLimitsJson);
        /**
            * Get max memory mebibytes.
            * @returns {number}
            */
        get maxMemoryMebibytes(): number;
        /**
            * Get min memory mebibytes.
            * @returns {number}
            */
        get minMemoryMebibytes(): number;
        /**
            * Get max cpu core count.
            * @returns {number}
            */
        get maxCpuCoreCount(): number;
        /**
            * Get max disk size mebibytes.
            * @returns {number}
            */
        get maxDiskSizeMebibytes(): number;
        /**
            * Get min disk size mebibytes.
            * @returns {number}
            */
        get minDiskSizeMebibytes(): number;
        /**
            * Get the json representation of this class.
            * @returns {VmConfigurationLimitsJson}
            */
        get json(): VmConfigurationLimitsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
  * Media Clone Request JSON properties.
  */
export interface MediaCloneRequestJson {
    vdc_uuid: string;
    storage_profile_uuid: string;
    catalog_uuid: string;
    media_name: string;
}

/**
  * Interface for Media JSON representation.
  */
export interface MediaJson extends EntityJson {
    status: number;
    size: number;
    is_public: boolean;
    location_id: string;
    org_uuid: string;
    catalog_uuid: string;
    storage_profile_uuid: string;
    vdc_uuid: string;
    description: string;
    vcloud_href: string;
    created_date: number;
}

/**
  * Media Update Request JSON properties.
  */
export interface MediaUpdateRequestJson {
    name: string;
    description: string;
    storage_profile_uuid: string;
}

/**
    * Role Creation Request Implementation.
    */
export class MediaCloneRequest {
        constructor(mediaCloneRequest: MediaCloneRequest);
        constructor(mediaCloneRequestJson: MediaCloneRequestJson);
        constructor(vccUuid: string, storageProfileUuid: string, catalogUuid: string, mediaName: string);
        /**
            * Get vDC uuid.
            * @returns {string}
            */
        get vdcUuid(): string;
        /**
            * Get Storage Profile uuid.
            * @returns {string}
            */
        get storageProfileUuid(): string;
        /**
            * Get Catalog uuid.
            * @returns {string}
            */
        get catalogUuid(): string;
        /**
            * Get Media name.
            * @returns {string}
            */
        get mediaName(): string;
        /**
            * Gets the raw JSON object.
            * @returns {MediaCloneRequestJson} the JSON representation
            */
        get json(): MediaCloneRequestJson;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Role Creation Request Implementation.
    */
export class MediaUpdateRequest {
        constructor(name: string, description: string, storageProfileUuid: string);
        constructor(mediaUpdateRequest: MediaUpdateRequest);
        constructor(mediaUpdateRequestJson: MediaUpdateRequestJson);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get storage profile ID.
            * @returns {string}
            */
        get storageProfileUuid(): string;
        /**
            * Gets the raw JSON object.
            * @returns {MediaUpdateRequestJson} the JSON representation
            */
        get json(): MediaUpdateRequestJson;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Media.
    */
export class Media extends Entity {
        constructor(_json: MediaJson);
        /**
            * Get the Media from API.
            * @param {string} uuid
            * @returns {Promise<Media>} promise that resolves with the Media
            */
        static getMedia(uuid: string): Promise<Media>;
        /**
            * Get entity type for Media
            * @returns {EntityType}
            */
        get entityType(): EntityType;
        /**
            * Get Media status.
            * @returns {number}
            */
        get status(): number;
        /**
            * Get Media size.
            * @returns {number}
            */
        get size(): number;
        /**
            * Indicate whether the Media is public or not.
            * @returns {boolean}
            */
        get isPublic(): boolean;
        /**
            * Get Media location ID
            * @returns {string}
            */
        get locationId(): string;
        /**
            * Get Media org uuid.
            * @returns {string}
            */
        get orgUuid(): string;
        /**
            * Get Media catalog uuid.
            * @returns {string}
            */
        get catalogUuid(): string;
        /**
            * Get Media storageProfile uuid.
            * @returns {string}
            */
        get storageProfileUuid(): string;
        /**
            * Get Media vDc uuid.
            * @returns {string}
            */
        get vdcUuid(): string;
        /**
            * Get Media description
            * @returns {string}
            */
        get description(): string;
        /**
            * Get Media vCloudHref.
            * @returns {string}
            */
        get vcloudHref(): string;
        /**
            * Get Media creation date.
            * @returns {Date}
            */
        get createdDate(): Date;
        /**
            * Refreshes the Media data by retrieving it from the API again.
            * @returns {Promise<Media>} promise that resolves with the Media
            */
        refresh(): Promise<Media>;
        /**
            * Deletes current Media
            * @returns {Promise<Task>} promise that resolves with a Task
            */
        delete(): Promise<Task>;
        /**
            * Updates media name, description and storage profile
            * @param {MediaUpdateRequest} request
            * @returns {Promise<Task>} promise that resolves with a Task
            */
        update(request: MediaUpdateRequest): Promise<Task>;
        /**
            * Clones current Media.
            * @param {MediaUpdateRequest} request
            * @returns {Promise<Task>} promise that resolves with a Task
            */
        clone(request: MediaCloneRequest): Promise<Task>;
        /**
            * Synchronize current Media.
            * @returns {Promise<Task>} promise that resolves with a Task
            */
        sync(): Promise<Task>;
        /**
            * Get a link to download the Media.
            * @param {string} filename
            * @returns {Observable<string>}
            */
        getDownloadLink(filename?: string): Observable<string>;
        /**
            * Gets the Media's metadata.
            * @returns {Promise<Metadata<MetadataType>[]>}
            */
        getMetadata(): Promise<Array<Metadata<MetadataType>>>;
        /**
            * Updates the Media's metadata.
            * @param {Array<Metadata<MetadataType>>} metadata the new array of metadata
            * @returns {Promise<Task>} task promise
            */
        updateMetadata(metadata: Array<Metadata<MetadataType>>): Promise<Task>;
        /**
            * Deletes a metadata entry.
            * @param {string} metadataKey the key of the metadata entry to delete
            * @returns {Promise<Task>} task promise
            */
        deleteMetadata(metadataKey: string): Promise<Task>;
        /**
            * Gets the raw JSON object from the API.
            * @returns {MediaJson} the JSON representation
            */
        get json(): MediaJson;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
}

/**
  * Role Creation Request JSON properties.
  */
export interface PerfSamplesRequestJson {
    counter: PerfCounterJson;
    start: number;
    end: number;
    interval: number;
    limit: number;
}

/**
    * API PerfSample JSON Representation.
    */
export interface PerfSampleJson {
        time: number;
        value: number;
}
/**
    * API PerfSampleSerie JSON Representation.
    */
export interface PerfSamplesSeriesJson {
        uuid: string;
        summary: string;
        group: string;
        name: string;
        type: string;
        interval: number;
        unit: string;
        samples: Array<PerfSampleJson>;
}
/**
    * API PerfCounter JSON Representation.
    */
export interface PerfCounterJson {
        group: string;
        name: string;
        type: string;
}

export class EntityWithPerfSamples {
    uuid: string;
    apiPrefix: string;
    getPerfCounters(): Promise<Array<PerfCounter>>;
    getPerfSamples(request: PerfSamplesRequest): Promise<PerfSamplesSeries>;
}

export class PerfCounter {
        constructor(perfCounter: PerfCounter);
        constructor(perfCounterJson: PerfCounterJson);
        constructor(group: string, name: string, type: string);
        /**
            * Returns group of current counter
            * @returns {string}
            */
        get group(): string;
        /**
            * Returns name of current counter
            * @returns {string}
            */
        get name(): string;
        /**
            * Returns type of current counter
            * @returns {string}
            */
        get type(): string;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {PerfCounterJson} the JSON representation
            */
        get json(): PerfCounterJson;
}

/**
    * Perf Sample class.
    */
export class PerfSample {
        constructor(perfSample: PerfSample);
        constructor(perfSampleJson: PerfSampleJson);
        constructor(time: number, value: number);
        /**
            * Returns the date of the current sample
            * @returns {Date}
            */
        get date(): Date;
        /**
            * Returns the timestamp of the current sample
            * @returns {number}
            */
        get timestamp(): number;
        /**
            * Returns the value of the current sample
            * @returns {number}
            */
        get value(): number;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {PerfSampleJson} the JSON representation
            */
        get json(): PerfSampleJson;
}

/**
    * Perf Sample Request class.
    */
export class PerfSamplesRequest {
        constructor(perfSampleRequest: PerfSamplesRequest);
        constructor(perfSampleRequestJson: PerfSamplesRequestJson);
        constructor(counter: PerfCounter, start: number, end: number, interval: number, limit: number);
        /**
            * Returns the perf counter for current request
            * @returns {PerfCounter}
            */
        get counter(): PerfCounter;
        /**
            * Returns the start timestamp for current request
            * @returns {number}
            */
        get start(): number;
        /**
            * Returns the start date for current request
            * @returns {Date}
            */
        get startDate(): Date;
        /**
            * Returns the end timestamp for current request
            * @returns {number}
            */
        get end(): number;
        /**
            * Returns the end date for current request
            * @returns {Date}
            */
        get endDate(): Date;
        /**
            * Returns the interval for current request
            * @returns {number}
            */
        get interval(): number;
        /**
            * Returns the limit for current request
            * @returns {number}
            */
        get limit(): number;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {PerfSamplesRequestJson} the JSON representation
            */
        get json(): PerfSamplesRequestJson;
}

/**
    * Perf Sample Series class.
    */
export class PerfSamplesSeries {
        constructor(_json: PerfSamplesSeriesJson);
        /**
            * Returns the uuid of the entity that belongs to current sample series
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Returns the summary for the current sample series
            * @returns {string}
            */
        get summary(): string;
        /**
            * Returns the group of the current sample series
            * @returns {string}
            */
        get group(): string;
        /**
            * Returns the name of the current sample series
            * @returns {string}
            */
        get name(): string;
        /**
            * Returns the type of the current sample series
            * @returns {string}
            */
        get type(): string;
        /**
            * Returns the counter of the current sample series
            * @returns {PerfCounter}
            */
        get counter(): PerfCounter;
        /**
            * Returns the interval of the current sample series
            * @returns {number}
            */
        get interval(): number;
        /**
            * Returns the unit for samples of the current series
            * @returns {string}
            */
        get unit(): string;
        /**
            * Returns samples of the current series
            * @returns {Array<PerfSample>}
            */
        get samples(): Array<PerfSample>;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {PerfSampleSerieJson} the JSON representation
            */
        get json(): PerfSamplesSeriesJson;
}

/**
  * Interface for O365 Group JSON properties
  */
export interface O365GroupJson {
    display_name: string;
    organization_name: string;
    organization_uuid: string;
    type: string;
    native_id: string;
    name: string;
    is_backed_up: boolean;
    is_deleted_from_org: boolean;
}

/**
    * Interface for O365 Job JSON properties
    */
export interface O365JobJson extends EntityJson {
        location_id: string;
        o365_organization_uuid: string;
        description: string;
        last_run: number;
        next_run: number;
        enabled: boolean;
        backup_type: O365JobBackupType;
        last_status: O365JobStatus;
        schedule_policy: O365JobSchedulePolicy;
        type_vex: boolean;
        type_vesp: boolean;
        type_veod: boolean;
        type_vet: boolean;
        excluded_items?: SelectedExcludedItems;
        selected_items?: SelectedExcludedItems;
        is_restore_session_exist: boolean;
}
/**
    * O365 Job Backup Type JSON enum
    */
export enum O365JobBackupType {
        SELECTED_ITEMS = "SelectedItems",
        ENTIRE_ORGANIZATION = "EntireOrganization"
}
/**
    * O365 Job status JSON type
    */
export type O365JobStatus = 'Stopped' | 'Running' | 'Success' | 'Warning' | 'Failed';
/**
    * Interface for O365 Job Schedule Policy JSON properties
    */
export interface O365JobSchedulePolicy {
        type: O365JobSchedulePolicyType;
        daily_type: O365JobSchedulePolicyDailyType;
        daily_time: string;
        periodically_every: O365JobSchedulePolicyPeriodicallyEvery;
        backup_window_enabled: boolean;
        backup_window: Array<boolean>;
        backup_window_minute_offset: number;
        retry_enabled: boolean;
        retry_number: number;
        retry_wait_interval: number;
}
/**
    * O365 Job Schedule Policy Type JSON enum
    */
export enum O365JobSchedulePolicyType {
        DAILY = "Daily",
        PERIODICALLY = "Periodically"
}
/**
    * O365 Job Schedule Policy Daily Type JSON enum
    */
export enum O365JobSchedulePolicyDailyType {
        EVERYDAY = "Everyday",
        WEEKENDS = "Weekends",
        WORKDAYS = "Workdays",
        MONDAY = "Monday",
        TUESDAY = "Tuesday",
        WEDNESDAY = "Wednesday",
        THURSDAY = "Thursday",
        FRIDAY = "Friday",
        SATURDAY = "Saturday",
        SUNDAY = "Sunday"
}
/**
    * O365 Job Schedule Policy Periodically Every JSON enum
    */
export enum O365JobSchedulePolicyPeriodicallyEvery {
        MINUTES5 = "Minutes5",
        MINUTES10 = "Minutes10",
        MINUTES15 = "Minutes15",
        MINUTES30 = "Minutes30",
        HOURS1 = "Hours1",
        HOURS2 = "Hours2",
        HOURS4 = "Hours4",
        HOURS8 = "Hours8"
}
/**
    * Selected or Excluded Items interface pertaining to any included or excluded items
    * from O365 Backup Job
    */
export interface SelectedExcludedItems {
        group_responses: Array<GroupResponse>;
        partial_org_responses: Array<PartialOrgResponse>;
        share_point_site_responses: Array<SharePointSiteResponse>;
        user_responses: Array<UserResponse>;
        team_responses: Array<TeamResponse>;
        teams_chat_response: Array<TeamsChatResponse>;
}
/**
    * Selected or Excluded Group Response interface
    */
export interface GroupResponse {
        group_response: InnerGroupResponse;
        mail?: boolean;
        mailbox?: boolean;
        member_archive_mailbox: boolean;
        member_mailbox: boolean;
        member_onedrive: boolean;
        member_site: boolean;
        members: boolean;
        site: boolean;
}
/**
    * Selected or Excluded Inner Group Response interface
    */
export interface InnerGroupResponse {
        display_name: string;
        is_backed_up: boolean;
        is_deleted_from_org: boolean;
        name: string;
        native_id: string;
        organization_name: string;
        organization_uuid: string;
        type: string;
}
/**
    * Selected or Excluded Partial Org Response interface
    */
export interface PartialOrgResponse {
        archive_mailbox: boolean;
        id: string;
        mailbox: boolean;
        one_drive: boolean;
        site: boolean;
        teams: boolean;
        teams_chats: boolean;
}
/**
    * Selected or Excluded SharePoint Site Response interface
    */
export interface SharePointSiteResponse {
        available: boolean;
        backed_up: boolean;
        cloud: boolean;
        id: string;
        name: string;
        title: string;
        url: string;
}
/**
    * Selected or Excluded User Response interface
    */
export interface UserResponse {
        archive_mailbox: boolean;
        mailbox: boolean;
        one_drive: boolean;
        site: boolean;
        user_response: InnerUserResponse;
}
/**
    * Selected or Excluded Inner User Response interface
    */
export interface InnerUserResponse {
        display_name: string;
        is_backed_up: boolean;
        is_deleted_from_org: boolean;
        name: string;
        native_id: string;
        organization_name: string;
        organization_uuid: string;
        type: string;
}
/**
    * Selected or Excluded Team Response interface
    */
export interface TeamResponse {
        description: string;
        display_name: string;
        is_backed_up: boolean;
        mail: string;
        native_id: string;
        organization_uuid: string;
}
/**
    * Selected Teams Chat Response interface
    */
export interface TeamsChatResponse {
        team: TeamResponse;
        chats: boolean;
}

/**
    * O365 Create & Modify Job request json
    */
export interface O365JobRequestJson {
        name: string;
        description?: string;
        backup_type: O365JobBackupType;
        run_now: boolean;
        job_schedule_policy_request: O365JobSchedulePolicyRequestJson;
        o365_job_selected_item_requests?: Array<PartialOrganizationSelectedItem | GroupSelectedItem | UserSelectedItem | SiteSelectedItem | TeamSelectedItem>;
        o365_job_excluded_item_requests?: Array<PartialOrganizationSelectedItem | GroupSelectedItem | UserSelectedItem | SiteSelectedItem | TeamSelectedItem>;
}
/**
    * O365 Partial Organization selected item
    */
export interface PartialOrganizationSelectedItem {
        type: O365ItemRequestType;
        mailbox: boolean;
        archive_mailbox: boolean;
        one_drive: boolean;
        site: boolean;
        teams: boolean;
}
/**
    * O365 Group selected item
    */
export interface GroupSelectedItem {
        type: O365ItemRequestType;
        group: SelectedItemNestedGroup;
        members: boolean;
        member_mailbox: boolean;
        member_archive_mailbox: boolean;
        member_onedrive: boolean;
        member_site: boolean;
        mail: boolean;
        site: boolean;
        mailbox?: boolean;
}
/**
    * O365 Group nested selected item
    */
export interface SelectedItemNestedGroup {
        display_name: string;
        id: string;
        is_backed_up: boolean;
        name: string;
        type: string;
}
/**
    * O365 User selected item
    */
export interface UserSelectedItem {
        type: O365ItemRequestType;
        user: SelectedItemNestedUser;
        mailbox: boolean;
        archive_mailbox: boolean;
        one_drive: boolean;
        site: boolean;
}
/**
    * O365 user nested selected item
    */
export interface SelectedItemNestedUser {
        id: string;
        display_name: string;
        name: string;
        type: string;
        backed_up: boolean;
}
/**
    * O365 SharePoint Site selected item
    */
export interface SiteSelectedItem {
        type: O365ItemRequestType;
        site: SelectedItemNestedSite;
}
/**
    * O365 SharePoint Site nested selected item
    */
export interface SelectedItemNestedSite {
        id: string;
        url: string;
        name: string;
        cloud: boolean;
        title: string;
        backed_up: boolean;
}
/**
    * O365 Team selected item
    */
export interface TeamSelectedItem {
        type: O365ItemRequestType;
        team: SelectedItemNestedTeam;
}
/**
    * O365 Team nested selected item
    */
export interface SelectedItemNestedTeam {
        native_id: string;
        backed_up: boolean;
        display_name: string;
        mail: string;
        name: string;
}
/**
    * Enumeration of the available included/excluded items type of an O365 Backup Job
    */
export type O365ItemRequestType = 'User' | 'Site' | 'Team' | 'Group' | 'PartialOrganization';

/**
  * O365 Job Schedule Policy Request JSON properties
  */
export interface O365JobSchedulePolicyRequestJson {
    policy_type: O365JobSchedulePolicyType;
    daily_type?: O365JobSchedulePolicyDailyType;
    periodically_every?: O365JobSchedulePolicyPeriodicallyEvery;
    daily_time?: string;
    is_retry_enabled: boolean;
    retry_number: number;
    retry_wait_interval: number;
}

/**
    * O365 Backup Job selected or excluded items class
    */
export class O365BackupJobSelectedExcludedItems {
        constructor(_json: SelectedExcludedItems);
        /**
            * Get the O365 Backup Job selected or excluded partial org responses
            * @returns {Array<PartialOrgResponse>}
            */
        get partialOrgResponses(): Array<PartialOrgResponse>;
        /**
            * Get the O365 Backup Job selected or excluded Group responses
            * @returns {Array<GroupResponse>}
            */
        get groupResponses(): Array<GroupResponse>;
        /**
            * Get the O365 Backup Job selected or excluded User responses
            * @returns {Array<UserResponse>}
            */
        get userResponses(): Array<UserResponse>;
        /**
            * Get the O365 Backup Job selected or excluded SharePoint site responses
            * @returns {Array<SharePointSiteResponse>}
            */
        get sitesResponses(): Array<SharePointSiteResponse>;
        /**
            * Get the O365 Backup Job selected or excluded Team responses
            * @returns {Array<TeamResponse>}
            */
        get teamResponses(): Array<TeamResponse>;
        /**
            * Get the O365 Backup Job selected Team chat responses
            * @returns {Array<TeamsChatResponse>}
            */
        get TeamsChatResponses(): Array<TeamsChatResponse>;
        /**
            * Get the json representation of this class.
            * @returns {SelectedExcludedItems}
            */
        get json(): SelectedExcludedItems;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Interface for O365 Job Session JSON properties
    */
export interface O365JobSessionJson extends EntityJson {
        location_id: string;
        o365_organization_uuid: string;
        o365_job_uuid: string;
        creation_time: number;
        end_time: number;
        progress: number;
        status: O365JobSessionStatus;
        statistics: O365JobSessionStats;
}
/**
    * Enum for O365 Job Session Status
    */
export enum O365JobSessionStatus {
        FAILED = "Failed",
        RUNNING = "Running",
        STOPPED = "Stopped",
        SUCCESS = "Success",
        WARNING = "Warning"
}
/**
    * Interface for O365 Job Sessions Statistics
    */
export interface O365JobSessionStats {
        processing_rate_bytes_p_s: number;
        processing_rate_items_p_s: number;
        read_rate_bytes_p_s: number;
        write_rate_bytes_p_s: number;
        transferred_data_bytes: number;
        processed_objects: number;
        bottleneck: string;
}

/**
  * Interface for O365 Job Session Log Item JSON Properties
  */
export interface O365JobSessionLogItemJson {
    job_session_uuid: string;
    id: string;
    usn: number;
    title: string;
    creation_time: number;
    end_time: number;
}

/**
  * O365 Exchange Mailbox Folder Item JSON properties
  */
export interface O365MailboxFolderItemJson {
    id: string;
    from: string;
    cc: string;
    bcc: string;
    to: string;
    sent: number;
    received: number;
    reminder: boolean;
    subject: string;
    item_class: string;
}

/**
    * O365 Exchange Mailbox Folder JSON properties
    */
export interface O365MailboxFolderJson {
        id: string;
        name: string;
        type: O365ExchangeFolderType;
        description: string;
}
/**
    * O365 Exchange Folder type enum
    */
export enum O365ExchangeFolderType {
        JOURNAL = "Journal",
        TASK = "Task",
        STICKY_NOTE = "StickyNote",
        CONTACT = "Contact",
        APPOINTMENT = "Appointment",
        NONE = "None"
}

/**
  * Office 365 Mailbox JSON properties
  */
export interface O365MailboxJson {
    id: string;
    name: string;
    email: string;
    archive: boolean;
}

/**
  * Interface for O365 Mailbox Restore Options Request JSON properties
  */
export interface O365MailboxRestoreOptionsRequestJson {
    user?: string;
    password?: string;
    device_code?: string;
    mailbox_to_restore_to?: string;
    changed_items?: boolean;
    deleted_items?: boolean;
    mark_restored_as_unread?: boolean;
    exclude_drafts?: boolean;
    exclude_deleted_items?: boolean;
    exclude_in_place_hold_items?: boolean;
    exclude_litigation_hold_items?: boolean;
    folder?: string | null;
    cas_server?: string | null;
}

/**
  * O365 marked purge mailbox JSON properties
  */
export interface O365MarkedPurgeMailboxJson extends O365PurgeMailboxJson {
    organization_uuid: string;
    active: boolean;
    purge_date: number;
    purge_status: string;
    initiated_date: number;
    error_msg?: string;
    requested_by: string;
    completed_date?: number;
}

/**
  * O365 OneDrive Document JSON properties
  */
export interface O365OneDriveDocumentJson {
    id: string;
    name: string;
    version: string;
    size_bytes: number;
    inherited_permissions: boolean;
    created_by: string;
    creation_time: number;
    modified_by: string;
    modification_time: number;
}

/**
  * O365 OneDrive Folder Item JSON properties
  */
export interface O365OneDriveFolderJson {
    id: string;
    name: string;
    created_by: string;
    creation_time: number;
    modified_by: string;
    modification_time: number;
}

/**
  * O365 OneDrive JSON Properties
  */
export interface O365OneDriveJson {
    id: string;
    name: string;
    url: string;
}

/**
    * O365 OneDrive Restore Option Request JSON properties
    */
export interface O365OneDriveRestoreOptionsRequestJson {
        user?: string;
        password?: string;
        device_code?: string;
        action: O365OneDriveDocumentAction;
        version: O365OneDriveDocumentVersion;
        document_last_version_action?: O365OneDriveDocumentLastVersionAction;
        folder?: string;
        one_drive_id_to_restore_to?: string;
        changed_items?: boolean;
        deleted_items?: boolean;
        restore_permissions?: boolean;
        send_shared_links_notification?: boolean;
}
/**
    * O365 OneDrive Document Action enum
    */
export enum O365OneDriveDocumentAction {
        OVERWRITE = "overwrite",
        KEEP = "keep"
}
/**
    * O365 OneDrive Document Version enum
    */
export enum O365OneDriveDocumentVersion {
        ALL = "all",
        LAST = "last"
}
/**
    * O365 OneDrive document last version action enum
    */
export enum O365OneDriveDocumentLastVersionAction {
        OVERWRITE = "overwrite",
        MERGE = "merge"
}

/**
  * Interface for O365 Organization create / modify request JSON.
  */
export interface O365OrgCreateModifyRequestJson {
    name: string | null;
    account: string | null;
    password: string | null;
    use_modern_auth: boolean;
    application_id: string | null;
    application_secret: string | null;
    use_application_only_auth: boolean;
    user_code: string | null;
    new_application_name: string | null;
    is_exchange_online: boolean;
    is_teams_online: boolean;
    is_share_point_online: boolean;
    create_default_jobs: boolean;
    is_teams_chat_online?: boolean;
    o365_backup_repository_id?: string;
}

/**
    * Interface for O365 Organization JSON properties
    */
export interface O365OrganizationJson extends EntityJson {
        crm: string;
        location_id: string;
        contract_uuid: string;
        type: O365OrganizationType;
        region: O365OrganizationRegion;
        use_modern_auth: boolean;
        use_application_only_auth: boolean;
        application_id: string;
        is_backed_up: boolean;
        first_backup_time: Date;
        last_backup_time: Date;
        is_teams_online: boolean;
        is_teams_chat_online?: boolean;
        is_exchange_online: boolean;
        is_share_point_online: boolean;
        exchange_online_settings: any;
        share_point_online_settings: any;
        is_trial: boolean;
        protected_active_users: number;
        protected_inactive_users: number;
        total_protected_users: number;
        protected_shared_users: number;
        total_licensed_users: number;
        unprotected_licensed_users: number;
        number_of_reserved_licenses: number;
        number_of_licenses_used: number;
        iland_licensed_users: number;
        total_users: number;
        total_backedup_users: number;
        total_licenses_consumed: number;
        unprotected_users: number;
}
/**
    * O365 Organization Region enum
    */
export enum O365OrganizationRegion {
        WORLDWIDE = "Worldwide",
        US_GOV_COMMUNITY = "USgovCommunity",
        GERMANY = "Germany",
        CHINA = "China",
        US_GOV_DEFENCE = "USgovDefence"
}
/**
    * O365 Organization Type enum
    */
export enum O365OrganizationType {
        OFFICE365 = "Office365",
        ON_PREMISES = "OnPremises",
        HYBRID = "Hybrid"
}

/**
  * O365 purge mailbox JSON properties
  */
export interface O365PurgeMailboxJson {
    mailbox: string;
    user_native_uuid: string;
}

/**
    * Interface for O365 Restore Session Event JSON properties
    */
export interface O365RestoreSessionEventJson {
        item_size_bytes: number;
        id: string;
        type: O365RestoreSessionEventType;
        status: O365RestoreSessionEventStatus;
        start_time: number;
        end_time: number;
        duration: number;
        title: string;
        order: number;
}
/**
    * Enum for an O365 Restore Session Event Type
    */
export enum O365RestoreSessionEventType {
        NONE = "None",
        SAVE = "Save",
        EXPORT = "Export",
        SEND = "Send",
        RESTORE = "Restore",
        VIEW = "View"
}
/**
    * Enum for an O365 Restore Session Event Status
    */
export enum O365RestoreSessionEventStatus {
        RUNNING = "Running",
        SUCCESS = "Success",
        WARNING = "Warning",
        FAILED = "Failed"
}

/**
    * Interface for O365 Restore Session JSON properties
    */
export interface O365RestoreSessionJson extends EntityJson {
        location_id: string;
        o365_organization_uuid: string;
        type: O365RestoreSessionType;
        result: O365RestoreSessionResult;
        state: O365RestoreSessionState;
        creation_time: number;
        end_time: number;
        initiated_by: string;
        details: string;
        ancestors: any;
}
/**
    * Enum for O365 Restore Session Type
    */
export enum O365RestoreSessionType {
        VEX = "Vex",
        VESP = "Vesp",
        VEOD = "Veod",
        VET = "Vet"
}
/**
    * Enum for O365 Restore Session State
    */
export enum O365RestoreSessionState {
        STARTING = "Starting",
        WORKING = "Working",
        STOPPING = "Stopping",
        STOPPED = "Stopped"
}
/**
    * Enum for O365 Restore Session Result
    */
export enum O365RestoreSessionResult {
        SUCCESS = "Success",
        WARNING = "Warning",
        FAILED = "Failed"
}

/**
  * Interface for O365 Restore Session Start Request
  */
export interface O365RestoreSessionStartRequestJson {
    datetime: number;
    type: O365RestoreSessionType;
    show_all_versions: boolean;
    show_deleted: boolean;
}

/**
  * O365 SharePoint Attachment item JSON properties
  */
export interface O365SharePointAttachmentJson {
    id: string;
    name: string;
    size_bytes: number;
    url: string;
}

/**
  * O365 SharePoint Document JSON properties
  */
export interface O365SharePointDocumentJson {
    id: string;
    name: string;
    created_by: string;
    size_bytes: number;
    version: string;
    creation_time: number;
    modified_by: string;
    modification_time: number;
}

/**
    * O365 SharePoint Folder JSON properties
    */
export interface O365SharePointFolderJson {
        id: string;
        name: string;
        created_by: string;
        creation_time: number;
        modified_by: string;
        modification_time: number;
        type: O365SharePointFolderType;
}
/**
    * Enum for SharePoint Folder type
    */
export enum O365SharePointFolderType {
        LIST_FOLDER = "listFolder",
        LIBRARY_FOLDER = "libradyFolder",
        UNKNOWN = "unknown"
}

/**
  * O365 SharePoint Item JSON properties
  */
export interface O365SharePointItemJson {
    title: string;
    version: string;
    id: string;
    name: string;
    created_by: string;
    creation_time: number;
    modified_by: string;
    modification_time: number;
}

/**
  * O365 SharePoint Library JSON properties
  */
export interface O365SharePointLibraryJson {
    id: string;
    name: string;
    description: string;
    url: string;
    creation_time: number;
}

/**
  * O365 SharePoint List JSON properties
  */
export interface O365SharePointListJson {
    id: string;
    name: string;
    description: string;
    url: string;
    creation_time: number;
}

/**
    * O365 Restore Session SharePoint Options Request JSON properties
    */
export interface O365SharePointRestoreOptionsRequestJson {
        user?: string;
        password?: string;
        device_code?: string;
        restore_list_views: boolean;
        changed_items: boolean;
        deleted_items: boolean;
        restore_subsites: boolean;
        restore_master_pages: boolean;
        restore_permissions: boolean;
        document_version: O365SharePointDocumentVersion;
        send_shared_links_notification: boolean;
        document_last_version_action: O365SharePointDocumentLastVersionAction;
        list?: string;
        alias?: string;
}
/**
    * SharePoint Document Version enum
    * Specifies, which of the versions of the SharePoint documents will be restored
    */
export enum O365SharePointDocumentVersion {
        ALL = "all",
        LAST = "last"
}
/**
    * SharePoint Document Last Version Action enum
    * Specifies which action will be performed with the
    * last version of the restored SharePoint document on the destination list.
    */
export enum O365SharePointDocumentLastVersionAction {
        OVERWRITE = "overwrite",
        MERGE = "merge"
}

/**
  * O365 SharePoint Site JSON properties
  */
export interface O365SharePointSiteJson {
    id: string;
    url: string;
    name: string;
    cloud: boolean;
    title: string;
    backed_up: boolean;
    available: boolean;
}

/**
  * O365 Team Channel JSON properties
  */
export interface O365TeamChannelJson {
    native_id: string;
    display_name: string;
}

/**
  * O365 Team File JSON properties
  */
export interface O365TeamFileJson {
    native_id: string;
    name: string;
    modified_by: string;
    modified: number;
    parent_id: string;
    size_bytes: number;
    type: string;
    version: string;
}

/**
    * O365 Team items export request JSON properties
    */
export interface O365TeamItemsExportRequestJson {
        item_ids: Array<string>;
}
/**
    * O365 Teams export items (posts) given range request JSON properties
    */
export interface O365TeamsRangeExportRequestJson {
        from: number;
        to: number;
}

/**
  * O365 Team JSON properties
  */
export interface O365TeamJson {
    description: string;
    display_name: string;
    is_backed_up: boolean;
    mail: string;
    native_id: string;
    organization_uuid: string;
}

/**
  * O365 Team Post JSON properties
  */
export interface O365TeamPostJson {
    author: string;
    created_time: number;
    is_important: boolean;
    last_modification_time: number;
    native_id: string;
    subject: string;
}

/**
  * O365 Team Tab JSON properties
  */
export interface O365TeamTabJson {
    content_url: string;
    display_name: string;
    native_id: string;
    type: string;
}

/**
    * O365 Teams restore options request JSON properties
    */
export interface O365TeamsRestoreOptionsRequestJson {
        user?: string;
        password?: string;
        device_code?: string;
        restore_settings?: boolean;
        restore_missing_items?: boolean;
        restore_members?: boolean;
        restore_changed_items?: boolean;
        file_version?: O365TeamsFileVersion;
        file_last_version_action?: O365TeamsFileLastVersionAction;
        item_ids?: Array<string>;
        from?: number;
        to?: number;
}
/**
    * O365 Teams file version enum
    */
export enum O365TeamsFileVersion {
        ALL = "all",
        LAST = "last"
}
/**
    * O365 Teams file last version action enum
    */
export enum O365TeamsFileLastVersionAction {
        OVERWRITE = "overwrite",
        MERGE = "merge"
}

/**
  * Interface for O365 Teams send to email Request JSON properties
  */
export interface O365TeamsSendToEmailRequestJson {
    from: string;
    to: string;
    subject: string;
    text: string;
    item_ids?: Array<string>;
}

/**
  * O365 User JSON Properties
  */
export interface O365UserJson {
    display_name: string;
    organization_name: string;
    organization_uuid: string;
    type: string;
    is_backed_up: boolean;
    archived: boolean;
    licensed: boolean;
    is_deleted_from_org: boolean;
    name: string;
    native_id: string;
}

/**
    * O365 Group entity
    */
export class O365Group {
        constructor(_json: O365GroupJson);
        /**
            * Get the O365 Group display name
            * @returns {string}
            */
        get displayName(): string;
        /**
            * Get the O365 Group organization's name
            * @returns {string}
            */
        get organizationName(): string;
        /**
            * Get the O365 VBO Organization iland platform UUID
            * @returns {string}
            */
        get organizationUuid(): string;
        /**
            * Get the O365 Group type
            * @returns {string}
            */
        get type(): string;
        /**
            * Get the O365 Group name
            * @returns {string}
            */
        get name(): string;
        /**
            * Get the O365 Group native id
            * @returns {string}
            */
        get nativeId(): string;
        /**
            * Get whether the Office 365 Group is backed up
            * @returns {boolean}
            */
        get isBackedUp(): boolean;
        /**
            * Get whether the Office 365 Group has been deleted from the O365 organization
            * @returns {boolean}
            */
        get isDeletedFromOrg(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {O365GroupJson}
            */
        get json(): O365GroupJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 Create & Modify Job Request
    */
export class O365JobRequest {
        constructor(_json: O365JobRequestJson);
        /**
            * Get O365 Job creation / modification request name
            * @returns {string}
            */
        get name(): string;
        /**
            * Get O365 Job creation / modification request description
            * @returns {string | undefined}
            */
        get description(): string | undefined;
        /**
            * Get O365 Job creation / modification request backup type
            * @returns {O365JobBackupType}
            */
        get backupType(): O365JobBackupType;
        /**
            * Get O365 Job creation / modification request run now status
            * @returns {boolean}
            */
        get runNow(): boolean;
        /**
            * Get O365 Job creation / modification request job schedule request
            * @returns {O365JobSchedulePolicyRequest}
            */
        get jobScheduleRequest(): O365JobSchedulePolicyRequest;
        /**
            * Get O365 Job creation / modification request selected items request
            * @returns {Array<PartialOrganizationSelectedItem | GroupSelectedItem | UserSelectedItem | SiteSelectedItem |
            *   TeamSelectedItem> | undefined}
            */
        get selectedItemsRequest(): Array<PartialOrganizationSelectedItem | GroupSelectedItem | UserSelectedItem | SiteSelectedItem | TeamSelectedItem> | undefined;
        /**
            * Get O365 Job creation / modification request excluded items request
            * @returns {Array<PartialOrganizationSelectedItem | GroupSelectedItem | UserSelectedItem | SiteSelectedItem |
            *   TeamSelectedItem> | undefined}
            */
        get excludedItemsRequest(): Array<PartialOrganizationSelectedItem | GroupSelectedItem | UserSelectedItem | SiteSelectedItem | TeamSelectedItem> | undefined;
        /**
            * Get the json representation of this class.
            * @returns {O365JobRequestJson}
            */
        get json(): O365JobRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 Job Schedule Policy Request
    */
export class O365JobSchedulePolicyRequest {
        constructor(_json: O365JobSchedulePolicyRequestJson);
        /**
            * Gets the specified the job schedule type. e.g Daily or Periodically
            * @returns {O365JobSchedulePolicyType}
            */
        get policyType(): O365JobSchedulePolicyType;
        /**
            * Gets the daily type specifying the days when the backup job will run. Required if policyType is Daily.
            * @returns {O365JobSchedulePolicyDailyType | null}
            */
        get dailyType(): O365JobSchedulePolicyDailyType | null;
        /**
            * Gets the daily time specifying the time when the job will start. Required if policyType is Daily.
            * @returns {string | null}
            */
        get dailyTime(): string | null;
        /**
            * Gets the periodically every time specifying the time interval between the job runs.
            * Required if policyType is Periodically.
            * @returns {O365JobSchedulePolicyPeriodicallyEvery | null}
            */
        get periodicallyEvery(): O365JobSchedulePolicyPeriodicallyEvery | null;
        /**
            * Gets the retry enabled of O365 Job, if set to True, indicates that Veeam Backup for Microsoft Office 365 will
            * attempt to restart a backup job if it fails for some reason.
            * @returns {boolean}
            */
        get isRetryEnabled(): boolean;
        /**
            * Get the retry number that specifies the number of attempts to run the backup job if retry is enabled.
            * @returns {number}
            */
        get retryNumber(): number;
        /**
            * Gets the retry wait interval specifying the time intervals between the job retry attempts (minutes).
            * @returns {number}
            */
        get retryWaitInterval(): number;
        /**
            * Get the json representation of this class.
            * @returns {O365JobSchedulePolicyRequestJson}
            */
        get json(): O365JobSchedulePolicyRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 Job Session Log Item
    */
export class O365JobSessionLogItem {
        constructor(_json: O365JobSessionLogItemJson);
        /**
            * Get the Job Session uuid
            */
        get jobSessionUuid(): string;
        /**
            * Get the Log Item's id
            */
        get id(): string;
        /**
            * Get the Log Item's usn
            */
        get usn(): number;
        /**
            * Get the Log Item's title
            */
        get title(): string;
        /**
            * Get the Log Item's creation time
            */
        get creationTime(): number;
        /**
            * Get the Log Item's end time
            */
        get endTime(): number;
        /**
            * Get the json representation of this class.
            * @returns {StorageProfileJson}
            */
        get json(): O365JobSessionLogItemJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 Job Session
    */
export class O365JobSession extends Entity {
        constructor(_json: O365JobSessionJson);
        /**
            * Get a O365 Job Session by UUID
            * @param uuid
            * @returns {Promise<O365JobSession>} promise that resolves with a O365 Job
            */
        static getO365JobSession(uuid: string): Promise<O365JobSession>;
        /**
            * Get the O365 Job Session entity type
            */
        get entityType(): EntityType;
        /**
            * Gets the location id of O365 Job Session
            */
        get locationId(): string;
        /**
            * Gets the O365 Organization uuid of the O365 Job Session
            */
        get O365OrganizationUuid(): string;
        /**
            * Gets the O365 Job uuid of the O365 Job Session
            */
        get O365JobUuid(): string;
        /**
            * Gets the creation timestamp of the O365 Job Session
            */
        get creationTime(): number;
        /**
            * Gets the end time timestamp of the O365 Job Session
            */
        get endTime(): number;
        /**
            * Gets the progress of the O365 Job Session
            */
        get progress(): number;
        /**
            * Gets the status of the O365 Job Session
            */
        get status(): O365JobSessionStatus;
        /**
            * Gets the statistics of the O365 Job Session
            */
        get statistics(): O365JobSessionStats;
        /**
            * Refresh the O365 Job Session data by retrieving it from the API again.
            * @returns {Promise<O365JobSession>}
            */
        refresh(): Promise<O365JobSession>;
        /**
            * Get the Job Session Log Items
            * @returns {Promise<Array<O365JobSessionLogItem>>}
            */
        getLogItems(): Promise<Array<O365JobSessionLogItem>>;
}

/**
    * O365 Backup Job entity
    */
export class O365Job extends Entity {
        constructor(_json: O365JobJson);
        /**
            * Get a O365 Job by UUID
            * @param uuid
            * @returns {Promise<O365Job>} promise that resolves with a O365 Job
            */
        static getO365Job(uuid: string): Promise<O365Job>;
        /**
            * Get the O365 Job entity type
            * @returns {EntityType}
            */
        get entityType(): EntityType;
        /**
            * Get the location id of the O365 Job
            * @returns {string}
            */
        get locationId(): string;
        /**
            * Get the O365 organization uuid of the O365 Job
            * @returns {string}
            */
        get o365OrganizationUuid(): string;
        /**
            * Get the O365 Job description
            * @returns {string}
            */
        get description(): string;
        /**
            * Get the Last Run of the O365 Job
            * @returns {number}
            */
        get lastRun(): number;
        /**
            * Get the Next Run of the O365 Job
            * @returns {number}
            */
        get nextRun(): number;
        /**
            * Is the O365 Job enabled
            * @returns {boolean}
            */
        get isEnabled(): boolean;
        /**
            * Get the O365 Job Backup Type
            * @returns {O365JobBackupType}
            */
        get backupType(): O365JobBackupType;
        /**
            * Get the last status of the O365 Job
            * @returns {O365JobStatus}
            */
        get lastStatus(): O365JobStatus;
        /**
            * Get the schedule policy of the O365 Job
            * @returns {O365JobSchedulePolicy}
            */
        get schedulePolicy(): O365JobSchedulePolicy;
        /**
            * Indicates whether the Backup Job has the OneDrive service
            * @returns {boolean}
            */
        get hasOneDrive(): boolean;
        /**
            * Indicates whether the Backup Job has the Exchange service
            * @returns {boolean}
            */
        get hasExchange(): boolean;
        /**
            * Indicates whether the Backup Job has the SharePoint service
            * @returns {boolean}
            */
        get hasSharepoint(): boolean;
        /**
            * Indicates whether the Backup Job has the Teams service
            * @returns {boolean}
            */
        get hasTeams(): boolean;
        /**
            * Gets the Excluded Items for a SelectedItems type of Backup Job
            * @returns {O365BackupJobSelectedExcludedItems | null}
            */
        get excludedItems(): O365BackupJobSelectedExcludedItems | null;
        /**
            * Gets the Selected Items for a SelectedItems type of Backup Job
            * @returns {O365BackupJobSelectedExcludedItems | null}
            */
        get selectedItems(): O365BackupJobSelectedExcludedItems | null;
        /**
            * Indicates whether the Backup Job has at least 1 restore session with a status of success or warning
            * @returns {boolean}
            */
        get restoreSessionExist(): boolean;
        /**
            * Refreshes the O365 Job data by retrieving it from the API again.
            * @return {Promise<O365Job>}
            */
        refresh(): Promise<O365Job>;
        /**
            * Gets paginated Job Sessions for O365 Job
            * @param {number} [page]
            * @param {number} [pageSize]
            * @returns {Promise<Array<O365JobSession>>}
            */
        getJobSessions(page?: number, pageSize?: number): Promise<Array<O365JobSession>>;
        /**
            * Start an O365 Restore Session
            * @param {O365RestoreSessionStartRequest} request
            * @returns {Promise<O365RestoreSession>} the restore session created
            */
        startRestoreSession(request: O365RestoreSessionStartRequest): Promise<O365RestoreSession>;
        /**
            * Start O365 Backup Job
            * @return {Promise<any>}
            */
        startJob(): Promise<any>;
        /**
            * Stop O365 Backup Job
            * @return {Promise<any>}
            */
        stopJob(): Promise<any>;
        /**
            * Enable O365 Backup Job
            * @return {Promise<any>}
            */
        enableJob(): Promise<any>;
        /**
            * Disable O365 Backup Job
            * @return {Promise<any>}
            */
        disableJob(): Promise<any>;
        /**
            * Modify an O365 Job's schedule policy
            * @param {O365JobSchedulePolicyRequest} request - the job schedule policy request object
            * @returns {Promise<O365Job>} the modified o365 job
            */
        updateSchedulePolicy(request: O365JobSchedulePolicyRequest): Promise<O365Job>;
        /**
            * Modify an O365 backup job
            * @param {O365JobRequest} request
            * @returns {Promise<O365Job>}
            */
        updateJob(request: O365JobRequest): Promise<O365Job>;
        /**
            * Delete O365 Backup Job
            * @return {Promise<any>}
            */
        deleteJob(): Promise<any>;
}

/**
    * O365 Exchange Mailbox Folder Item
    */
export class O365MailboxFolderItem {
        constructor(_json: O365MailboxFolderItemJson);
        /**
            * Gets the id of the O365 Mailbox Folder item
            */
        get id(): string;
        /**
            * Gets the from of the O365 Mailbox Folder item
            */
        get from(): string;
        /**
            * Gets the cc of the O365 Mailbox Folder item
            */
        get cc(): string;
        /**
            * Gets the bcc of the O365 Mailbox Folder item
            */
        get bcc(): string;
        /**
            * Gets the to of the O365 Mailbox Folder item
            */
        get to(): string;
        /**
            * Gets the sent date timestamp of the O365 Mailbox Folder item
            */
        get sentDate(): number;
        /**
            * Gets the received date timestamp of the O365 Mailbox Folder item
            */
        get receivedDate(): number;
        /**
            * Is the O365 Mailbox Folder item a reminder
            */
        get isReminder(): boolean;
        /**
            * Gets the subject of the O365 Mailbox Folder item
            */
        get subject(): string;
        /**
            * Gets the item class of the O365 Mailbox Folder item
            */
        get itemClass(): string;
        /**
            * Get the json representation of this class.
            * @returns {O365MailboxFolderItemJson}
            */
        get json(): O365MailboxFolderItemJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 Exchange Mailbox Folder
    */
export class O365MailboxFolder {
        constructor(_json: O365MailboxFolderJson);
        /**
            * Get the id of the O365 Exchange Mailbox Folder
            */
        get id(): string;
        /**
            * Get the name of the O365 Exchange Mailbox Folder
            */
        get name(): string;
        /**
            * Get the type of the O365 Exchange Mailbox Folder
            */
        get type(): O365ExchangeFolderType;
        /**
            * Get the description of the O365 Exchange Mailbox Folder
            */
        get description(): string;
        /**
            * Get the json representation of this class.
            * @returns {O365MailboxFolderJson}
            */
        get json(): O365MailboxFolderJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 Mailbox Restore Options Request
    */
export class O365MailboxRestoreOptionsRequest {
        constructor(_json: O365MailboxRestoreOptionsRequestJson);
        /**
            * Get the credential request user
            * @returns {string | undefined}
            */
        get user(): string | undefined;
        /**
            * Get the credential request password
            * @returns {string | undefined}
            */
        get password(): string | undefined;
        /**
            * Get the device code you want to use for authenticating with the Microsoft organization.
            * @returns {string | undefined}
            */
        get deviceCode(): string | undefined;
        /**
            * Get the specific email address of the mailbox to which you want to restore mailbox data
            * Required when restoring to a different mailbox
            * @returns {string | undefined}
            */
        get mailboxToRestoreTo(): string | undefined;
        /**
            * Get changed items, If set to True, indicates that all versions of mailbox items will be restored
            * Required when restoring to a different mailbox.
            * @returns {boolean | undefined}
            */
        get changedItems(): boolean | undefined;
        /**
            * Get deleted items, If set to True, indicates that deleted mailbox items will be restored
            * Required when restoring to a different mailbox.
            * @returns {boolean | undefined}
            */
        get deletedItems(): boolean | undefined;
        /**
            * Get mark restored items as unread, If set to True, indicates that restored mailbox folder data will
            * be marked as unread
            * Required when restoring to a different mailbox.
            * @returns {boolean | undefined}
            */
        get markRestoredAsUnread(): boolean | undefined;
        /**
            * Get exclude drafts, If set to True, indicates that Drafts mailbox folder will not be restored
            * Optional when restoring to a different mailbox.
            * @returns {boolean | undefined}
            */
        get excludeDrafts(): boolean | undefined;
        /**
            * Get exclude deleted items, If set to True, indicates that Deleted Items mailbox folder will not be restored
            * Optional when restoring to a different mailbox.
            * @returns {boolean | undefined}
            */
        get excludeDeletedItems(): boolean | undefined;
        /**
            * Get exclude in place hold items, If set to True, indicates that preserved items of mailboxes placed on
            * In-Place Hold will not be restored.
            * Optional when restoring to a different mailbox.
            * @returns {boolean | undefined}
            */
        get excludeInPlaceHoldItems(): boolean | undefined;
        /**
            * Get exclude litigation hold items, If set to True, indicates that preserved items of mailboxes placed on
            * Litigation Hold will not be restored
            * Optional when restoring to a different mailbox.
            * @returns {boolean | undefined}
            */
        get excludeLitigationHoldItems(): boolean | undefined;
        /**
            * Get folder to restore to, Specifies the folder to which you want to restore mailbox folder data
            * Optional when restoring to a different mailbox.
            * @returns {string | null}
            */
        get folder(): string | null;
        /**
            * Get CAS Server, Specifies the Microsoft Exchange server with Client Access Server (CAS) role.
            * The mailbox data will be restored to a specified mailbox server
            * Optional when restoring to a different mailbox.
            * @returns {string | null}
            */
        get casServer(): string | null;
        /**
            * Get the json representation of this class.
            * @returns {O365MailboxRestoreOptionsRequestJson}
            */
        get json(): O365MailboxRestoreOptionsRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Office 365 Mailbox
    */
export class O365Mailbox {
        constructor(_json: O365MailboxJson);
        /**
            * Gets the id of the O365 mailbox
            */
        get id(): string;
        /**
            * Gets the name of the O365 mailbox
            */
        get name(): string;
        /**
            * Gets the email of the O365 mailbox
            */
        get email(): string;
        /**
            * Is O365 mailbox archived
            */
        get isArchive(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {O365MailboxJson}
            */
        get json(): O365MailboxJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 marked purge mailbox
    */
export class O365MarkedPurgeMailbox {
        constructor(_json: O365MarkedPurgeMailboxJson);
        /**
            * Get the mailbox (email) that is marked for purging.
            * @returns {string}
            */
        get mailbox(): string;
        /**
            * Get the user native uuid for the mailbox that was marked for purging.
            * @returns {string}
            */
        get userNativeUuid(): string;
        /**
            * Get the org platform uuid associated with this mailbox.
            * @returns {string}
            */
        get organizationUuid(): string;
        /**
            * Get whether this user / mailbox will be purged at all (cancel use case).
            * @returns {string}
            */
        get isActive(): boolean;
        /**
            * Get the purge date associated with this mailbox.
            * @returns {number}
            */
        get purgeDate(): number;
        /**
            * Get the status of this purge user request - Completed, Running, Cancelled or Failed.
            * @returns {string}
            */
        get purgeStatus(): string;
        /**
            * Get the purge initiated date associated with this mailbox.
            * @returns {number}
            */
        get initiatedDate(): number;
        /**
            * Get the error message if any on this purge request (would come from monocle)
            * @returns {string | undefined}
            */
        get errorMsg(): string | undefined;
        /**
            * Get the user who requested the purged mailbox
            * @returns {string | undefined}
            */
        get requestedBy(): string | undefined;
        /**
            * Get the purge completed date time.
            * @returns {number | undefined}
            */
        get completedDate(): number | undefined;
        /**
            * Get the json representation of this class.
            * @returns {O365MarkedPurgeMailboxJson}
            */
        get json(): O365MarkedPurgeMailboxJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 OneDrive Document Item
    */
export class O365OneDriveDocument {
        constructor(_json: O365OneDriveDocumentJson);
        /**
            * Gets the id of the OneDrive Document
            */
        get id(): string;
        /**
            * Gets the name of the OneDrive Document
            */
        get name(): string;
        /**
            * Gets the version of the OneDrive Document
            */
        get version(): string;
        /**
            * Gets the size in bytes of the OneDrive Document
            */
        get sizeInBytes(): number;
        /**
            * Has inherited permissions
            */
        get hasInheritedPermissions(): boolean;
        /**
            * Gets the created by of the OneDrive Document
            */
        get createdBy(): string;
        /**
            * Gets the modification timestamp of the OneDrive Document
            */
        get modificationTime(): number;
        /**
            * Get the json representation of this class.
            * @returns {O365OneDriveDocumentJson}
            */
        get json(): O365OneDriveDocumentJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 OneDrive Folder Item
    */
export class O365OneDriveFolder {
        constructor(_json: O365OneDriveFolderJson);
        /**
            * Gets the id of the OneDrive Folder
            */
        get id(): string;
        /**
            * Gets the name of the OneDrive Folder
            */
        get name(): string;
        /**
            * Gets the created by of the OneDrive Folder
            */
        get createdBy(): string;
        /**
            * Gets the creation timestamp of the OneDrive Folder
            */
        get creationTime(): number;
        /**
            * Gets the modified by of the OneDrive Folder
            */
        get modifiedBy(): string;
        /**
            * Gets the modification timestamp of the OneDrive Folder
            */
        get modificationTime(): number;
        /**
            * Get the json representation of this class.
            * @returns {O365OneDriveFolderJson}
            */
        get json(): O365OneDriveFolderJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 OneDrive Restore Options Request
    */
export class O365OneDriveRestoreOptionsRequest {
        constructor(_json: O365OneDriveRestoreOptionsRequestJson);
        /**
            * Get user from OneDrive Restore request. Required for basic authentication
            * @returns {string | undefined}
            */
        get user(): string | undefined;
        /**
            * Get password from OneDrive Restore request. Required for basic authentication
            * @returns {string | undefined}
            */
        get password(): string | undefined;
        /**
            * Get the MS Azure one time device code obtained for the O365 session.
            * Required for modern app based authentication.
            * @returns {string | undefined}
            */
        get deviceCode(): string | undefined;
        /**
            * Get action from OneDrive Restore request
            * @returns {O365OneDriveDocumentAction}
            */
        get action(): O365OneDriveDocumentAction;
        /**
            * Get version from OneDrive Restore request
            * @returns {O365OneDriveDocumentVersion}
            */
        get version(): O365OneDriveDocumentVersion;
        /**
            * Get document last version action, Specifies, which one of the following actions will be performed with the
            * last version of the restored OneDrive document on the production server
            * Required when restoring to a different location
            * @returns {O365OneDriveDocumentLastVersionAction | undefined}
            */
        get documentLastVersionAction(): O365OneDriveDocumentLastVersionAction | undefined;
        /**
            * Get folder to restore to, Specifies the target OneDrive folder copy destination.
            * @returns {string | undefined}
            */
        get folder(): string | undefined;
        /**
            * Get oneDrive Id to restore to, Specifies the target OneDrive copy destination
            * Required when restoring to a different location
            * @returns {string | undefined}
            */
        get oneDriveIdToRestoreTo(): string | undefined;
        /**
            * Get changed items, If set to True, indicates that all versions of OneDrive items will be copied
            * Required when restoring to a different location
            * @returns {boolean | undefined}
            */
        get changedItems(): boolean | undefined;
        /**
            * Get deleted items, If set to True, indicates that deleted OneDrive items will be copied
            * Required when restoring to a different location
            * @returns {boolean | undefined}
            */
        get deletedItems(): boolean | undefined;
        /**
            * Get restore permission, If set to True, indicates that the OneDrive items will be restored with all permissions
            * Required when restoring to a different location
            * @returns {boolean | undefined}
            */
        get restorePermissions(): boolean | undefined;
        /**
            * Get send shared links notification, If set to True, indicates that shared links notifications will be sent
            * Required when restoring to a different location
            * @returns {boolean | undefined}
            */
        get sendSharedLinksNotification(): boolean | undefined;
        /**
            * Get the json representation of this class.
            * @returns {O365OneDriveRestoreOptionsRequestJson}
            */
        get json(): O365OneDriveRestoreOptionsRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 OneDrive Item
    */
export class O365OneDrive {
        constructor(_json: O365OneDriveJson);
        /**
            * Gets the id of the OneDrive item
            */
        get id(): string;
        /**
            * Gets the name of the OneDrive item
            */
        get name(): string;
        /**
            * Gets the url of the OneDrive item
            */
        get url(): string;
        /**
            * Get the json representation of this class.
            * @returns {O365OneDriveJson}
            */
        get json(): O365OneDriveJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 Organization create / modify request object.
    */
export class O365OrgCreateModifyRequest {
        constructor(o365OrgCreateModifyRequest: O365OrgCreateModifyRequest);
        constructor(o365OrgCreateModifyRequestJson: O365OrgCreateModifyRequestJson);
        /**
            * Get the (optional) name of the Office 365 organization. If not provided,
            * it will be defaulted to [orgName].onmicrosoft.com
            * @returns {string | null}
            */
        get name(): string | null;
        /**
            * Get the user of the Office 365 online account. Optional for Modern App-Only Authentication.
            * @returns {string | undefined}
            */
        get account(): string | null;
        /**
            * Get the password of the Office 365 online account. Optional for Modern App-Only Authentication.
            * @returns {string}
            */
        get password(): string | null;
        /**
            * Get whether to use modern authentication. Required (set to true) when
            * useApplicationOnlyAuth is also set to true
            * @returns {boolean}
            */
        get useModernAuth(): boolean;
        /**
            * Get the identification number of the Azure AD application that you want to use
            * to access your O365 organization. Required only when useModernAuth is true.
            * @returns {string | null}
            */
        get applicationId(): string | null;
        /**
            * Get the application secret for the specified Azure AD application. Required only
            * when useModernAuth is true.
            * @returns {string | null}
            */
        get applicationSecret(): string | null;
        /**
            * Get whether to use Azure AD application authentication.
            * @returns {boolean}
            */
        get useApplicationOnlyAuth(): boolean;
        /**
            * Get the one time device code obtained from the Azure portal (https://microsoft.com/devicelogin).
            * Required for Modern App authentication method (useApplicationOnlyAuth = true).
            * @returns {string | null}
            */
        get userCode(): string | null;
        /**
            * Get the name for the new Azure AD application.
            * Required for Modern App authentication method (useApplicationOnlyAuth = true).
            * @returns {string | null}
            */
        get newApplicationName(): string | null;
        /**
            * Get isExchangeOnline.
            * @returns {boolean}
            */
        get isExchangeOnline(): boolean;
        /**
            * Get isTeamsOnline.
            * @returns {boolean}
            */
        get isTeamsOnline(): boolean;
        /**
            * Get isTeamsChatOnline.
            * @returns {boolean | undefined}
            */
        get isTeamsChatOnline(): boolean | undefined;
        /**
            * Get isSharePointOnline.
            * @returns {boolean}
            */
        get isSharePointOnline(): boolean;
        /**
            * Get create default jobs
            * @returns {boolean | null}
            */
        get createDefaultJobs(): boolean | null;
        /**
            * Get the json representation of this class.
            * @returns {O365OrgCreateModifyRequestJson}
            */
        get json(): O365OrgCreateModifyRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 Organization
    */
export class O365Organization extends Entity {
        constructor(_json: O365OrganizationJson);
        /**
            * Gets a O365 Organization by UUID
            * @param uuid
            * @returns {Promise<O365Organization>} promise that resolves with a O365 Organization
            */
        static getO365Organization(uuid: string): Promise<O365Organization>;
        /**
            * Get the O365 Organization entity type
            * @returns {EntityType}
            */
        get entityType(): EntityType;
        /**
            * Gets the CRM of the O365 Organization
            * @returns {string}
            */
        get crm(): string;
        /**
            * Gets the location id of the O365 Organization
            * @returns {string}
            */
        get locationId(): string;
        /**
            * Gets the contract uuid of the O365 Organization
            * @returns {string}
            */
        get contractUuid(): string;
        /**
            * Gets the Type of the O365 Organization
            * @returns {O365OrganizationType}
            */
        get type(): O365OrganizationType;
        /**
            * Gets the region of the O365 Organization
            * @returns {O365OrganizationRegion}
            */
        get region(): O365OrganizationRegion;
        /**
            * Get whether to use modern authentication.
            * @returns {boolean}
            */
        get useModernAuth(): boolean;
        /**
            * Get whether to use modern application only authentication.
            * @returns {boolean}
            */
        get useApplicationOnlyAuth(): boolean;
        /**
            * Get the applicationId to use during modern app device code generation.
            * @returns {string}
            */
        get applicationId(): string;
        /**
            * Is O365 Organization backed up
            * @returns {boolean}
            */
        get isBackedUp(): boolean;
        /**
            * Gets the first backup time of the O365 Organization
            * @returns {Date}
            */
        get firstBackupTime(): Date;
        /**
            * Gets the last backup time of the O365 Organization
            * @returns {Date}
            */
        get lastBackupTime(): Date;
        /**
            * Is the O365 Organization teams online
            * @returns {boolean}
            */
        get isTeamsOnline(): boolean;
        /**
            * Get isTeamsChatOnline.
            * @returns {boolean | undefined}
            */
        get isTeamsChatOnline(): boolean | undefined;
        /**
            * Is the O365 Organization exchange online
            * @returns {boolean}
            */
        get isExchangeOnline(): boolean;
        /**
            * Is the O365 Organization sharePoint online
            * @returns {boolean}
            */
        get isSharePointOnline(): boolean;
        /**
            * Is O365 Organization in trial
            * @returns {boolean}
            */
        get isTrial(): boolean;
        /**
            * Get the total number of backed up active users of account type User.
            * @returns {number}
            */
        get protectedActiveUsers(): number;
        /**
            * Get the total number of backed up inactive users of account type User.
            * @returns {number}
            */
        get protectedInactiveUsers(): number;
        /**
            * Get the total number of backed up users of account type User.
            * @returns {number}
            */
        get totalProtectedUsers(): number;
        /**
            * Get the total number of backed up Group/Shared/Public users.
            * @returns {number}
            */
        get protectedSharedUsers(): number;
        /**
            * Get the total number of active users with account type User.
            * @returns {number}
            */
        get totalLicensedUsers(): number;
        /**
            * Get the total number of unprotected active users with account type User.
            * @returns {number}
            */
        get unprotectedLicensedUsers(): number;
        /**
            * Get the number of reserved licenses (per the O365 Org's contract).
            * @returns {number}
            */
        get numberOfReservedLicenses(): number;
        /**
            * Get the number of licenses used by this O365 Org.
            * @returns {number}
            */
        get numberOfLicensesUsed(): number;
        /**
            * Get the licensed user count.
            * @returns {number}
            */
        get ilandLicensedUsers(): number;
        /**
            * Get total users of the O365 Organization
            * @deprecated This O365 Org field is deprecated
            */
        get totalUsers(): number;
        /**
            * Get total backed up users of the O365 Organization
            * @deprecated This O365 Org field is deprecated
            */
        get totalBackedupUsers(): number;
        /**
            * Get total licenses consumed by O365 Organization
            * @deprecated This O365 Org field is deprecated
            * @returns {number}
            */
        get totalLicensesConsumed(): number;
        /**
            * Get total unprotected users of the O365 Organization
            * @deprecated This O365 Org field is deprecated
            */
        get unprotectedUsers(): number;
        /**
            * Refreshes the O365 Organization data by retrieving it from the API again.
            * @returns {Promise<O365Organization>} promise that resolves with this object
            */
        refresh(): Promise<O365Organization>;
        /**
            * Get O365Organization Jobs.
            * @returns {Promise<Array<O365Job>>}
            */
        getJobs(): Promise<Array<O365Job>>;
        /**
            * Get O365 Organization's Inactive Restore Sessions
            * Ordered by creation time for the pagination
            * @param {number} page - page to get the restore sessions from. API page holds max 100 entries
            * @param {number} pageSize - how many restore sessions from a certain page to get, cannot get more than 100
            * @returns {Promise<Array<O365RestoreSession>>}
            */
        getInactiveRestoreSessions(page?: number, pageSize?: number): Promise<Array<O365RestoreSession>>;
        /**
            * Get O365 Organization's Active Restore Sessions
            * @returns {Promise<Array<O365RestoreSession>>}
            */
        getActiveRestoreSessions(): Promise<Array<O365RestoreSession>>;
        /**
            * Start an O365 Restore Session
            * @param {O365RestoreSessionStartRequest} startRequest
            * @returns {Promise<O365RestoreSession>} the restore session created
            */
        createRestoreSession(startRequest: O365RestoreSessionStartRequest): Promise<O365RestoreSession>;
        /**
            * Get the paginated users for the Office 365 Organization
            * @param page
            * @param pageSize
            * @param searchUser
            * @returns {Promise<Array<O365User>>}
            */
        getOrgUsers(page?: number, pageSize?: number, searchUser?: string): Promise<Array<O365User>>;
        /**
            * Delete the O365 Organization
            * @returns {Promise}
            */
        deleteOrg(): Promise<unknown>;
        /**
            * Get the O365 Organization's groups
            * @param page
            * @param pageSize
            * @returns {Promise<Array<O365Group>>}
            */
        getOrgGroups(page?: number, pageSize?: number): Promise<Array<O365Group>>;
        /**
            * Create an o365 backup job for this organization
            * @param o365CreateJobRequest {O365JobRequest}
            * @returns {Promise<O365Job>} the backup job created
            */
        createBackupJob(o365CreateJobRequest: O365JobRequest): Promise<O365Job>;
        /**
            * Modify the credentials of a Microsoft Office 365 VBO organization given its uuid
            * @params request {O365OrgCreateModifyRequest}
            * @returns {Promise<unknown>}
            */
        modifyCredentials(request: O365OrgCreateModifyRequest): Promise<unknown>;
        /**
            * Get the O365 Device code
            * @returns {Promise<O365DeviceCode>}
            */
        getO365DeviceCode(): Promise<O365DeviceCode>;
        /**
            * Get the O365 Organization's SharePoint sites
            * @param page
            * @param pageSize
            * @returns {Promise<Array<O365SharePointSite>>}
            */
        getOrgSites(page?: number, pageSize?: number): Promise<Array<O365SharePointSite>>;
        /**
            * Get the O365 Organization's Teams
            * @param page
            * @param pageSize
            * @returns {Promise<Array<O365Team>>}
            */
        getOrgTeams(page?: number, pageSize?: number): Promise<Array<O365Team>>;
        /**
            * Get the O365 Organization's backup repositories to use in creation of a Backup Job
            * @returns {Promise<Array<O365BackupRepository>>}
            */
        getOrgRepositories(): Promise<Array<O365BackupRepository>>;
        /**
            * Get the O365 organization users download in csv format
            * @param downloadProgress {function} optional progress callback if user wishes to receive progress events
            * for their download
            * @returns {Promise<Blob>} will return a promise with the Blob to download
            */
        downloadUsers(downloadProgress?: (e: any) => void): Promise<Blob>;
        /**
            * Get the O365 Organization's active purge mailboxes
            * @returns {Promise<Array<O365MarkedPurgeMailbox>>}
            */
        getPurgeMailboxes(): Promise<Array<O365MarkedPurgeMailbox>>;
        /**
            * Submits a purge request for the given mailboxes of the given organization.
            * @param mailboxes {Array<O365PurgeMailbox>}
            * @returns {Promise<unknown>}
            */
        purgeMailboxes(mailboxes: Array<O365PurgeMailbox>): Promise<unknown>;
        /**
            * Submits a cancel purge request for the given mailboxes of the given organization.
            * @param mailboxes {Array<O365PurgeMailbox>}
            * @returns {Promise<unknown>}
            */
        cancelPurge(mailboxes: Array<O365PurgeMailbox>): Promise<unknown>;
}

/**
    * O365 purge mailbox
    */
export class O365PurgeMailbox {
        constructor(_json: O365PurgeMailboxJson);
        /**
            * Get the mailbox / username marked for purging.
            * @returns {string}
            */
        get mailbox(): string;
        /**
            * Get the user native uuid for the mailbox marked for purging.
            * @returns {string}
            */
        get userNativeUuid(): string;
        /**
            * Get the json representation of this class.
            * @returns {O365PurgeMailboxJson}
            */
        get json(): O365PurgeMailboxJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 Restore Session Event
    */
export class O365RestoreSessionEvent {
        constructor(_json: O365RestoreSessionEventJson);
        /**
            * Get the item size in bytes
            */
        get itemSizeBytes(): number;
        /**
            * Get id for Restore Session Event
            */
        get id(): string;
        /**
            * Get the type for Restore Session Event
            */
        get type(): O365RestoreSessionEventType;
        /**
            * Get the status for Restore Session Event
            */
        get status(): O365RestoreSessionEventStatus;
        /**
            * Get the start time for Restore Session Event
            */
        get startTime(): number;
        /**
            * Get the end time for Restore Session Event
            */
        get endTime(): number;
        /**
            * Get the duration for Restore Session Event
            */
        get duration(): number;
        /**
            * Get the title for Restore Session Event
            */
        get title(): string;
        /**
            * Get the order for Restore Session Event
            */
        get order(): number;
        /**
            * Get the json representation of this class.
            * @returns {O365RestoreSessionEventJson}
            */
        get json(): O365RestoreSessionEventJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 Restore Session start request
    */
export class O365RestoreSessionStartRequest {
        constructor(_json: O365RestoreSessionStartRequestJson);
        /**
            * Gets the date timestamp of request
            * @returns {number}
            */
        get dateTime(): number;
        /**
            * Gets the type of restore session of request
            * @returns {O365RestoreSessionType}
            */
        get type(): O365RestoreSessionType;
        /**
            * Gets the show all versions of request
            * @returns {boolean}
            */
        get isShowAllVersions(): boolean;
        /**
            * Is show deleted boolean of request
            * @returns {boolean}
            */
        get isShowDeleted(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {O365RestoreSessionStartRequestJson}
            */
        get json(): O365RestoreSessionStartRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 Restore Session
    */
export class O365RestoreSession extends Entity {
        constructor(_json: O365RestoreSessionJson);
        /**
            * Get a O365 Restore Session by UUID
            * @param uuid
            * @returns {Promise<O365RestoreSession>} promise that resolves with a O365 Restore Session
            */
        static getO365RestoreSession(uuid: string): Promise<O365RestoreSession>;
        /**
            * Get the O365 Restore Session entity type
            */
        get entityType(): EntityType;
        /**
            * Gets the location id of O365 Restore Session
            */
        get locationId(): string;
        /**
            * Gets the O365 Organization uuid of the O365 Restore Session
            */
        get O365OrganizationUuid(): string;
        /**
            * Get the O365 Restore Session's type
            */
        get type(): O365RestoreSessionType;
        /**
            * Get the O365 Restore Session's result
            */
        get result(): O365RestoreSessionResult;
        /**
            * Get the O365 Restore Session's state
            */
        get state(): O365RestoreSessionState;
        /**
            * Get the O365 Restore Session's creation time
            */
        get creationTime(): number;
        /**
            * Get the O365 Restore Session's end time
            */
        get endTime(): number;
        /**
            * Get the O365 Restore Session's initiated by
            */
        get initiatedBy(): string;
        /**
            * Get the O365 Restore Session's details
            */
        get details(): string;
        /**
            * Get the O365 Restore Session's ancestors
            */
        get ancestors(): any;
        /**
            * Refresh the O365 Restore Session data by retrieving it from the API again.
            * @returns {Promise<O365RestoreSession>}
            */
        refresh(): Promise<O365RestoreSession>;
        /**
            * Get O365 Restore Session events given the restore session uuid
            * @return {Promise<Array<O365RestoreSessionEvent>>}
            */
        getEvents(): Promise<Array<O365RestoreSessionEvent>>;
        /**
            * Stop O365 Restore Session
            * @return {Promise<any>}
            */
        stopRestoreSession(): Promise<any>;
        /**
            * Get O365 Restore Session Exchange mailboxes
            *
            * Proxying directly to vbo: page and pageSize are used as offset and limit respectively
            * @param page
            * @param pageSize
            * @returns {Promise<Array<O365Mailbox>>} the list of O365 mailboxes
            */
        getMailboxes(page?: number, pageSize?: number): Promise<Array<O365Mailbox>>;
        /**
            * Get O365 Restore Session Exchange mailbox folders
            * Proxying directly to vbo: page and pageSize are used as offset and limit respectively
            * @param mailboxId
            * @param folderId
            * @param page
            * @param pageSize
            * @returns {Promise<Array<O365MailboxFolder>>} the list of O365 mailbox folders
            */
        getMailboxFolders(mailboxId: string, folderId: string | null, page?: number, pageSize?: number): Promise<Array<O365MailboxFolder>>;
        /**
            * Get O365 Restore Session Exchange mailbox folder items
            * Proxying directly to vbo: page and pageSize are used as offset and limit respectively
            * @param mailboxId
            * @param folderId
            * @param page
            * @param pageSize
            * @returns {Promise<Array<O365MailboxFolderItem>>} the list of O365 mailbox folder items
            */
        getMailboxFolderItems(mailboxId: string, folderId: string | null, page?: number, pageSize?: number): Promise<Array<O365MailboxFolderItem>>;
        /**
            * Restore an Office 365 VBO Exchange mailbox to either original location
            * or a different location given the restore session UUID and mailbox ID.
            * This method will return TaskResponse object immediately and submits the
            * restoration task in the background.
            * @param {string} mailboxId
            * @param {O365MailboxRestoreOptionsRequest} request
            * @returns {Promise<Task>}
            */
        restoreMailbox(mailboxId: string, request: O365MailboxRestoreOptionsRequest): Promise<Task>;
        /**
            * Restore O365 Exchange mailbox folder to its original location
            * @param mailboxId
            * @param folderId
            * @param request
            */
        restoreMailboxFolderToOriginalLocation(mailboxId: string, folderId: string, request: O365MailboxRestoreOptionsRequest): Promise<any>;
        /**
            * Restore O365 Exchange mailbox item to its original location
            * @param mailboxId
            * @param itemId
            * @param request
            */
        restoreMailboxItemToOriginalLocation(mailboxId: string, itemId: string, request: O365MailboxRestoreOptionsRequest): Promise<any>;
        /**
            * Get an Exchange Mailbox download as PST
            * @param mailboxId {string} the Exchange mailbox id
            * @param downloadProgressCallback {function} optional progress callback if user wishes to receive progress events
            * for their download
            * @returns {Promise<Blob>} will return a promise with the Blob to download
            */
        getMailboxDownload(mailboxId: string, downloadProgressCallback?: (e: any) => void): Promise<Blob>;
        /**
            * Get an Exchange Mailbox folder download as PST
            * @param mailboxId {string} the Exchange mailbox id
            * @param folderId {string} the Exchange mailbox folder id
            * @param downloadProgressCallback {function} optional progress callback if user wishes to receive progress events
            * for their download
            * @returns {Promise<Blob>} will return a promise with the Blob to download
            */
        getMailboxFolderDownload(mailboxId: string, folderId: string, downloadProgressCallback?: (e: any) => void): Promise<Blob>;
        /**
            * Get an Exchange Mailbox item download as an MSG or PST
            * @param mailboxId {string} the Exchange mailbox id
            * @param itemId {string} the Exchange mailbox item id
            * @param format {string} must be of MSG or PST
            * @param downloadProgressCallback {function} optional progress callback if user wishes to receive progress events
            * for their download
            * @returns {Promise<Blob>} will return a promise with the Blob to download
            */
        getMailboxItemDownload(mailboxId: string, itemId: string, format: string, downloadProgressCallback?: (e: any) => void): Promise<Blob>;
        /**
            * Gets O365 Restore Session OneDrives
            * Proxying directly to vbo: page and pageSize are used as offset and limit respectively
            * @param page
            * @param pageSize
            * @returns {Promise<Array<O365OneDrive>>} the list of O365 OneDrives
            */
        getOneDrives(page?: number, pageSize?: number): Promise<Array<O365OneDrive>>;
        /**
            * Gets O365 Restore Session OneDrive folders
            * Proxying directly to vbo: page and pageSize are used as offset and limit respectively
            * @param oneDriveId
            * @param folderId
            * @param page
            * @param pageSize
            * @returns {Promise<Array<O365OneDriveFolder>>} the list of O365 mailbox folders
            */
        getOneDriveFolders(oneDriveId: string, folderId: string | null, page?: number, pageSize?: number): Promise<Array<O365OneDriveFolder>>;
        /**
            * Gets O365 Restore Session OneDrive Folder Document items
            * Proxying directly to vbo: page and pageSize are used as offset and limit respectively
            * @param oneDriveId
            * @param folderId
            * @param page
            * @param pageSize
            * @returns {Promise<Array<O365OneDriveDocument>>} the list of O365 mailbox folder items
            */
        getOneDriveDocuments(oneDriveId: string, folderId: string | null, page?: number, pageSize?: number): Promise<Array<O365OneDriveDocument>>;
        /**
            * Restore an O365 OneDrive to a location given the
            * restore session UUID and one drive ID. This method will return
            * TaskResponse object immediately and submits the restoration task
            * in the background.
            * @param {string} oneDriveId
            * @param {O365OneDriveRestoreOptionsRequest} request
            * @returns {Promise<Task>}
            */
        restoreOneDrive(oneDriveId: string, request: O365OneDriveRestoreOptionsRequest): Promise<Task>;
        /**
            * Restore an O365 OneDrive Folder
            * @param oneDriveId
            * @param folderId
            * @param request
            */
        restoreOneDriveFolder(oneDriveId: string, folderId: string, request: O365OneDriveRestoreOptionsRequest): Promise<any>;
        /**
            * Restore an O365 OneDrive Document
            * @param oneDriveId
            * @param documentId
            * @param request
            */
        restoreOneDriveDocument(oneDriveId: string, documentId: string, request: O365OneDriveRestoreOptionsRequest): Promise<any>;
        /**
            * Get a OneDrive download as a ZIP
            * @param oneDriveId {string} the OneDrive id
            * @param downloadProgressCallback {function} optional progress callback if user wishes to receive progress events
            * for their download
            * @returns {Promise<Blob>} will return a promise with the Blob to download
            */
        getOneDriveDownload(oneDriveId: string, downloadProgressCallback?: (e: any) => void): Promise<Blob>;
        /**
            * Get a OneDrive Folder download as ZIP
            * @param oneDriveId {string} the OneDrive id
            * @param folderId {string} the OneDrive folder id
            * @param downloadProgressCallback {function} optional progress callback if user wishes to receive progress events
            * for their download
            * @returns {Promise<Blob>} will return a promise with the Blob to download
            */
        getOneDriveFolderDownload(oneDriveId: string, folderId: string, downloadProgressCallback?: (e: any) => void): Promise<Blob>;
        /**
            * Get a OneDrive Folder Item download as ZIP
            * @param oneDriveId {string} the OneDrive id
            * @param documentId {string} the OneDrive document id
            * @param downloadProgressCallback {function} optional progress callback if user wishes to receive progress events
            * for their download
            * @returns {Promise<Blob>} will return a promise with the Blob to download
            */
        getOneDriveItemDownload(oneDriveId: string, documentId: string, downloadProgressCallback?: (e: any) => void): Promise<Blob>;
        /**
            * Get O365 Restore Session SharePoint sites
            * Proxying directly to vbo: page and pageSize are used as offset and limit respectively
            * @param siteId - the parent folder or null for parent site
            * @param page
            * @param pageSize
            * @returns {Promise<Array<O365SharePointSite>>} the list of O365 sharepoint sites
            */
        getSharePointSites(siteId?: string | null, page?: number, pageSize?: number): Promise<Array<O365SharePointSite>>;
        /**
            * Restore O365 SharePoint Site given the restore session UUID
            * its Veeam native id. This method will return TaskResponse object immediately
            * and submits the restoration task in the background.
            * @param {string} siteId
            * @param {O365SharePointRestoreOptionsRequest} request
            * @returns {Promise<Task>}
            */
        restoreSharePointSite(siteId: string, request: O365SharePointRestoreOptionsRequest): Promise<Task>;
        /**
            * Get O365 Restore Session SharePoint folders
            * Proxying directly to vbo: page and pageSize are used as offset and limit respectively
            * @param siteId - the site to get folders from
            * @param parentId - the parent folder or null if the top site
            * @param page
            * @param pageSize
            * @returns {Promise<Array<O365SharePointFolder>>} the list of O365 sharepoint folders
            */
        getSharePointFolders(siteId: string, parentId: string | null, page?: number, pageSize?: number): Promise<Array<O365SharePointFolder>>;
        /**
            * Download an Office 365 VBO SharePoint Folder given the restore session UUID
            * The Response object will contain the file download as a zip
            * @param siteId - the site to get document from
            * @param folderId - the folder id to download
            * @param downloadProgressCallback {function} optional progress callback if user wishes to receive progress events for
            * their download
            * @returns {Promise<Blob>} a promise with the Blob to download
            */
        getSharePointFolderDownload(siteId: string, folderId: string, downloadProgressCallback?: (e: any) => void): Promise<Blob>;
        /**
            * Restore O365 SharePoint Folder
            * @param siteId
            * @param folderId
            * @param request
            */
        restoreSharePointFolder(siteId: string, folderId: string, request: O365SharePointRestoreOptionsRequest): Promise<any>;
        /**
            * Get O365 Restore Session SharePoint documents
            * Proxying directly to vbo: page and pageSize are used as offset and limit respectively
            * @param siteId - the site to get documents from
            * @param parentId - the parent folder or null for top folder
            * @param page
            * @param pageSize
            * @returns {Promise<Array<O365SharePointDocument>>} the list of O365 sharepoint documents
            */
        getSharePointDocuments(siteId: string, parentId: string | null, page?: number, pageSize?: number): Promise<Array<O365SharePointDocument>>;
        /**
            * Download an Office 365 VBO SharePoint Document given the restore session UUID
            * The Response object will contain the file download as an array buffer for developer to download as zip
            * @param siteId - the site to get document from
            * @param documentId - the document id to download
            * @param downloadProgressCallback {function} optional progress callback if user wishes to receive progress events for
            * their download
            * @returns {Promise<Blob>} will return a promise with the Blob to download
            */
        getSharePointDocumentDownload(siteId: string, documentId: string, downloadProgressCallback?: (e: any) => void): Promise<Blob>;
        /**
            * Restore O365 SharePoint Document
            * @param siteId
            * @param documentId
            * @param request
            */
        restoreSharePointDocument(siteId: string, documentId: string, request: O365SharePointRestoreOptionsRequest): Promise<any>;
        /**
            * Get O365 Restore Session SharePoint items
            * Proxying directly to vbo: page and pageSize are used as offset and limit respectively
            * @param siteId - the site to get items from
            * @param parentId - the parent folder or null for top folder
            * @param page
            * @param pageSize
            * @returns {Promise<Array<O365SharePointItem>>} the list of O365 sharepoint items
            */
        getSharePointItems(siteId: string, parentId: string | null, page?: number, pageSize?: number): Promise<Array<O365SharePointItem>>;
        /**
            * Restore O365 SharePoint Item
            * @param siteId
            * @param itemId
            * @param request
            */
        restoreSharePointItem(siteId: string, itemId: string, request: O365SharePointRestoreOptionsRequest): Promise<any>;
        /**
            * Get O365 Restore Session SharePoint attachments
            * Proxying directly to vbo: page and pageSize are used as offset and limit respectively
            * @param siteId - the site to get attachments from
            * @param itemId - the item parent of the attachments
            * @param page
            * @param pageSize
            * @returns {Promise<Array<O365SharePointAttachment>>} the list of O365 sharepoint attachments
            */
        getSharePointAttachments(siteId: string, itemId: string, page?: number, pageSize?: number): Promise<Array<O365SharePointAttachment>>;
        /**
            * Get O365 Restore Session SharePoint libraries
            * Proxying directly to vbo: page and pageSize are used as offset and limit respectively
            * @param siteId - the site to get items from
            * @param page
            * @param pageSize
            * @returns {Promise<Array<O365SharePointLibrary>>} the list of O365 sharepoint libraries
            */
        getSharePointLibraries(siteId: string, page?: number, pageSize?: number): Promise<Array<O365SharePointLibrary>>;
        /**
            * Download an Office 365 VBO SharePoint Library given the restore session UUID
            * The Response object will contain the file download as a zip
            * @param siteId - the site to get document from
            * @param libraryId - the library id to download
            * @param downloadProgressCallback {function} optional progress callback if user wishes to receive progress events for
            * their download
            * @returns {Promise<Blob>} a promise with the blob to download
            */
        getSharePointLibraryDownload(siteId: string, libraryId: string, downloadProgressCallback?: (e: any) => void): Promise<Blob>;
        /**
            * Restore O365 SharePoint Library
            * @param siteId
            * @param libraryId
            * @param request
            */
        restoreSharePointLibrary(siteId: string, libraryId: string, request: O365SharePointRestoreOptionsRequest): Promise<any>;
        /**
            * Get O365 Restore Session SharePoint lists
            * Proxying directly to vbo: page and pageSize are used as offset and limit respectively
            * @param siteId - the site to get items from
            * @param page
            * @param pageSize
            * @returns {Promise<Array<O365SharePointList>>} the list of O365 sharepoint lists
            */
        getSharePointLists(siteId: string, page?: number, pageSize?: number): Promise<Array<O365SharePointList>>;
        /**
            * Restore O365 SharePoint List
            * @param siteId
            * @param listId
            * @param request
            */
        restoreSharePointList(siteId: string, listId: string, request: O365SharePointRestoreOptionsRequest): Promise<any>;
        /**
            * Get O365 Restore Session Teams
            * Proxying directly to vbo: page and pageSize are used as offset and limit respectively
            * @param {string | null} displayName - the optional display name of the teams whose representation
            * you want to get from the server. Null value will bring all teams for this org.
            * @param {number} page
            * @param {number} pageSize
            * @returns {Promise<Array<O365Team>>} the list of O365 teams
            */
        getTeams(displayName?: string | null, page?: number, pageSize?: number): Promise<Array<O365Team>>;
        /**
            * Restore all O365 Teams
            * @param {O365TeamsRestoreOptionsRequest} request
            * @returns {Promise<Task>}
            */
        restoreAllTeams(request: O365TeamsRestoreOptionsRequest): Promise<Task>;
        /**
            * Restore a O365 Team
            * @param {string} teamId
            * @param {O365TeamsRestoreOptionsRequest} request
            * @returns {Promise<Task>}
            */
        restoreTeam(teamId: string, request: O365TeamsRestoreOptionsRequest): Promise<Task>;
        /**
            * Get O365 Team Channels
            * Proxying directly to vbo: page and pageSize are used as offset and limit respectively
            * @param {string} teamId
            * @param {string | null} displayName
            * @param {number} page
            * @param {number} pageSize
            * @returns {Promise<Array<O365TeamChannel>>} the list of O365 Team Channels
            */
        getTeamChannels(teamId: string, displayName?: string | null, page?: number, pageSize?: number): Promise<Array<O365TeamChannel>>;
        /**
            * Restore a O365 Team channel
            * @param {string} teamId
            * @param {string} channelId
            * @param {O365TeamsRestoreOptionsRequest} request
            * @returns {Promise<any>}
            */
        restoreTeamChannel(teamId: string, channelId: string, request: O365TeamsRestoreOptionsRequest): Promise<any>;
        /**
            * Get O365 Team Files
            * Proxying directly to vbo: page and pageSize are used as offset and limit respectively
            * @param {string} teamId
            * @param {string | null} channelId
            * @param {string | null} parentId can be id of a file (folder) in which more files can be retrieved from
            * @param {number} page
            * @param {number} pageSize
            * @returns {Promise<Array<O365TeamFile>>} the list of O365 Team files
            */
        getTeamFiles(teamId: string, channelId?: string | null, parentId?: string | null, page?: number, pageSize?: number): Promise<Array<O365TeamFile>>;
        /**
            * Restore all O365 Team Files
            * @param {string} teamId
            * @param {string} channelId
            * @param {O365TeamsRestoreOptionsRequest} request
            * @returns {Promise<any>}
            */
        restoreAllTeamFiles(teamId: string, channelId: string, request: O365TeamsRestoreOptionsRequest): Promise<any>;
        /**
            * Restore a O365 Team File
            * @param {string} teamId
            * @param {string} channelId
            * @param {O365TeamsRestoreOptionsRequest} request
            * @returns {Promise<any>}
            */
        restoreTeamFile(teamId: string, channelId: string, request: O365TeamsRestoreOptionsRequest): Promise<any>;
        /**
            * Send backed-up Microsoft Teams files as an email attachment given the restore session UUID and channel Ids.
            * @param {string} teamId
            * @param {string} channelId
            * @param {O365TeamsSendToEmailRequest} request
            * @returns {Promise<any>}
            */
        sendEmailAllTeamFiles(teamId: string, channelId: string, request: O365TeamsSendToEmailRequest): Promise<any>;
        /**
            * Send backed-up Microsoft Teams files as an email attachment given the restore session UUID and file Ids.
            * @param {string} teamId
            * @param {string} channelId
            * @param {O365TeamsSendToEmailRequest} request
            * @returns {Promise<any>}
            */
        sendEmailTeamFile(teamId: string, channelId: string, request: O365TeamsSendToEmailRequest): Promise<any>;
        /**
            * Download all O365 Team Files as a zip
            * @param {string} teamId
            * @param {string} channelId
            * @param {function} downloadProgressCallback optional progress callback if user wishes to receive progress events
            * @returns {Promise<Blob>} will return a promise with the Blob to download
            */
        saveAllTeamFiles(teamId: string, channelId: string, downloadProgressCallback?: (e: any) => void): Promise<Blob>;
        /**
            * Download one or more O365 Team file(s) as a zip
            * @param {string} teamId
            * @param {string} channelId
            * @param {O365TeamItemsExportRequest} request
            * @param {function} downloadProgressCallback optional progress callback if user wishes to receive progress events
            * @returns {Promise<Blob>} will return a promise with the Blob to download
            */
        saveTeamFiles(teamId: string, channelId: string, request: O365TeamItemsExportRequest, downloadProgressCallback?: (e: any) => void): Promise<Blob>;
        /**
            * Get O365 Team Posts
            * Proxying directly to vbo: page and pageSize are used as offset and limit respectively
            * @param {string} teamId
            * @param {string | null} channelId
            * @param {string | null} parentId can be id of a post in which more posts can be retrieved from
            * @param {number} page
            * @param {number} pageSize
            * @returns {Promise<Array<O365TeamPost>>} the list of O365 Team posts
            */
        getTeamPosts(teamId: string, channelId?: string | null, parentId?: string | null, page?: number, pageSize?: number): Promise<Array<O365TeamPost>>;
        /**
            * Restore all O365 Team Posts
            * @param {string} teamId
            * @param {string} channelId
            * @param {O365TeamsRestoreOptionsRequest} request
            * @returns {Promise<any>}
            */
        restoreAllTeamPosts(teamId: string, channelId: string, request: O365TeamsRestoreOptionsRequest): Promise<any>;
        /**
            * Restore a O365 Team Post
            * @param {string} teamId
            * @param {string} channelId
            * @param {O365TeamsRestoreOptionsRequest} request
            * @returns {Promise<any>}
            */
        restoreTeamPost(teamId: string, channelId: string, request: O365TeamsRestoreOptionsRequest): Promise<any>;
        /**
            * Send all the backed-up Microsoft Teams posts as an email attachment given the restore session UUID and channel Id.
            * @param {string} teamId
            * @param {string} channelId
            * @param {O365TeamsSendToEmailRequest} request
            * @returns {Promise<any>}
            */
        sendEmailAllTeamPosts(teamId: string, channelId: string, request: O365TeamsSendToEmailRequest): Promise<any>;
        /**
            * Send backed-up Microsoft Teams posts as an email attachment given the restore session UUID and post Ids.
            * @param {string} teamId
            * @param {string} channelId
            * @param {O365TeamsSendToEmailRequest} request
            * @returns {Promise<any>}
            */
        sendEmailTeamPost(teamId: string, channelId: string, request: O365TeamsSendToEmailRequest): Promise<any>;
        /**
            * Export all O365 Team Posts as HTML file
            * @param {string} teamId
            * @param {string} channelId
            * @param {O365TeamsRangeExportRequest} request
            * @param {function} downloadProgressCallback optional progress callback if user wishes to receive progress events
            * @returns {Promise<Blob>} will return a promise with the Blob to download
            */
        exportAllTeamPosts(teamId: string, channelId: string, request: O365TeamsRangeExportRequest, downloadProgressCallback?: (e: any) => void): Promise<Blob>;
        /**
            * Export one or more O365 Team Post(s) as HTML file
            * @param {string} teamId
            * @param {string} channelId
            * @param {O365TeamItemsExportRequest} request
            * @param {function} downloadProgressCallback optional progress callback if user wishes to receive progress events
            * @returns {Promise<Blob>} will return a promise with the Blob to download
            */
        exportTeamPosts(teamId: string, channelId: string, request: O365TeamItemsExportRequest, downloadProgressCallback?: (e: any) => void): Promise<Blob>;
        /**
            * Download all O365 Team Posts as .msg file
            * @param {string} teamId
            * @param {string} channelId
            * @param {function} downloadProgressCallback optional progress callback if user wishes to receive progress events
            * @returns {Promise<Blob>} will return a promise with the Blob to download
            */
        saveAllTeamPosts(teamId: string, channelId: string, downloadProgressCallback?: (e: any) => void): Promise<Blob>;
        /**
            * Download one or more O365 Team Post(s) as .msg file
            * @param {string} teamId
            * @param {string} channelId
            * @param {O365TeamItemsExportRequest} request
            * @param {function} downloadProgressCallback optional progress callback if user wishes to receive progress events
            * @returns {Promise<Blob>} will return a promise with the Blob to download
            */
        saveTeamPosts(teamId: string, channelId: string, request: O365TeamItemsExportRequest, downloadProgressCallback?: (e: any) => void): Promise<Blob>;
        /**
            * Get O365 Team Channel Tabs
            * Proxying directly to vbo: page and pageSize are used as offset and limit respectively
            * @param {string} teamId
            * @param {string} channelId
            * @param {number} page
            * @param {number} pageSize
            * @returns {Promise<Array<O365TeamTab>>} the list of O365 Team channel tabs
            */
        getTeamChannelTabs(teamId: string, channelId: string, page?: number, pageSize?: number): Promise<Array<O365TeamTab>>;
        /**
            * Restore a O365 Team Tab
            * @param {string} teamId
            * @param {string} channelId
            * @param {O365TeamsRestoreOptionsRequest} request
            * @returns {Promise<any>}
            */
        restoreTeamTab(teamId: string, channelId: string, request: O365TeamsRestoreOptionsRequest): Promise<any>;
        /**
            * Get the O365 Device code
            * @returns {Promise<O365DeviceCode>}
            */
        getO365DeviceCode(): Promise<O365DeviceCode>;
}

/**
    * O365 SharePoint Attachment
    */
export class O365SharePointAttachment {
        constructor(_json: O365SharePointAttachmentJson);
        /**
            * Gets the id of the SharePoint Attachment
            */
        get id(): string;
        /**
            * Gets the name of the SharePoint Attachment
            */
        get name(): string;
        /**
            * Gets the size in bytes of the SharePoint Attachment
            */
        get sizeInBytes(): number;
        /**
            * Gets the url of the SharePoint Attachment
            */
        get url(): string;
        /**
            * Get the json representation of this class.
            * @returns {O365SharePointAttachmentJson}
            */
        get json(): O365SharePointAttachmentJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 SharePoint Document
    */
export class O365SharePointDocument {
        constructor(_json: O365SharePointDocumentJson);
        /**
            * Gets the id of the SharePoint Document
            */
        get id(): string;
        /**
            * Gets the name of the SharePoint Document
            */
        get name(): string;
        /**
            * Gets the created by of the SharePoint Document
            */
        get createdBy(): string;
        /**
            * Gets the size in bytes of the SharePoint Document
            */
        get sizeInBytes(): number;
        /**
            * Gets the version of the SharePoint Document
            */
        get version(): string;
        /**
            * Gets the creation time of the SharePoint Document
            */
        get creationTime(): number;
        /**
            * Gets the modified by of the SharePoint Document
            */
        get modifiedBy(): string;
        /**
            * Gets the modification time of the SharePoint Document
            */
        get modificationTime(): number;
        /**
            * Get the json representation of this class.
            * @returns {O365SharePointDocumentJson}
            */
        get json(): O365SharePointDocumentJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 SharePoint Folder
    */
export class O365SharePointFolder {
        constructor(_json: O365SharePointFolderJson);
        /**
            * Gets the id of the SharePoint Folder
            */
        get id(): string;
        /**
            * Gets the name of the SharePoint Folder
            */
        get name(): string;
        /**
            * Gets the created by of the SharePoint Folder
            */
        get createdBy(): string;
        /**
            * Gets the creation time of the SharePoint Folder
            */
        get creationTime(): number;
        /**
            * Gets the modified by of the SharePoint Folder
            */
        get modifiedBy(): string;
        /**
            * Gets the modification time of the SharePoint Folder
            */
        get modificationTime(): number;
        /**
            * Gets the type of SharePoint Folder
            */
        get type(): O365SharePointFolderType;
        /**
            * Get the json representation of this class.
            * @returns {O365SharePointFolderJson}
            */
        get json(): O365SharePointFolderJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 SharePoint Item
    */
export class O365SharePointItem {
        constructor(_json: O365SharePointItemJson);
        /**
            * Gets the id of the SharePoint Item
            */
        get id(): string;
        /**
            * Gets the title of the SharePoint Item
            */
        get title(): string;
        /**
            * Gets the version of the SharePoint Item
            */
        get version(): string;
        /**
            * Gets the name of the SharePoint Item
            */
        get name(): string;
        /**
            * Gets the created by of the SharePoint Item
            */
        get createdBy(): string;
        /**
            * Gets the creation time of the SharePoint Item
            */
        get creationTime(): number;
        /**
            * Gets the modified by of the SharePoint Item
            */
        get modifiedBy(): string;
        /**
            * Gets the modification time of the SharePoint Item
            */
        get modificationTime(): number;
        /**
            * Get the json representation of this class.
            * @returns {O365SharePointItemJson}
            */
        get json(): O365SharePointItemJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 SharePoint Library
    */
export class O365SharePointLibrary {
        constructor(_json: O365SharePointLibraryJson);
        /**
            * Gets the id of the SharePoint Library
            */
        get id(): string;
        /**
            * Gets the name of the SharePoint Library
            */
        get name(): string;
        /**
            * Gets the description of the SharePoint Library
            */
        get description(): string;
        /**
            * Gets the url of the SharePoint Library
            */
        get url(): string;
        /**
            * Gets the creation time of the SharePoint Library
            */
        get creationTime(): number;
        /**
            * Get the json representation of this class.
            * @returns {O365SharePointLibraryJson}
            */
        get json(): O365SharePointLibraryJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 SharePoint List
    */
export class O365SharePointList {
        constructor(_json: O365SharePointListJson);
        /**
            * Gets the id of the SharePoint List
            */
        get id(): string;
        /**
            * Gets the name of the SharePoint List
            */
        get name(): string;
        /**
            * Gets the description of the SharePoint List
            */
        get description(): string;
        /**
            * Gets the url of the SharePoint List
            */
        get url(): string;
        /**
            * Gets the creation time of the SharePoint List
            */
        get creationTime(): number;
        /**
            * Get the json representation of this class.
            * @returns {O365SharePointListJson}
            */
        get json(): O365SharePointListJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 SharePoint Restore Options Request
    */
export class O365SharePointRestoreOptionsRequest {
        constructor(_json: O365SharePointRestoreOptionsRequestJson);
        /**
            * Get user name you want to use for authenticating with the Microsoft organization
            * @returns {string | null}
            */
        get user(): string | null;
        /**
            * Get the user password you want to use for authenticating with the Microsoft organization
            * @returns {string | null}
            */
        get password(): string | null;
        /**
            * Get the device code you want to use for authenticating with the Microsoft organization
            * @returns {string | null}
            */
        get deviceCode(): string | null;
        /**
            * Indicates that the SharePoint lists will be restored with all list views
            * @returns {boolean}
            */
        get restoreListViews(): boolean;
        /**
            * Indicates that the SharePoint site will be restored with all changed items
            *
            * One or both of changedItems and deletedItems must be set to true
            * @returns {boolean}
            */
        get changedItems(): boolean;
        /**
            * Indicates that the SharePoint site will be restored with all deleted items
            *
            * One or both of changedItems and deletedItems must be set to true
            * @returns {boolean}
            */
        get deletedItems(): boolean;
        /**
            * Indicates that the SharePoint site will be restored with all subsites
            * @returns {boolean}
            */
        get restoreSubsites(): boolean;
        /**
            * Indicates that the SharePoint site will be restored with all master pages
            * @returns {boolean}
            */
        get restoreMasterPages(): boolean;
        /**
            * Indicates that the SharePoint site will be restored with all permissions
            * @returns {boolean}
            */
        get restorePermissions(): boolean;
        /**
            * Indicates what versions of the SharePoint documents will be restored
            * @returns {O365SharePointDocumentVersion}
            */
        get documentVersion(): O365SharePointDocumentVersion;
        /**
            * Indicates that shared links notifications will be sent.
            * @returns {boolean}
            */
        get sendSharedLinksNotification(): boolean;
        /**
            * Indicates which action will be performed with the last version of the restored SharePoint document
            * on the destination list
            * @returns {O365SharePointDocumentLastVersionAction}
            */
        get documentLastCrazyVersionAction(): O365SharePointDocumentLastVersionAction;
        /**
            * Optional - specifies the target SharePoint list by name.
            * Default location if not provided
            * @returns {string | null}
            */
        get list(): string | null;
        /**
            * Optional - specifies alias site if restoring a Site to a different location
            * @returns {string | null}
            */
        get alias(): string | null;
        /**
            * Get the json representation of this class.
            * @returns {O365SharePointRestoreOptionsRequestJson}
            */
        get json(): O365SharePointRestoreOptionsRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 SharePoint Site
    */
export class O365SharePointSite {
        constructor(_json: O365SharePointSiteJson);
        /**
            * Gets the id of the SharePoint Site
            */
        get id(): string;
        /**
            * Gets the url of the SharePoint Site
            */
        get url(): string;
        /**
            * Gets the name of the SharePoint Site
            */
        get name(): string;
        /**
            * Gets the cloud boolean of the SharePoint Site
            */
        get isCloud(): boolean;
        /**
            * Gets the title of the SharePoint Site
            */
        get title(): string;
        /**
            * Gets backed up boolean of the SharePoint Site
            */
        get isBackedUp(): boolean;
        /**
            * Get the available boolean of the SharePoint Site
            */
        get isAvailable(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {O365SharePointSiteJson}
            */
        get json(): O365SharePointSiteJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 Team Channel
    */
export class O365TeamChannel {
        constructor(_json: O365TeamChannelJson);
        /**
            * Get the native id of the Team channel
            * @returns {string}
            */
        get nativeId(): string;
        /**
            * Get the display name of the Team channel
            * @returns {string}
            */
        get displayName(): string;
        /**
            * Get the json representation of this class.
            * @returns {O365TeamChannelJson}
            */
        get json(): O365TeamChannelJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 Team File
    */
export class O365TeamFile {
        constructor(_json: O365TeamFileJson);
        /**
            * Get the native id of the Team file
            * @returns {string}
            */
        get nativeId(): string;
        /**
            * Get the name of the Team file
            * @returns {string}
            */
        get name(): string;
        /**
            * Get the name of the user who performed the latest modification of the file
            * @returns {string}
            */
        get modifiedBy(): string;
        /**
            * Get the Date and time of the last modification of the file
            * @returns {number}
            */
        get modified(): number;
        /**
            * Get the parent folder ID of the sub file/folder.
            * @returns {string}
            */
        get parentId(): string;
        /**
            * Get the file size.
            * @returns {number}
            */
        get sizeBytes(): number;
        /**
            * Get the type of the Microsoft Teams item.
            * @returns {string}
            */
        get type(): string;
        /**
            * Get the version of the file in the backup.
            * @returns {string}
            */
        get version(): string;
        /**
            * Get the json representation of this class.
            * @returns {O365TeamFileJson}
            */
        get json(): O365TeamFileJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 Team items export request
    */
export class O365TeamItemsExportRequest {
        constructor(_json: O365TeamItemsExportRequestJson);
        /**
            * Get the ids of O365 Team items.
            * @returns {Array<string>}
            */
        get itemIds(): Array<string>;
        /**
            * Get the json representation of this class.
            * @returns {O365TeamItemsExportRequestJson}
            */
        get json(): O365TeamItemsExportRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 Team Post
    */
export class O365TeamPost {
        constructor(_json: O365TeamPostJson);
        /**
            * Get the user name of the author of the post
            * @returns {string}
            */
        get author(): string;
        /**
            * Get date and time when the post was created
            * @returns {number}
            */
        get createdTime(): number;
        /**
            * Get whether the post is marked as important
            * @returns {boolean}
            */
        get isImportant(): boolean;
        /**
            * Get the date and time of the latest modification of the post
            * @returns {number}
            */
        get lastModificationTime(): number;
        /**
            * Get the native VBO id for this post
            * @returns {string}
            */
        get nativeId(): string;
        /**
            * Get the Subject of the post
            * @returns {string}
            */
        get subject(): string;
        /**
            * Get the json representation of this class.
            * @returns {O365TeamPostJson}
            */
        get json(): O365TeamPostJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 Team Tab
    */
export class O365TeamTab {
        constructor(_json: O365TeamTabJson);
        /**
            * Get the Team Tab display name
            * @returns {string}
            */
        get contentUrl(): string;
        /**
            * Get the Team Tab display name
            * @returns {string}
            */
        get displayName(): string;
        /**
            * Get the native VBO id for this Team Tab
            * @returns {string}
            */
        get nativeId(): string;
        /**
            * Get the Team Tab type
            * @returns {string}
            */
        get type(): string;
        /**
            * Get the json representation of this class.
            * @returns {O365TeamTabJson}
            */
        get json(): O365TeamTabJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 Team
    */
export class O365Team {
        constructor(_json: O365TeamJson);
        /**
            * Get the O365 Team description
            * @returns {string}
            */
        get description(): string;
        /**
            * Get the O365 Team display name
            * @returns {string}
            */
        get displayName(): string;
        /**
            * Get whether the Office 365 Team is backed up
            * @returns {boolean}
            */
        get isBackedUp(): boolean;
        /**
            * Get the O365 Team mail
            * @returns {string}
            */
        get mail(): string;
        /**
            * Get the native id of O365 Team
            * @returns {string}
            */
        get nativeId(): string;
        /**
            * Get the O365 VBO Organization iland platform UUID
            * @returns {string}
            */
        get organizationUuid(): string;
        /**
            * Get the json representation of this class.
            * @returns {O365TeamJson}
            */
        get json(): O365TeamJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 Teams export items (posts) given range request
    */
export class O365TeamsRangeExportRequest {
        constructor(_json: O365TeamsRangeExportRequestJson);
        /**
            * Get the start date to export channel posts from.
            * @returns {number}
            */
        get from(): number;
        /**
            * Get the end date to export channel posts until.
            * @returns {number}
            */
        get to(): number;
        /**
            * Get the json representation of this class.
            * @returns {O365TeamsRangeExportRequestJson}
            */
        get json(): O365TeamsRangeExportRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 Teams restore options request
    */
export class O365TeamsRestoreOptionsRequest {
        constructor(_json: O365TeamsRestoreOptionsRequestJson);
        /**
            * Get the user you want to use for authenticating with the O365 Teams organization.
            * Required only for basic authentication.
            * @returns {string | undefined}
            */
        get user(): string | undefined;
        /**
            * Get the password you want to use for authenticating with the O365 Teams organization.
            * Required only for basic authentication
            * @returns {string | undefined}
            */
        get password(): string | undefined;
        /**
            * Get the MS Azure one time device code obtained for the O365 session.
            * Required only for modern app based authentication.
            * @returns {string | undefined}
            */
        get deviceCode(): string | undefined;
        /**
            * Get whether to restore settings of the restored O365 Team
            * @returns {boolean | undefined}
            */
        get restoreSettings(): boolean | undefined;
        /**
            * Get whether to restore Team items that are missing in the original location
            * @returns {boolean | undefined}
            */
        get restoreMissingItems(): boolean | undefined;
        /**
            * Get whether to restore members of the restored O365 Team along with their roles
            * @returns {boolean | undefined}
            */
        get restoreMembers(): boolean | undefined;
        /**
            * Get whether to restore team items that have changed since the time when the backup was created
            * @returns {boolean | undefined}
            */
        get restoreChangedItems(): boolean | undefined;
        /**
            * Get version of file to restore
            * @returns {O365TeamsFileVersion | undefined}
            */
        get fileVersion(): O365TeamsFileVersion | undefined;
        /**
            * Get the action to perform with the latest file restored
            * @returns {O365TeamsFileLastVersionAction | undefined}
            */
        get fileLastVersionAction(): O365TeamsFileLastVersionAction | undefined;
        /**
            * Get the ids of O365 Team items
            * @returns {Array<string> | undefined}
            */
        get itemIds(): Array<string> | undefined;
        /**
            * Get the start date to export channel posts from
            * @returns {number | undefined}
            */
        get from(): number | undefined;
        /**
            * Get the end date to export channel posts until
            * @returns {number | undefined}
            */
        get to(): number | undefined;
        /**
            * Get the json representation of this class.
            * @returns {O365TeamsRestoreOptionsRequestJson}
            */
        get json(): O365TeamsRestoreOptionsRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 Teams send to email Request
    */
export class O365TeamsSendToEmailRequest {
        constructor(_json: O365TeamsSendToEmailRequestJson);
        /**
            * Get the email address from which the attachments will be sentDefault value is nobody@iland.com.
            * @returns {string}
            */
        get from(): string;
        /**
            * Get the email address to which the attachments will be sent.
            * @returns {string}
            */
        get to(): string;
        /**
            * Get the subject of the email message used for sending the attachments.
            * @returns {string}
            */
        get subject(): string;
        /**
            * Get the body of the email message used for sending the attachments.
            * @returns {string}
            */
        get text(): string;
        /**
            * Get the set of IDs of Teams item types that are included in the request.
            * @returns {Array<string> | undefined}
            */
        get itemIds(): Array<string> | undefined;
        /**
            * Get the json representation of this class.
            * @returns {O365TeamsSendToEmailRequestJson}
            */
        get json(): O365TeamsSendToEmailRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * O365 User
    */
export class O365User {
        constructor(_json: O365UserJson);
        /**
            * Get the O365 User display name
            * @returns {string}
            */
        get displayName(): string;
        /**
            * Get the O365 user organization's name
            * @returns {string}
            */
        get organizationName(): string;
        /**
            * Get the O365 VBO Organization iland platform UUID
            * @returns {string}
            */
        get organizationUuid(): string;
        /**
            * Get the O365 user type
            * @returns {string}
            */
        get type(): string;
        /**
            * Get whether the Office 365 user is backed up
            * @returns {boolean}
            */
        get isBackedUp(): boolean;
        /**
            * Get whether the O365 user is archived
            * @returns {boolean} true for inactive, false for active
            */
        get archived(): boolean;
        /**
            * Get whether this O365 user is a licensed user in the Microsoft 365 organization
            * it belongs. False for unlicensed.
            * @returns {boolean}
            */
        get licensed(): boolean;
        /**
            * Get whether the Office 365 user has been deleted from the Office 365 organization
            * @deprecated Replaced by O365User.archived
            * @returns {boolean}
            */
        get isDeletedFromOrg(): boolean;
        /**
            * Get the native id of O365 user
            * @returns {string}
            */
        get nativeId(): string;
        /**
            * Get O365 user's name
            * @returns {string}
            */
        get name(): string;
        /**
            * Get the json representation of this class.
            * @returns {O365UserJson}
            */
        get json(): O365UserJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
  * Object Storage ceph/s3 account tenant JSON
  */
export interface CephTenantJson {
    tenant_id: string;
    company_id: string;
    region: string;
    enabled: boolean;
    quota_kib: number;
    usage_kib: number;
    name: string;
    num_objects: number;
    num_buckets: number;
    has_stats_and_bucket_info: boolean;
}

/**
  * Object Storage ceph tenant key create request JSON
  */
export interface CephTenantKeyCreateRequestJson {
    access_key?: string;
    secret_key?: string;
    username?: string;
    description?: string;
}

/**
  * Object Storage ceph tenant key delete request JSON
  */
export interface CephTenantKeyDeleteRequestJson {
    access_key: string;
}

/**
  * Object Storage ceph tenant key pair JSON
  */
export interface CephTenantKeyPairJson {
    access_key: string;
    secret_key?: string;
    username?: string;
    created_date?: number;
    description?: string;
}

/**
  * Object Storage ceph user session JSON
  */
export interface CephUserSessionJson {
    tenant_id: string;
    access_key: string;
    secret_key: string;
    session_token: string;
    expiration_time: number;
}

/**
  * Object Storage s3 bucket info JSON
  */
export interface S3BucketJson {
    name: string;
    usage_kib: number;
    num_objects: number;
    creation_time: number;
}

export class CephTenantKeyCreateRequest {
        constructor(_json: CephTenantKeyCreateRequestJson);
        get accessKey(): string | undefined;
        get secretKey(): string | undefined;
        get username(): string | undefined;
        get description(): string | undefined;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {CephTenantKeyCreateRequestJson} the API VM object
            */
        get json(): CephTenantKeyCreateRequestJson;
}

export class CephTenantKeyDeleteRequest {
        constructor(_json: CephTenantKeyDeleteRequestJson);
        get accessKey(): string;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {CephTenantKeyDeleteRequestJson} the API VM object
            */
        get json(): CephTenantKeyDeleteRequestJson;
}

export class CephTenantKeyPair {
        constructor(_json: CephTenantKeyPairJson);
        get accessKey(): string;
        get secretKey(): string | undefined;
        get username(): string | undefined;
        /**
            * Created date timestamp comes back in seconds from API so we convert it to milliseconds to properly
            * get js Date
            */
        get createdDate(): Date | undefined;
        get description(): string | undefined;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {CephTenantKeyPairJson} the API VM object
            */
        get json(): CephTenantKeyPairJson;
}

/**
    * Object Storage Ceph Tenant resource
    */
export class CephTenant {
        constructor(_json: CephTenantJson);
        static getCephTenant(tenantId: string): Promise<CephTenant>;
        static getCompanyCephTenants(companyId: string, region: string): Promise<Array<CephTenant>>;
        get tenantId(): string;
        get name(): string;
        get companyId(): string;
        get region(): string;
        get isEnabled(): boolean;
        get quotaKib(): number;
        get usageKib(): number;
        get numOfObjects(): number;
        get numOfBuckets(): number;
        get hasStatsAndBucketInfo(): boolean;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {CephTenantJson} the API VM object
            */
        get json(): CephTenantJson;
        getBucketInfo(): Promise<Array<S3Bucket>>;
        getTenantKeysForUser(username: string): Promise<Array<CephTenantKeyPair>>;
        deleteTenantKey(request: CephTenantKeyDeleteRequest): Promise<any>;
        createTenantKey(request: CephTenantKeyCreateRequest): Promise<CephTenantKeyPair>;
        createObjectStorageUserSession(): Promise<CephUserSession>;
        syncTenant(): Promise<unknown>;
        renewUserSession(sessionToken: string): Promise<CephUserSession>;
}

export class CephUserSession {
        constructor(_json: CephUserSessionJson);
        get tenantId(): string;
        get accessKey(): string;
        get secretKey(): string;
        get sessionToken(): string;
        get expirationTime(): number;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {CephUserSessionJson} the API VM object
            */
        get json(): CephUserSessionJson;
}

export class S3Bucket {
        constructor(_json: S3BucketJson);
        get name(): string;
        get usageKib(): number;
        get numOfObjects(): number;
        get creationTime(): Date;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {S3BucketJson} the API VM object
            */
        get json(): S3BucketJson;
}

export interface BandwidthUsageSummaryJson {
    reserved_amount?: number;
    total_usage: number;
    burst_usage: number;
    month: number;
    year: number;
    billing_model_type: BillingModelType;
}

export interface BatchFailoverParamsRequestJson {
    batch_params: {
        [key: string]: FailoverParamsRequestJson;
    };
}

export interface BatchFailoverTestParamsRequestJson {
    batch_params: {
        [key: string]: FailoverTestParamsRequestJson;
    };
}

export type BillField = 'CPU' | 'CPU_USAGE' | 'CPU_BURST_USAGE' | 'CPU_BURST' | 'CPU_RES_USAGE' | 'MEMORY' | 'MEMORY_USAGE' | 'MEMORY_BURST' | 'MEMORY_BURST_USAGE' | 'MEMORY_RES_USAGE' | 'DISK' | 'DISK_USAGE' | 'DISK_BURST' | 'DISK_BURST_USAGE' | 'BANDWIDTH' | 'BANDWIDTH_USAGE' | 'BANDWIDTH_BURST' | 'BANDWIDTH_RES_USAGE' | 'BANDWIDTH_BURST_USAGE';
export interface BillingSampleJson {
    time: number;
    value: number;
    additional_fields: {
        [key in BillField]: number;
    };
}

export interface BillingSampleSerieJson {
    entity_uuid: string;
    entity_name: string;
    interval: number;
    summary: string;
    samples: Array<BillingSampleJson>;
    currency_code: string;
}

/**
  * Catalog Create Request JSON interface.
  */
export interface CatalogCreateRequestJson {
    name: string;
    description: string;
    storage_profile_uuid: string;
}

/**
  * API Check DNS Zone JSON representation.
  */
export interface CheckDnsZoneJson {
    valid: boolean;
    message: string;
}

/**
  * API DNS Record Create Request JSON format.
  */
export interface DnsRecordCreateRequestJson {
    zone_id: number;
    host: string;
    type: DnsRecordType;
    value: string;
    ip: string;
    ttl: number;
    description: string;
    priority: number;
}

/**
  * API DNS Record JSON representation.
  */
export interface DnsRecordJson {
    id: number;
    zone_id: number;
    zone_name: string;
    host: string;
    description?: string;
    ttl?: number;
    ordering: string;
    ip?: string;
    last_modified?: number;
    value: string;
    type: DnsRecordType;
    priority?: number;
}

/**
  * Enumeration of possible DNS record types.
  */
export type DnsRecordType = 'A' | 'AAAA' | 'CNAME' | 'COMMENT' | 'DIRECTIVE' | 'DNAME' | 'DNSKEY' | 'DS' | 'INCLUDE' | 'IPSECKEY' | 'KEY' | 'MX' | 'NS' | 'PTR' | 'SOA' | 'SRV' | 'TXT';

/**
  * API DNS Record Update Request JSON format.
  */
export interface DnsRecordUpdateRequestJson {
    id: number;
    zone_id: number;
    host: string;
    type: DnsRecordType;
    value: string;
    ip_address: string;
    ttl: number;
    description: string;
    priority: number;
}

/**
  * API DNS Zone Create Request JSON format.
  */
export interface DnsZoneCreateRequestJson {
    name: string;
}

/**
  * API DNS Zone JSON representation.
  */
export interface DnsZoneJson {
    id: number;
    name: string;
    resource_id: number;
    serial: number;
    refresh: number;
    retry: number;
    expire: number;
    minimum: number;
    soa: string;
    tags: string;
    ttl: string;
    enable_dns_sec: boolean;
    auto_check: boolean;
    record_id: number;
    record_host: string;
    record_type: DNSRecordType;
    record_value: string;
    record_description: string;
    record_ttl: string;
    record_ordering: number;
    record_errors: string;
    user_can_create: boolean;
    user_can_delete: boolean;
    user_can_update: boolean;
    unpaged_rows: number;
}

/**
  * Enumeration of possible DNS record types.
  */
export type DNSRecordType = 'A' | 'AAAA' | 'CNAME' | 'COMMENT' | 'DIRECTIVE' | 'DNAME' | 'DNSKEY' | 'DS' | 'INCLUDE' | 'IPSECKEY' | 'KEY' | 'MX' | 'NS' | 'PTR' | 'SOA' | 'SRV' | 'TXT';

/**
  * External Network JSON
  */
export interface ExternalNetworkJson {
    graph_id1: string;
    graph_id2: string;
    ip_scope: NetworkIpScopeJson;
    ip_scopes: Array<NetworkIpScopeJson>;
    uuid: string;
    name: string;
    deleted: boolean;
    deleted_date: number;
    updated_date: number;
}

export interface FailoverParamsRequestJson {
    checkpoint_identifier: string;
    commit_policy: CommitPolicy;
    shutdown_policy: ShutdownPolicy;
    time_to_wait_before_shutdown_in_sec: number;
    commit_value: number;
}

export interface FailoverTestParamsRequestJson {
    checkpoint_id: string;
}

/**
  * API IP address set representation.
  */
export interface IpAddressSetJson {
    ips: Array<string>;
}

/**
  * IsComplianceOrg JSON interface.
  */
export interface IsComplianceOrgJson {
    is_compliance_org: boolean;
}

/**
  * Nessus History API JSON interface.
  */
export interface NessusHistoryJson {
    history_id: number;
    uuid: string;
    owner_id: number;
    status: string;
    creation_date: number;
    last_modification_date: number;
}

/**
  * Nessus Host API JSON interface.
  */
export interface NessusHostJson {
    host_id: number;
    host_index: string;
    host_name: number;
    progress: string;
    critical: number;
    high: number;
    medium: number;
    low: number;
    info: number;
    total_checks_considered: number;
    num_checks_considered: number;
    scan_progress_total: number;
    scan_progress_current: number;
    score: number;
}

/**
  * Nessus launch result API JSON interface.
  */
export interface NessusLaunchJson {
    scan_uuid: string;
    error: string;
}

/**
  * Nessus Note API JSON interface.
  */
export interface NessusNoteJson {
    title: string;
    message: string;
    severity: number;
}

/**
  * Nessus Remediation API JSON interface.
  */
export interface NessusRemediationJson {
    value: string;
    remediation: string;
    hosts: number;
    vulns: number;
}

/**
  * Nessus Remediations JSON API interface.
  */
export interface NessusRemediationsJson {
    remediations: Array<NessusRemediationJson>;
    num_hosts: number;
    num_cves: number;
    num_impacted_hosts: number;
    num_remediated_cves: number;
}

/**
  * Nessus Scan Details API JSON interface.
  */
export interface NessusScanDetailsJson {
    info: NessusScanInfoJson;
    remediations: NessusRemediationsJson;
    vulnerabilities: Array<NessusVulnerabilityJson>;
    hosts: Array<NessusHostJson>;
    comp_hosts: Array<NessusHostJson>;
    history: Array<NessusHistoryJson>;
    notes: Array<NessusNoteJson>;
    compliance: Array<NessusVulnerabilityJson>;
    vulns_by_host: {
        [key: number]: Array<NessusVulnerabilityJson>;
    };
}

/**
  * Nessus Scan Info API JSON interface.
  */
export interface NessusScanInfoJson {
    uuid: string;
    edit_allowed: boolean;
    status: string;
    policy: string;
    pci_can_upload: boolean;
    has_audit_trail: boolean;
    scan_start: number;
    folder_id: number;
    targets: string;
    timestamp: number;
    object_id: number;
    scanner_name: string;
    haskb: boolean;
    host_count: number;
    scan_end: number;
    name: string;
    user_permissions: number;
    control: boolean;
}

/**
  * Nessus Scan API JSON interface.
  */
export interface NessusScanJson {
    id: number;
    uuid: string;
    name: string;
    owner: string;
    enabled: boolean;
    folder_id: number;
    read: boolean;
    status: string;
    shared: boolean;
    user_permissions: number;
    creation_date: number;
    last_modification_date: number;
    control: boolean;
    start_time: string;
    timezone: string;
    rrules: string;
    use_dashboard: boolean;
}

/**
  * Nessus Scan Opt Out Create Request API JSON.
  */
export interface NessusScanOptOutCreateRequestJson {
    opt_out: boolean;
    exclusions: Array<string>;
}

/**
  * Nessus Scan Opt Out JSON interface.
  */
export interface NessusScanOptOutJson {
    org_uuid: string;
    opt_out: boolean;
    exclusions: Array<string>;
}

/**
  * Nessus Scan Settings Update Request JSON.
  */
export interface NessusScanSettingsUpdateRequestJson {
    name: string;
    description: string;
    emails: string;
    enabled: boolean;
    launch: string;
    folder_id: string;
    policy_id: string;
    scanner_id: string;
    start_time: string;
    text_targets: string;
    file_targets: string;
    r_rules: string;
    use_dashboard: boolean;
    acls: Array<string>;
    timezone: string;
}

/**
  * Nessus Scan Update API JSON.
  */
export interface NessusScanUpdateJson {
    creation_date: number;
    custom_targets: string;
    default_permissions: string;
    description: string;
    emails: string;
    id: number;
    last_modification_date: number;
    name: string;
    notification_filter_type: string;
    notification_filters: string;
    owner: string;
    owner_id: number;
    policy_id: number;
    rrules: string;
    scanner_id: number;
    shared: number;
    start_time: string;
    tag_id: number;
    timezone: string;
    type: string;
    user_permissions: number;
    uuid: string;
    use_dashboard: boolean;
}

/**
  * Nessus Scan Update API Request JSON.
  */
export interface NessusScanUpdateRequestJson {
    template_uuid: string;
    scan_settings: NessusScanSettingsUpdateRequestJson;
}

/**
  * Nessus Vulnerability API JSON interface.
  */
export interface NessusVulnerabilityJson {
    plugin_id: number;
    plugin_name: string;
    plugin_family: string;
    count: number;
    vuln_index: number;
    severity_index: number;
    hostname: string;
    severity: number;
}

/**
  * Org Currency Code API JSON interface.
  */
export interface OrgCurrencyCodeJson {
    currency_code: CurrencyCode;
}

/**
  * Org DNS Zone JSON.
  */
export interface OrgDnsZoneJson {
    org_uuid: string;
    zone_id: number;
    deleted: boolean;
    zone_name: string;
}

/**
    * API Org Entity Tree JSON representation.
    */
export interface OrgEntityTreeJson {
        location_id: string;
        org_uuid: string;
        tree: EntityTreeNodeJson;
        updated_date: number;
        crm: string;
}
/**
    * API Entity Tree Node JSON representation.
    */
export interface EntityTreeNodeJson {
        type: EntityType;
        uuid: string;
        name: string;
        update_date: number;
        children: {
                [entityType: string]: Array<EntityTreeNodeJson>;
        };
}

/**
  * Interface for Org JSON properties.
  */
export interface OrgJson extends EntityJson {
    location_id: string;
    enabled: boolean;
    vapp_max_runtime_lease: number;
    vapp_max_storage_lease: number;
    vapp_template_max_storage_lease: number;
    vapp_delete_on_storage_expire: boolean;
    vapp_template_delete_on_storage_expire: boolean;
    zerto_target: boolean;
    vccr_target: boolean;
    fullname: string;
    description: string;
    vcloud_href: string;
    company_id: string;
}

/**
  * API JSON spec for org vapp  update request.
  */
export interface OrgVappLeaseUpdateRequestJson {
    vapp_delete_on_storage_expire: boolean;
    vapp_max_runtime_lease: number;
    vapp_max_storage_lease: number;
}

/**
  * API JSON spec for org vapp template update request.
  */
export interface OrgVappTemplateLeaseUpdateRequestJson {
    vapp_template_delete_on_storage_expire: boolean;
    vapp_template_max_storage_lease: number;
}

/**
  * Public IP Assignment JSON interface.
  */
export interface PublicIpAssignmentJson {
    type: PublicAssignmentType;
    ip: string;
    entity_uuid: string;
    entity_name: string;
    external_network_uuid: string;
    external_network_name: string;
}

/**
  * Org Public IP Assignment Type.
  */
export type PublicAssignmentType = 'VM' | 'VDC_EDGE' | 'VAPP_EDGE' | 'VIRTUAL_SERVER' | 'IPSEC_VPN' | 'SNAT' | 'DNAT' | 'UNASSIGNED';

/**
  * VPG protection info JSON.
  */
export interface VpgsProtectionInfoJson {
    total_replicated_vms: number;
    total_unreplicated_vms: number;
}

/**
    * Bandwidth Usage Summary.
    */
export class BandwidthUsageSummary {
        constructor(_json: BandwidthUsageSummaryJson);
        /**
            * Get reserved amount.
            * @returns {number}
            */
        get reservedAmount(): number | undefined;
        /**
            * Get total usage.
            * @returns {number}
            */
        get totalUsage(): number;
        /**
            * Get burst usage.
            * @returns {number}
            */
        get burstUsage(): number;
        /**
            * Get month.
            * @returns {number}
            */
        get month(): number;
        /**
            * Get year.
            * @returns {number}
            */
        get year(): number;
        /**
            * Get the Billing model type.
            * @returns {BillingModelType}
            */
        get billingModelType(): BillingModelType;
        /**
            * Get the json representation of this class.
            * @returns {BandwidthUsageSummaryJson}
            */
        get json(): BandwidthUsageSummaryJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class BatchFailoverParamsRequest {
        constructor(batchFailoverParamsRequest: BatchFailoverParamsRequest);
        constructor(batchFailoverParamsRequestJson: BatchFailoverParamsRequestJson);
        /**
            * Get batch params.
            * @returns {{ [key: string]: FailoverParamsRequestJson }}
            */
        get batchParams(): {
                [key: string]: FailoverParamsRequestJson;
        };
        /**
            * Get the json representation of this class.
            * @returns {BatchFailoverParamsRequestJson}
            */
        get json(): BatchFailoverParamsRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class BatchFailoverTestParamsRequest {
        constructor(batchFailoverTestParamsRequest: BatchFailoverTestParamsRequest);
        constructor(batchFailoverTestParamsRequestJson: BatchFailoverTestParamsRequestJson);
        /**
            * Get batch params.
            * @returns {{ [key: string]: FailoverTestParamsRequest }}
            */
        get batchParams(): {
                [key: string]: FailoverTestParamsRequestJson;
        };
        /**
            * Get the json representation of this class.
            * @returns {BatchFailoverTestParamsRequestJson}
            */
        get json(): BatchFailoverTestParamsRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class BillingSampleSerie {
        constructor(_json: BillingSampleSerieJson);
        /**
            * Get entity uuid.
            * @returns {string}
            */
        get entityUuid(): string;
        /**
            * Get entity name.
            * @returns {string}
            */
        get entityName(): string;
        /**
            * Get interval.
            * @returns {number}
            */
        get interval(): number;
        /**
            * Get summary.
            * @returns {string}
            */
        get summary(): string;
        /**
            * Get samples.
            * @returns {Array<BillingSample>}
            */
        get samples(): Array<BillingSample>;
        /**
            * Get currency code.
            * @returns {string}
            */
        get currencyCode(): string;
        /**
            * Get the json representation of this class.
            * @returns {BillingSampleSerieJson}
            */
        get json(): BillingSampleSerieJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class BillingSample {
        constructor(_json: BillingSampleJson);
        /**
            * Get time.
            * @returns {number}
            */
        get time(): number;
        /**
            * Get value.
            * @returns {number}
            */
        get value(): number;
        /**
            * Get additional fields.
            * @returns {{ [key: BillField]: number }}
            */
        get additionalFields(): {
                [key in BillField]: number;
        };
        /**
            * Get the json representation of this class.
            * @returns {BillingSampleJson}
            */
        get json(): BillingSampleJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Catalog Create Request.
    */
export class CatalogCreateRequest {
        constructor(catalogCreateRequest: CatalogCreateRequest);
        constructor(catalogCreateRequestJson: CatalogCreateRequestJson);
        constructor(name: string, description: string, storageProfileUuid: string);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get storage profile uuid.
            * @returns {string}
            */
        get storageProfileUuid(): string;
        /**
            * Get the json representation of this class.
            * @returns {CatalogCreateRequestJson}
            */
        get json(): CatalogCreateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Check DNS Zone.
    */
export class CheckDnsZone {
        constructor(_json: CheckDnsZoneJson);
        /**
            * Get valid.
            * @returns {boolean}
            */
        get valid(): boolean;
        /**
            * Get message.
            * @returns {string}
            */
        get message(): string;
        /**
            * Get the json representation of this class.
            * @returns {CheckDnsZoneJson}
            */
        get json(): CheckDnsZoneJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export interface DisasterRecoveryRunbookAbortRequestJson {
    task_uuid: string;
}

/**
  * Disaster recovery runbook create request JSON interface.
  */
export interface DisasterRecoveryRunbookCreateRequestJson {
    name: string;
    description: string;
    recovery_groups: Array<RecoveryGroupDescriptorJson>;
}

export interface DisasterRecoveryRunbookExecuteJson {
    shutdown_policy: ShutdownPolicy;
}

export interface DisasterRecoveryRunbookFinalizeExecutionRequestJson {
    parent_runbook_task_uuid: string;
    finalize_recovery_params: {
        [key: string]: CommitPolicy;
    };
}

/**
  * Disaster recovery runbook JSON API interface.
  */
export interface DisasterRecoveryRunbookJson {
    location_id: string;
    org_uuid: string;
    description: string;
    created_date: number;
    last_test: number;
    recovery_groups: Array<RecoveryGroupDescriptorJson>;
    uuid: string;
    name: string;
    deleted: boolean;
    deleted_date: number;
    updated_date: number;
    company_id: string;
}

export interface DisasterRecoveryRunbookReportDetailsJson {
    location_id: string;
    task_uuid: string;
    type: string;
    task_complete: number;
    status: StatusJson;
    data: {
        [key: string]: RecoveryGroupReportDetailsJson;
    };
    start_time: string;
    end_time: string;
    protected_vm_count: number;
}

/**
  * Disaster recovery runbook create request JSON interface.
  */
export interface DisasterRecoveryRunbookUpdateRequestJson {
    name: string;
    description: string;
    recovery_groups: Array<RecoveryGroupDescriptorJson>;
}

/**
  * Recovery group descriptor request JSON.
  */
export interface RecoveryGroupDescriptorJson {
    name: string;
    uuid: string;
    type: RecoveryGroupType;
    order_index: number;
}

export interface RecoveryGroupReportDetailsJson {
    recovery_group_uuid: string;
    failover_status: string;
    details: VpgFailoverReportDetailsJson;
    bootup_logs: Array<VmBootupLogJson>;
}

export type RecoveryGroupType = 'ZERTO_VPG';

export type StatusJson = 'WAITING' | 'GENERATING' | 'READY' | 'ERROR';

export interface VmBootupLogJson {
    vm_uuid: string;
    vm_name: string;
    screenshot: Uint8Array;
    timestamp: number;
    ip_address: string;
    error_log: string;
}

/**
    * DIsaster recovery runbook abort request.
    */
export class DisasterRecoveryRunbookAbortRequest {
        constructor(disasterRecoveryRunbookAbortRequest: DisasterRecoveryRunbookAbortRequest);
        constructor(disasterRecoveryRunbookAbortRequestJson: DisasterRecoveryRunbookAbortRequestJson);
        constructor(taskUuid: string);
        /**
            * Get task uuid.
            * @returns {string}
            */
        get taskUuid(): string;
        /**
            * Get the json representation of this class.
            * @returns {DisasterRecoveryRunbookAbortRequestJson}
            */
        get json(): DisasterRecoveryRunbookAbortRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Disaster recovery runbook create request.
    */
export class DisasterRecoveryRunbookCreateRequest {
        constructor(disasterRecoveryRunbookCreateRequest: DisasterRecoveryRunbookCreateRequest);
        constructor(disasterRecoveryRunbookCreateRequestJson: DisasterRecoveryRunbookCreateRequestJson);
        constructor(name: string, description: string, recoveryGroups: Array<RecoveryGroupDescriptorJson>);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get recovery groups.
            * @returns {Array<RecoveryGroupDescriptorJson>}
            */
        get recoveryGroups(): Array<RecoveryGroupDescriptor>;
        /**
            * Get the json representation of this class.
            * @returns {DisasterRecoveryRunbookCreateRequestJson}
            */
        get json(): DisasterRecoveryRunbookCreateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Disaster Recovery Runbook Execute Request.
    */
export class DisasterRecoveryRunbookExecuteRequest {
        constructor(disasterRecoveryRunbookExecuteRequest: DisasterRecoveryRunbookExecuteRequest);
        constructor(disasterRecoveryRunbookExecuteRequestJson: DisasterRecoveryRunbookExecuteJson);
        constructor(shutdownPolicy: ShutdownPolicy);
        /**
            * Get shutdown policy.
            * @returns {ShutdownPolicy}
            */
        get shutdownPolicy(): ShutdownPolicy;
        /**
            * Get the json representation of this class.
            * @returns {DisasterRecoveryRunbookExecuteJson}
            */
        get json(): DisasterRecoveryRunbookExecuteJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Disaster recovery runbook finalize execution request.
    */
export class DisasterRecoveryRunbookFinalizeExecutionRequest {
        constructor(disasterRecoveryRunbookFinalizeExecutionRequest: DisasterRecoveryRunbookFinalizeExecutionRequest);
        constructor(disasterRecoveryRunbookFinalizeExecutionRequestJson: DisasterRecoveryRunbookFinalizeExecutionRequestJson);
        constructor(parentRunbookTaskUuid: string, finalizeRecoveryParams: {
                [key: string]: CommitPolicy;
        });
        /**
            * Get parent runbook task uuid.
            * @returns {string}
            */
        get parentRunbookTaskUuid(): string;
        /**
            * Get finalize recovery params.
            * @returns {{ [key: string]: CommitPolicy }}
            */
        get finalizeRecoveryParams(): {
                [key: string]: CommitPolicy;
        };
        /**
            * Get the json representation of this class.
            * @returns {DisasterRecoveryRunbookFinalizeExecutionRequestJson}
            */
        get json(): DisasterRecoveryRunbookFinalizeExecutionRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Disaster recovery runbook report details.
    */
export class DisasterRecoveryRunbookReportDetails {
        constructor(_json: DisasterRecoveryRunbookReportDetailsJson);
        /**
            * Get location id.
            * @returns {string}
            */
        get locationId(): string;
        /**
            * Get task uuid.
            * @returns {string}
            */
        get taskUuid(): string;
        /**
            * Get type.
            * @returns {string}
            */
        get type(): string;
        /**
            * Get task complete.
            * @returns {number}
            */
        get taskComplete(): number;
        /**
            * Get status.
            * @returns {StatusJson}
            */
        get status(): StatusJson;
        /**
            * Get data.
            * @returns {{ [key: string]: RecoveryGroupReportDetails }}
            */
        get data(): {
                [key: string]: RecoveryGroupReportDetails;
        };
        /**
            * Get start time.
            * @returns {string}
            */
        get startTime(): string;
        /**
            * Get end time.
            * @returns {string}
            */
        get endTime(): string;
        /**
            * Get protected vm count.
            * @returns {number}
            */
        get protectedVmCount(): number;
        /**
            * Get the json representation of this class.
            * @returns {DisasterRecoveryRunbookReportDetailsJson}
            */
        get json(): DisasterRecoveryRunbookReportDetailsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Disaster recovery runbook update request.
    */
export class DisasterRecoveryRunbookUpdateRequest {
        constructor(disasterRecoveryRunbookUpdateRequest: DisasterRecoveryRunbookUpdateRequest);
        constructor(disasterRecoveryRunbookUpdateRequestJson: DisasterRecoveryRunbookUpdateRequestJson);
        constructor(name: string, description: string, recoveryGroups: Array<RecoveryGroupDescriptorJson>);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get recovery groups.
            * @returns {Array<RecoveryGroupDescriptor>}
            */
        get recoveryGroups(): Array<RecoveryGroupDescriptor>;
        /**
            * Get the json representation of this class.
            * @returns {DisasterRecoveryRunbookUpdateRequestJson}
            */
        get json(): DisasterRecoveryRunbookUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Disaster recovery runbook
    */
export class DisasterRecoveryRunbook {
        constructor(_json: DisasterRecoveryRunbookJson);
        /**
            * Gets an DisasterRecoveryRunbook by UUID.
            * @param uuid DisasterRecoveryRunbook UUID
            * @returns {Promise<DisasterRecoveryRunbook>} promise that resolves with the DisasterRecoveryRunbook
            */
        static getDisasterRecoveryRunbook(uuid: string): Promise<DisasterRecoveryRunbook>;
        /**
            * Get location id.
            * @returns {string}
            */
        get locationId(): string;
        /**
            * Get org uuid.
            * @returns {string}
            */
        get orgUuid(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get created date.
            * @returns {number}
            */
        get createdDate(): number;
        /**
            * Get last test.
            * @returns {number}
            */
        get lastTest(): number;
        /**
            * Get recovery groups.
            * @returns {Array<RecoveryGroupDescriptor>}
            */
        get recoveryGroups(): Array<RecoveryGroupDescriptor>;
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get deleted.
            * @returns {boolean}
            */
        get deleted(): boolean;
        /**
            * Get deleted date.
            * @returns {number}
            */
        get deletedDate(): number;
        /**
            * Get updated date.
            * @returns {number}
            */
        get updatedDate(): number;
        /**
            * Get company id.
            * @returns {string}
            */
        get companyId(): string;
        /**
            * Get the json representation of this class.
            * @returns {DisasterRecoveryRunbookJson}
            */
        get json(): DisasterRecoveryRunbookJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
        /**
            * Refreshes the DisasterRecoveryRunbook data by retrieving it from the API again.
            * @returns {Promise<DisasterRecoveryRunbook>} promise that resolves with this object
            */
        refresh(): Promise<DisasterRecoveryRunbook>;
        /**
            * Deletes a DisasterRecoveryRunbook.
            * @returns {Promise<any>} a promise that resolves when the operation completes
            */
        delete(): Promise<any>;
        /**
            * Updates a disaster recovery runbook.
            * @param {DisasterRecoveryRunbookUpdateRequest} request the update request
            * @returns {Promise<DisasterRecoveryRunbook>} a promise that resolves with the updated runbook.
            */
        update(request: DisasterRecoveryRunbookUpdateRequest): Promise<DisasterRecoveryRunbook>;
        /**
            * Abort a disaster recovery runbook.
            * @param {DisasterRecoveryRunbookAbortRequest} abortRequest
            * @returns {Promise<Task>}
            */
        abort(abortRequest: DisasterRecoveryRunbookAbortRequest): Promise<Task>;
        /**
            * Execute a runbook.
            * @param {DisasterRecoveryRunbookExecuteRequest} executeRequest
            * @returns {Promise<any>}
            */
        execute(executeRequest: DisasterRecoveryRunbookExecuteRequest): Promise<Task>;
        /**
            * Finalize runbook execution.
            * @param {DisasterRecoveryRunbookFinalizeExecutionRequest} finalizeExecutionRequest
            * @returns {Promise<Task>}
            */
        finalizeExecution(finalizeExecutionRequest: DisasterRecoveryRunbookFinalizeExecutionRequest): Promise<Task>;
        /**
            * Run a runbook test.
            * @returns {Promise<Task>}
            */
        test(): Promise<Task>;
        /**
            * Get report href.
            * @param {string} reportUuid
            * @param {string} filename
            * @returns {Observable<string>}
            */
        getReportHref(reportUuid: string, filename?: string): Observable<string>;
        /**
            * Get runbook task details
            * @param {string} taskUuid
            * @returns {Promise<DisasterRecoveryRunbookReportDetails>}
            */
        getRunbookTaskDetails(taskUuid: string): Promise<DisasterRecoveryRunbookReportDetails>;
}

/**
    * Recovery group descriptor
    */
export class RecoveryGroupDescriptor {
        constructor(disasterRecoveryGroupDescriptorRequest: RecoveryGroupDescriptor);
        constructor(disasterRecoveryGroupDescriptorRequestJson: RecoveryGroupDescriptorJson);
        constructor(name: string, uuid: string, type: RecoveryGroupType, orderIndex: number);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get type.
            * @returns {RecoveryGroupType}
            */
        get type(): RecoveryGroupType;
        /**
            * Get order index.
            * @returns {number}
            */
        get orderIndex(): number;
        /**
            * Get the json representation of this class.
            * @returns {RecoveryGroupDescriptorJson}
            */
        get json(): RecoveryGroupDescriptorJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class RecoveryGroupReportDetails {
        constructor(_json: RecoveryGroupReportDetailsJson);
        /**
            * Get recovery group uuid.
            * @returns {string}
            */
        get recoveryGroupUuid(): string;
        /**
            * Get failover status.
            * @returns {string}
            */
        get failoverStatus(): string;
        /**
            * Get details.
            * @returns {VpgFailoverReportDetails}
            */
        get details(): VpgFailoverReportDetails;
        /**
            * Get bootup logs.
            * @returns {Array<VmBootupLog>}
            */
        get bootupLogs(): Array<VmBootupLog>;
        /**
            * Get the json representation of this class.
            * @returns {RecoveryGroupReportDetailsJson}
            */
        get json(): RecoveryGroupReportDetailsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Vm bootup log
    */
export class VmBootupLog {
        constructor(_json: VmBootupLogJson);
        /**
            * Get vm uuid.
            * @returns {string}
            */
        get vmUuid(): string;
        /**
            * Get vm name.
            * @returns {string}
            */
        get vmName(): string;
        /**
            * Get screenshot.
            * @returns {JpegImage}
            */
        get screenshot(): JpegImage;
        /**
            * Get timestamp.
            * @returns {number}
            */
        get timestamp(): number;
        /**
            * Get ip address.
            * @returns {string}
            */
        get ipAddress(): string;
        /**
            * Get error log.
            * @returns {string}
            */
        get errorLog(): string;
        /**
            * Get the json representation of this class.
            * @returns {VmBootupLogJson}
            */
        get json(): VmBootupLogJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * DNS Record Create Request.
    */
export class DnsRecordCreateRequest {
        constructor(dNSRecordCreateRequest: DnsRecordCreateRequest);
        constructor(dNSRecordCreateRequestJson: DnsRecordCreateRequestJson);
        constructor(zoneId: number, host: string, type: DnsRecordType, value: string, ipAddress: string, ttl: number, description: string, priority: number);
        /**
            * Get zone id.
            * @returns {number}
            */
        get zoneId(): number;
        /**
            * Get host.
            * @returns {string}
            */
        get host(): string;
        /**
            * Get type.
            * @returns {DnsRecordType}
            */
        get type(): DnsRecordType;
        /**
            * Get value.
            * @returns {string}
            */
        get value(): string;
        /**
            * Get ip address.
            * @returns {string}
            */
        get ipAddress(): string;
        /**
            * Get ttl.
            * @returns {number}
            */
        get ttl(): number;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get priority.
            * @returns {number}
            */
        get priority(): number;
        /**
            * Get the json representation of this class.
            * @returns {DnsRecordCreateRequestJson}
            */
        get json(): DnsRecordCreateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Dns Record Update Request.
    */
export class DnsRecordUpdateRequest {
        constructor(dNSRecordUpdateRequest: DnsRecordUpdateRequest);
        constructor(dNSRecordUpdateRequestJson: DnsRecordUpdateRequestJson);
        constructor(id: number, zoneId: number, host: string, type: DnsRecordType, value: string, ipAddress: string, ttl: number, description: string, priority: number);
        /**
            * Get id.
            * @returns {number}
            */
        get id(): number;
        /**
            * Get zone id.
            * @returns {number}
            */
        get zoneId(): number;
        /**
            * Get host.
            * @returns {string}
            */
        get host(): string;
        /**
            * Get type.
            * @returns {DnsRecordType}
            */
        get type(): DnsRecordType;
        /**
            * Get value.
            * @returns {string}
            */
        get value(): string;
        /**
            * Get ip address.
            * @returns {string}
            */
        get ipAddress(): string;
        /**
            * Get ttl.
            * @returns {number}
            */
        get ttl(): number;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get priority.
            * @returns {number}
            */
        get priority(): number;
        /**
            * Get the json representation of this class.
            * @returns {DnsRecordUpdateRequestJson}
            */
        get json(): DnsRecordUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * DNS Record.
    */
export class DnsRecord {
        constructor(_json: DnsRecordJson);
        /**
            * Gets the ID of the DNS record.
            * @returns {number}
            */
        get id(): number;
        /**
            * Gets the zone ID of the record.
            * @returns {number}
            */
        get zoneId(): number;
        /**
            * Gets the name of the zone that the record is associated with.
            * @returns {string}
            */
        get zoneName(): string;
        /**
            * Gets the host string.
            * @returns {string}
            */
        get host(): string;
        /**
            * Gets the record description.
            * @returns {string | null} null if no description is set.
            */
        get description(): string | null;
        /**
            * Gets the TTL setting of the record.
            * @returns {number | null} null if no TTL is set.
            */
        get ttl(): number | null;
        /**
            * Gets the ordering string.
            * @returns {string}
            */
        get ordering(): string;
        /**
            * Gets the record IP address.
            * @returns {string | null} null if no IP address is set and/or not applicable.
            */
        get ip(): string | null;
        /**
            * Gets the last modified date.
            * @returns {Date | null} null if not applicable.
            */
        get lastModified(): Date | null;
        /**
            * Gets the record value.
            * @returns {string}
            */
        get value(): string;
        /**
            * Gets the record type.
            * @returns {DnsRecordType}
            */
        get type(): DnsRecordType;
        /**
            * Gets the record priority. Applicable for MX record type.
            * @returns {number | null} null if not applicable.
            */
        get priority(): number | null;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {DnsRecordJson} the JSON representation
            */
        get json(): DnsRecordJson;
}

/**
    * Dns Zone Create Request.
    */
export class DnsZoneCreateRequest {
        constructor(dNSZoneCreateRequest: DnsZoneCreateRequest);
        constructor(dNSZoneCreateRequestJson: DnsZoneCreateRequestJson);
        constructor(name: string);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get the json representation of this class.
            * @returns {DnsZoneCreateRequestJson}
            */
        get json(): DnsZoneCreateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * DNS Zone.
    */
export class DnsZone {
        constructor(_json: DnsZoneJson);
        /**
            * Get id.
            * @returns {number}
            */
        get id(): number;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get resource id.
            * @returns {number}
            */
        get resourceId(): number;
        /**
            * Get serial.
            * @returns {number}
            */
        get serial(): number;
        /**
            * Get refresh.
            * @returns {number}
            */
        get refresh(): number;
        /**
            * Get retry.
            * @returns {number}
            */
        get retry(): number;
        /**
            * Get expire.
            * @returns {number}
            */
        get expire(): number;
        /**
            * Get minimum.
            * @returns {number}
            */
        get minimum(): number;
        /**
            * Get soa.
            * @returns {string}
            */
        get soa(): string;
        /**
            * Get tags.
            * @returns {string}
            */
        get tags(): string;
        /**
            * Get ttl.
            * @returns {string}
            */
        get ttl(): string;
        /**
            * Get enable dns sec.
            * @returns {boolean}
            */
        get enableDnsSec(): boolean;
        /**
            * Get auto check.
            * @returns {boolean}
            */
        get autoCheck(): boolean;
        /**
            * Get record id.
            * @returns {number}
            */
        get recordId(): number;
        /**
            * Get record host.
            * @returns {string}
            */
        get recordHost(): string;
        /**
            * Get record type.
            * @returns {DNSRecordType}
            */
        get recordType(): DNSRecordType;
        /**
            * Get record value.
            * @returns {string}
            */
        get recordValue(): string;
        /**
            * Get record description.
            * @returns {string}
            */
        get recordDescription(): string;
        /**
            * Get record ttl.
            * @returns {string}
            */
        get recordTtl(): string;
        /**
            * Get record ordering.
            * @returns {number}
            */
        get recordOrdering(): number;
        /**
            * Get record errors.
            * @returns {string}
            */
        get recordErrors(): string;
        /**
            * Get user can create.
            * @returns {boolean}
            */
        get userCanCreate(): boolean;
        /**
            * Get user can delete.
            * @returns {boolean}
            */
        get userCanDelete(): boolean;
        /**
            * Get user can update.
            * @returns {boolean}
            */
        get userCanUpdate(): boolean;
        /**
            * Get unpaged rows.
            * @returns {number}
            */
        get unpagedRows(): number;
        /**
            * Get the json representation of this class.
            * @returns {DnsZoneJson}
            */
        get json(): DnsZoneJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class ExternalNetwork {
        constructor(_json: ExternalNetworkJson);
        /**
            * Get graph id1.
            * @returns {string}
            */
        get graphId1(): string;
        /**
            * Get graph id2.
            * @returns {string}
            */
        get graphId2(): string;
        /**
            * Get ip scope.
            * @returns {NetworkIpScope}
            */
        get ipScope(): NetworkIpScope;
        /**
            * Get ip scopes.
            * @returns {Array<NetworkIpScope>}
            */
        get ipScopes(): Array<NetworkIpScope>;
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get deleted.
            * @returns {boolean}
            */
        get deleted(): boolean;
        /**
            * Get deleted date.
            * @returns {number}
            */
        get deletedDate(): number;
        /**
            * Get updated date.
            * @returns {number}
            */
        get updatedDate(): number;
        /**
            * Get the json representation of this class.
            * @returns {ExternalNetworkJson}
            */
        get json(): ExternalNetworkJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class FailoverParamsRequest {
        constructor(failoverParamsRequest: FailoverParamsRequest);
        constructor(failoverParamsRequestJson: FailoverParamsRequestJson);
        constructor(checkpointIdentifier: string, commitPolicy: CommitPolicy, shutdownPolicy: ShutdownPolicy, timeToWaitBeforeShutdownInSec: number, commitValue: number);
        /**
            * Get checkpoint identifier.
            * @returns {string}
            */
        get checkpointIdentifier(): string;
        /**
            * Get commit policy.
            * @returns {VpgFailoverCommitPolicyRequestJson}
            */
        get commitPolicy(): CommitPolicy;
        /**
            * Get shutdown policy.
            * @returns {VpgFailoverShutdownPolicyRequestJson}
            */
        get shutdownPolicy(): ShutdownPolicy;
        /**
            * Get time to wait before shutdown in sec.
            * @returns {number}
            */
        get timeToWaitBeforeShutdownInSec(): number;
        /**
            * Get commit value.
            * @returns {number}
            */
        get commitValue(): number;
        /**
            * Get the json representation of this class.
            * @returns {FailoverParamsRequestJson}
            */
        get json(): FailoverParamsRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class FailoverTestParamsRequest {
        constructor(failoverTestParamsRequest: FailoverTestParamsRequest);
        constructor(failoverTestParamsRequestJson: FailoverTestParamsRequestJson);
        constructor(checkpointId: string);
        /**
            * Get checkpoint id.
            * @returns {string}
            */
        get checkpointId(): string;
        /**
            * Get the json representation of this class.
            * @returns {FailoverTestParamsRequestJson}
            */
        get json(): FailoverTestParamsRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * IP Address Set.
    */
export class IpAddressSet {
        constructor(_json: IpAddressSetJson);
        /**
            * Get ips.
            * @returns {Array<string>}
            */
        get ips(): Array<string>;
        /**
            * Get the json representation of this class.
            * @returns {IpAddressSetJson}
            */
        get json(): IpAddressSetJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Is Compliance Org result.
    */
export class IsComplianceOrg {
        constructor(_json: IsComplianceOrgJson);
        /**
            * Get is compliance org.
            * @returns {boolean}
            */
        get isComplianceOrg(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {IsComplianceOrgJson}
            */
        get json(): IsComplianceOrgJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Nessus History.
    */
export class NessusHistory {
        constructor(_json: NessusHistoryJson);
        /**
            * Get history id.
            * @returns {number}
            */
        get historyId(): number;
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get owner id.
            * @returns {number}
            */
        get ownerId(): number;
        /**
            * Get status.
            * @returns {string}
            */
        get status(): string;
        /**
            * Get creation date.
            * @returns {number}
            */
        get creationDate(): number;
        /**
            * Get last modification date.
            * @returns {number}
            */
        get lastModificationDate(): number;
        /**
            * Get the json representation of this class.
            * @returns {NessusHistoryJson}
            */
        get json(): NessusHistoryJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Nessus Host.
    */
export class NessusHost {
        constructor(_json: NessusHostJson);
        /**
            * Get host id.
            * @returns {number}
            */
        get hostId(): number;
        /**
            * Get host index.
            * @returns {string}
            */
        get hostIndex(): string;
        /**
            * Get host name.
            * @returns {number}
            */
        get hostName(): number;
        /**
            * Get progress.
            * @returns {string}
            */
        get progress(): string;
        /**
            * Get critical.
            * @returns {number}
            */
        get critical(): number;
        /**
            * Get high.
            * @returns {number}
            */
        get high(): number;
        /**
            * Get medium.
            * @returns {number}
            */
        get medium(): number;
        /**
            * Get low.
            * @returns {number}
            */
        get low(): number;
        /**
            * Get info.
            * @returns {number}
            */
        get info(): number;
        /**
            * Get total checks considered.
            * @returns {number}
            */
        get totalChecksConsidered(): number;
        /**
            * Get num checks considered.
            * @returns {number}
            */
        get numChecksConsidered(): number;
        /**
            * Get scan progress total.
            * @returns {number}
            */
        get scanProgressTotal(): number;
        /**
            * Get scan progress current.
            * @returns {number}
            */
        get scanProgressCurrent(): number;
        /**
            * Get score.
            * @returns {number}
            */
        get score(): number;
        /**
            * Get the json representation of this class.
            * @returns {NessusHostJson}
            */
        get json(): NessusHostJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    *  Nessus Launch result.
    */
export class NessusLaunch {
        constructor(_json: NessusLaunchJson);
        /**
            * Get scan uuid.
            * @returns {string}
            */
        get scanUuid(): string;
        /**
            * Get error.
            * @returns {string}
            */
        get error(): string;
        /**
            * Get the json representation of this class.
            * @returns {NessusLaunchJson}
            */
        get json(): NessusLaunchJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Nessus Note.
    */
export class NessusNote {
        constructor(_json: NessusNoteJson);
        /**
            * Get title.
            * @returns {string}
            */
        get title(): string;
        /**
            * Get message.
            * @returns {string}
            */
        get message(): string;
        /**
            * Get severity.
            * @returns {number}
            */
        get severity(): number;
        /**
            * Get the json representation of this class.
            * @returns {NessusNoteJson}
            */
        get json(): NessusNoteJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Nessus Remediation.
    */
export class NessusRemediation {
        constructor(_json: NessusRemediationJson);
        /**
            * Get value.
            * @returns {string}
            */
        get value(): string;
        /**
            * Get remediation.
            * @returns {string}
            */
        get remediation(): string;
        /**
            * Get hosts.
            * @returns {number}
            */
        get hosts(): number;
        /**
            * Get vulns.
            * @returns {number}
            */
        get vulns(): number;
        /**
            * Get the json representation of this class.
            * @returns {NessusRemediationJson}
            */
        get json(): NessusRemediationJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Nessus Remediations.
    */
export class NessusRemediations {
        constructor(_json: NessusRemediationsJson);
        /**
            * Get remediations.
            * @returns {Array<NessusRemediationJson>}
            */
        get remediations(): Array<NessusRemediation>;
        /**
            * Get num hosts.
            * @returns {number}
            */
        get numHosts(): number;
        /**
            * Get num cves.
            * @returns {number}
            */
        get numCves(): number;
        /**
            * Get num impacted hosts.
            * @returns {number}
            */
        get numImpactedHosts(): number;
        /**
            * Get num remediated cves.
            * @returns {number}
            */
        get numRemediatedCves(): number;
        /**
            * Get the json representation of this class.
            * @returns {NessusRemediationsJson}
            */
        get json(): NessusRemediationsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Nessus Scan Details.
    */
export class NessusScanDetails {
        constructor(_json: NessusScanDetailsJson);
        /**
            * Get info.
            * @returns {NessusScanInfo}
            */
        get info(): NessusScanInfo;
        /**
            * Get remediations.
            * @returns {NessusRemediations}
            */
        get remediations(): NessusRemediations;
        /**
            * Get vulnerabilities.
            * @returns {Array<NessusVulnerability>}
            */
        get vulnerabilities(): Array<NessusVulnerability>;
        /**
            * Get hosts.
            * @returns {Array<NessusHost>}
            */
        get hosts(): Array<NessusHost>;
        /**
            * Get comp hosts.
            * @returns {Array<NessusHost>}
            */
        get compHosts(): Array<NessusHost>;
        /**
            * Get history.
            * @returns {Array<NessusHistory>}
            */
        get history(): Array<NessusHistory>;
        /**
            * Get notes.
            * @returns {Array<NessusNote>}
            */
        get notes(): Array<NessusNote>;
        /**
            * Get compliance.
            * @returns {Array<NessusVulnerability>}
            */
        get compliance(): Array<NessusVulnerability>;
        /**
            * Get vulnerabilities by host.
            * @returns {{ [key: number]: Array<NessusVulnerability> }}
            */
        get vulnsByHost(): {
                [key: number]: Array<NessusVulnerability>;
        };
        /**
            * Get the json representation of this class.
            * @returns {NessusScanDetailsJson}
            */
        get json(): NessusScanDetailsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Nessus Scan Info.
    */
export class NessusScanInfo {
        constructor(_json: NessusScanInfoJson);
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get edit allowed.
            * @returns {boolean}
            */
        get editAllowed(): boolean;
        /**
            * Get status.
            * @returns {string}
            */
        get status(): string;
        /**
            * Get policy.
            * @returns {string}
            */
        get policy(): string;
        /**
            * Get pci can upload.
            * @returns {boolean}
            */
        get pciCanUpload(): boolean;
        /**
            * Get has audit trail.
            * @returns {boolean}
            */
        get hasAuditTrail(): boolean;
        /**
            * Get scan start.
            * @returns {number}
            */
        get scanStart(): number;
        /**
            * Get folder id.
            * @returns {number}
            */
        get folderId(): number;
        /**
            * Get targets.
            * @returns {string}
            */
        get targets(): string;
        /**
            * Get timestamp.
            * @returns {number}
            */
        get timestamp(): number;
        /**
            * Get object id.
            * @returns {number}
            */
        get objectId(): number;
        /**
            * Get scanner name.
            * @returns {string}
            */
        get scannerName(): string;
        /**
            * Get haskb.
            * @returns {boolean}
            */
        get haskb(): boolean;
        /**
            * Get host count.
            * @returns {number}
            */
        get hostCount(): number;
        /**
            * Get scan end.
            * @returns {number}
            */
        get scanEnd(): number;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get user permissions.
            * @returns {number}
            */
        get userPermissions(): number;
        /**
            * Get control.
            * @returns {boolean}
            */
        get control(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {NessusScanInfoJson}
            */
        get json(): NessusScanInfoJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Nessus Scan Opt Out Create Request.
    */
export class NessusScanOptOutCreateRequest {
        constructor(nessusScanOptOutCreateRequest: NessusScanOptOutCreateRequest);
        constructor(nessusScanOptOutCreateRequestJson: NessusScanOptOutCreateRequestJson);
        constructor(optOut: boolean, exclusions: Array<string>);
        /**
            * Get opt out.
            * @returns {boolean}
            */
        get optOut(): boolean;
        /**
            * Get exclusions.
            * @returns {Array<string>}
            */
        get exclusions(): Array<string>;
        /**
            * Get the json representation of this class.
            * @returns {NessusScanOptOutCreateRequestJson}
            */
        get json(): NessusScanOptOutCreateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Nessus Scan Opt Out.
    */
export class NessusScanOptOut {
        constructor(_json: NessusScanOptOutJson);
        /**
            * Get org uuid.
            * @returns {string}
            */
        get orgUuid(): string;
        /**
            * Get opt out.
            * @returns {boolean}
            */
        get optOut(): boolean;
        /**
            * Get exclusions.
            * @returns {Array<string>}
            */
        get exclusions(): Array<string>;
        /**
            * Get the json representation of this class.
            * @returns {NessusScanOptOutJson}
            */
        get json(): NessusScanOptOutJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Nessus Scan Settings Update Request.
    */
export class NessusScanSettingsUpdateRequest {
        constructor(nessusScanSettingsUpdateRequest: NessusScanSettingsUpdateRequest);
        constructor(nessusScanSettingsUpdateRequestJson: NessusScanSettingsUpdateRequestJson);
        constructor(name: string, description: string, emails: string, enabled: boolean, launch: string, folderId: string, policyId: string, scannerId: string, startTime: string, textTargets: string, fileTargets: string, rRules: string, useDashboard: boolean, acls: Array<string>, timezone: string);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get emails.
            * @returns {string}
            */
        get emails(): string;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get launch.
            * @returns {string}
            */
        get launch(): string;
        /**
            * Get folder id.
            * @returns {string}
            */
        get folderId(): string;
        /**
            * Get policy id.
            * @returns {string}
            */
        get policyId(): string;
        /**
            * Get scanner id.
            * @returns {string}
            */
        get scannerId(): string;
        /**
            * Get start time.
            * @returns {string}
            */
        get startTime(): string;
        /**
            * Get text targets.
            * @returns {string}
            */
        get textTargets(): string;
        /**
            * Get file targets.
            * @returns {string}
            */
        get fileTargets(): string;
        /**
            * Get r rules.
            * @returns {string}
            */
        get rRules(): string;
        /**
            * Get use dashboard.
            * @returns {boolean}
            */
        get useDashboard(): boolean;
        /**
            * Get acls.
            * @returns {Array<string>}
            */
        get acls(): Array<string>;
        /**
            * Get timezone.
            * @returns {string}
            */
        get timezone(): string;
        /**
            * Get the json representation of this class.
            * @returns {NessusScanSettingsUpdateRequestJson}
            */
        get json(): NessusScanSettingsUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Nessus Scan Update Request.
    */
export class NessusScanUpdateRequest {
        constructor(nessusScanUpdateRequest: NessusScanUpdateRequest);
        constructor(nessusScanUpdateRequestJson: NessusScanUpdateRequestJson);
        constructor(templateUuid: string, scanSettings: NessusScanSettingsUpdateRequestJson);
        /**
            * Get template uuid.
            * @returns {string}
            */
        get templateUuid(): string;
        /**
            * Get scan settings.
            * @returns {NessusScanSettingsUpdateRequest}
            */
        get scanSettings(): NessusScanSettingsUpdateRequest;
        /**
            * Get the json representation of this class.
            * @returns {NessusScanUpdateRequestJson}
            */
        get json(): NessusScanUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Nessus Scan Update.
    */
export class NessusScanUpdate {
        constructor(_json: NessusScanUpdateJson);
        /**
            * Get creation date.
            * @returns {number}
            */
        get creationDate(): number;
        /**
            * Get custom targets.
            * @returns {string}
            */
        get customTargets(): string;
        /**
            * Get default permissions.
            * @returns {string}
            */
        get defaultPermissions(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get emails.
            * @returns {string}
            */
        get emails(): string;
        /**
            * Get id.
            * @returns {number}
            */
        get id(): number;
        /**
            * Get last modification date.
            * @returns {number}
            */
        get lastModificationDate(): number;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get notification filter type.
            * @returns {string}
            */
        get notificationFilterType(): string;
        /**
            * Get notification filters.
            * @returns {string}
            */
        get notificationFilters(): string;
        /**
            * Get owner.
            * @returns {string}
            */
        get owner(): string;
        /**
            * Get owner id.
            * @returns {number}
            */
        get ownerId(): number;
        /**
            * Get policy id.
            * @returns {number}
            */
        get policyId(): number;
        /**
            * Get rrules.
            * @returns {string}
            */
        get rrules(): string;
        /**
            * Get scanner id.
            * @returns {number}
            */
        get scannerId(): number;
        /**
            * Get shared.
            * @returns {number}
            */
        get shared(): number;
        /**
            * Get start time.
            * @returns {string}
            */
        get startTime(): string;
        /**
            * Get tag id.
            * @returns {number}
            */
        get tagId(): number;
        /**
            * Get timezone.
            * @returns {string}
            */
        get timezone(): string;
        /**
            * Get type.
            * @returns {string}
            */
        get type(): string;
        /**
            * Get user permissions.
            * @returns {number}
            */
        get userPermissions(): number;
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get use dashboard.
            * @returns {boolean}
            */
        get useDashboard(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {NessusScanUpdateJson}
            */
        get json(): NessusScanUpdateJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Nessus Scan.
    */
export class NessusScan {
        constructor(_json: NessusScanJson);
        /**
            * Get id.
            * @returns {number}
            */
        get id(): number;
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get owner.
            * @returns {string}
            */
        get owner(): string;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get folder id.
            * @returns {number}
            */
        get folderId(): number;
        /**
            * Get read.
            * @returns {boolean}
            */
        get read(): boolean;
        /**
            * Get status.
            * @returns {string}
            */
        get status(): string;
        /**
            * Get shared.
            * @returns {boolean}
            */
        get shared(): boolean;
        /**
            * Get user permissions.
            * @returns {number}
            */
        get userPermissions(): number;
        /**
            * Get creation date.
            * @returns {number}
            */
        get creationDate(): number;
        /**
            * Get last modification date.
            * @returns {number}
            */
        get lastModificationDate(): number;
        /**
            * Get control.
            * @returns {boolean}
            */
        get control(): boolean;
        /**
            * Get start time.
            * @returns {string}
            */
        get startTime(): string;
        /**
            * Get timezone.
            * @returns {string}
            */
        get timezone(): string;
        /**
            * Get rrules.
            * @returns {string}
            */
        get rrules(): string;
        /**
            * Get use dashboard.
            * @returns {boolean}
            */
        get useDashboard(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {NessusScanJson}
            */
        get json(): NessusScanJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Nessus Vulnerability.
    */
export class NessusVulnerability {
        constructor(_json: NessusVulnerabilityJson);
        /**
            * Get plugin id.
            * @returns {number}
            */
        get pluginId(): number;
        /**
            * Get plugin name.
            * @returns {string}
            */
        get pluginName(): string;
        /**
            * Get plugin family.
            * @returns {string}
            */
        get pluginFamily(): string;
        /**
            * Get count.
            * @returns {number}
            */
        get count(): number;
        /**
            * Get vuln index.
            * @returns {number}
            */
        get vulnIndex(): number;
        /**
            * Get severity index.
            * @returns {number}
            */
        get severityIndex(): number;
        /**
            * Get hostname.
            * @returns {string}
            */
        get hostname(): string;
        /**
            * Get severity.
            * @returns {number}
            */
        get severity(): number;
        /**
            * Get the json representation of this class.
            * @returns {NessusVulnerabilityJson}
            */
        get json(): NessusVulnerabilityJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Org Currency Code.
    */
export class OrgCurrencyCode {
        constructor(_json: OrgCurrencyCodeJson);
        /**
            * Get currency code.
            * @returns {CurrencyCode}
            */
        get currencyCode(): CurrencyCode;
        /**
            * Get the json representation of this class.
            * @returns {OrgCurrencyCodeJson}
            */
        get json(): OrgCurrencyCodeJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Org DNS Zone. Provides link between an Org and a DNS Zone.
    */
export class OrgDnsZone {
        constructor(_json: OrgDnsZoneJson);
        /**
            * Get the org uuid.
            * @returns {string}
            */
        get orgUuid(): string;
        /**
            * Get the DNS zone ID.
            * @returns {number}
            */
        get zoneId(): number;
        /**
            * Get whether the DNS zone has been deleted.
            * @returns {boolean}
            */
        get deleted(): boolean;
        /**
            * Get the DNS zone name.
            * @returns {string}
            */
        get zoneName(): string;
        /**
            * Get the json representation of this class.
            * @returns {OrgDnsZoneJson}
            */
        get json(): OrgDnsZoneJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Org vApp Lease Update Request.
    */
export class OrgVappLeaseUpdateRequest {
        constructor(orgVappLeaseUpdateRequest: OrgVappLeaseUpdateRequest);
        constructor(orgVappLeaseUpdateRequestJson: OrgVappLeaseUpdateRequestJson);
        constructor(vappDeleteOnStorageExpire: boolean, vappMaxRuntimeLease: number, vappMaxStorageLease: number);
        /**
            * Get vapp delete on storage expire.
            * @returns {boolean}
            */
        get vappDeleteOnStorageExpire(): boolean;
        /**
            * Get vapp max runtime lease.
            * @returns {number}
            */
        get vappMaxRuntimeLease(): number;
        /**
            * Get vapp max storage lease.
            * @returns {number}
            */
        get vappMaxStorageLease(): number;
        /**
            * Get the json representation of this class.
            * @returns {OrgVappLeaseUpdateRequestJson}
            */
        get json(): OrgVappLeaseUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Org vApp Template Lease Update Request.
    */
export class OrgVappTemplateLeaseUpdateRequest {
        constructor(orgVappTemplateLeaseUpdateRequest: OrgVappTemplateLeaseUpdateRequest);
        constructor(orgVappTemplateLeaseUpdateRequestJson: OrgVappTemplateLeaseUpdateRequestJson);
        constructor(vappTemplateDeleteOnStorageExpire: boolean, vappTemplateMaxStorageLease: number);
        /**
            * Get vapp template delete on storage expire.
            * @returns {boolean}
            */
        get vappTemplateDeleteOnStorageExpire(): boolean;
        /**
            * Get vapp template max storage lease.
            * @returns {number}
            */
        get vappTemplateMaxStorageLease(): number;
        /**
            * Get the json representation of this class.
            * @returns {OrgVappTemplateLeaseUpdateRequestJson}
            */
        get json(): OrgVappTemplateLeaseUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * IaaS Organization.
    */
export class Org extends Entity {
        constructor(_json: OrgJson);
        /**
            * Gets an Org by UUID.
            * @param uuid Org UUID
            * @returns {Promise<Org>} promise that resolves with the Org
            */
        static getOrg(uuid: string): Promise<Org>;
        /**
            * Gets the list of performance counters that can be used to query for VPGs usage data (common for all orgs).
            * @returns {Promise<Array<PerfCounter>>} performance counters
            */
        static getVpgPerformanceCounters(): Promise<Array<PerfCounter>>;
        get entityType(): EntityType;
        /**
            * Indicates whether the Org is enabled.
            * @returns {boolean} value
            */
        get enabled(): boolean;
        /**
            * Gets the description.
            * @returns {string} description
            */
        get description(): string;
        /**
            * Gets the vCloud HREF
            * @returns {string} vCloud HREF
            */
        get vcloudHref(): string;
        /**
            * Gets the datacenter location identifier.
            * @returns {string} location ID
            */
        get locationId(): string;
        /**
            * Gets the Orgs max vApp runtime lease setting.
            * @returns {number} vApp max runtime lease
            */
        get vappMaxRuntimeLease(): number;
        /**
            * Gets the vApps max storage lease setting.
            * @returns {number} vApp max storage lease
            */
        get vappMaxStorageLease(): number;
        /**
            * Gets the Orgs vApp template max storage lease setting.
            * @returns {number} vApp template max storage lease
            */
        get vappTemplateMaxStorageLease(): number;
        /**
            * Indicates whether the Org is configured such that vApps are deleted upon storage lease expiration vs. being marked
            * as an expired item.
            * @returns {boolean} value
            */
        get vappDeletedOnStorageLeaseExpiration(): boolean;
        /**
            * Indicates whether the Org is configured such that vApp templates are deleted upon storage lease expiration vs.
            * being marked as an expired item.
            * @returns {boolean} value
            */
        get vappTemplateDeletedOnStorageLeaseExpiration(): boolean;
        /**
            * Indicates whether the Org is a Zerto continuity target.
            * @returns {boolean} value
            */
        get zertoTarget(): boolean;
        /**
            * Indicates whether the Org is a VCCR continuity target.
            * @returns {boolean} value
            */
        get vccrTarget(): boolean;
        /**
            * Gets the full name of the organization.
            * @returns {string} full name
            */
        get fullName(): string;
        /**
            * Gets the company ID (CRM).
            * @returns {string} company ID
            */
        get companyId(): string;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {OrgJson} the API __json__ object
            */
        get json(): OrgJson;
        /**
            * Refreshes the Org data by retrieving it from the API again.
            * @returns {Promise<Org>} promise that resolves with this object
            */
        refresh(): Promise<Org>;
        /**
            * Gets a list of historical bills for the organization. All bills with timestamps between the start and end
            * parameters are returned.
            * @param {Date} start the begin timestamp of the query range
            * @param {Date} end the end timestamp of the query range
            * @returns {Promise<Array<Bill>>} promise that resolves with the list of historical bills
            */
        getHistoricalBilling(start: Date, end: Date): Promise<Array<Bill>>;
        /**
            * Gets the organization's current billing summary.
            * @returns {Promise<BillingSummary>} promise that resolves with the current billing summary
            */
        getBillingSummary(): Promise<BillingSummary>;
        /**
            * Gets the list of bills for each vDC within the org, for the specified range of billing periods.
            * @param {number} startMonth the begin range month specified as an integer in the range 1-12
            * @param {number} startYear the begin range year
            * @param {number} endMonth the end range month specified as an integer in the range 1-12
            * @param {number} endYear the end range month
            * @returns {Promise<Array<OrgVdcBills>>} a promise that resolves with the list of org vdc bill objects
            */
        getBillingByVdcInRange(startMonth?: number, startYear?: number, endMonth?: number, endYear?: number): Promise<Array<OrgVdcBills>>;
        /**
            * Gets the list of bills for each vDC within the org, for the specified billing month/year.
            * @param {number} month the month to get vDC bills for in the range 1-12
            * @param {number} year the year to get vDC bills for
            * @returns {Promise<Array<OrgVdcBills|null>>} a promise that resolves with the org vdc bill object or null if none
            * exists for the specified month
            */
        getBillingByVdc(month?: number, year?: number): Promise<OrgVdcBills | null>;
        /**
            * Gets the organization's bill for the specified month/year.
            * @param {number} month a month specified as an integer in the range 1-12
            * @param {number} year a year
            * @returns {Promise<Bill>} a promise that resolves with the bill
            */
        getBill(month?: number, year?: number): Promise<Bill>;
        /**
            * Gets the Orgs child vDCs.
            * @returns {Promise<Vdc[]>} promise that resolves with an array of child vDCs
            */
        getVdcs(): Promise<Array<Vdc>>;
        /**
            * Gets the Orgs child vApps.
            * @returns {Promise<Vapp[]>} promise that resolves with an array of child vApps
            */
        getVapps(): Promise<Array<Vapp>>;
        /**
            * Gets the Orgs child VMs.
            * @returns {Promise<Vm[]>} promise that resolves with an array of child VMs
            */
        getVms(): Promise<Array<Vm>>;
        /**
            * Gets the Orgs child Edges.
            * @returns {Promise<Edge[]>} promise that resolves with an array of child Edges
            */
        getEdges(): Promise<Array<Edge>>;
        /**
            * Gets the Orgs child internal networks.
            * @returns {Promise<InternalNetwork[]>} promise that resolves with an array of child Internal networks
            */
        getInternalNetworks(): Promise<Array<InternalNetwork>>;
        /**
            * Gets the Orgs child vApp networks.
            * @returns {Promise<VappNetwork[]>} promise that resolves with an array of child vApp networks
            */
        getVappNetworks(): Promise<Array<VappNetwork>>;
        /**
            * Updates the organizations vapp template lease settings.
            * @param {OrgVappTemplateLeaseUpdateRequest} spec the new lease settings
            * @returns {Promise<Org>} a promise that resolves with the updated org
            */
        updateVappTemplateLeaseSettings(spec: OrgVappTemplateLeaseUpdateRequest): Promise<Org>;
        /**
            * Updates the organization's vApp lease settings.
            * @param {OrgVappLeaseUpdateRequest} spec the new lease settings
            * @returns {Promise<Org>} a promise that resolves with the updated org
            */
        updateOrgVappLeaseSettings(spec: OrgVappLeaseUpdateRequest): Promise<Org>;
        /**
            * Gets all DNS records for the organization.
            * @returns {Promise<Array<DnsRecord>>} a promise that resolves with a list of DNS records.
            */
        getDnsRecords(): Promise<Array<DnsRecord>>;
        /**
            * Adds a new DNS record for the org.
            * @param {DnsRecordCreateRequest} record the new record
            * @returns {Promise<DnsRecord>} a promise that resolves with the new record
            */
        addDnsRecord(record: DnsRecordCreateRequest): Promise<DnsRecord>;
        /**
            * Updates a DNS record within the org.
            * @param {DnsRecordUpdateRequest} record the updated record
            * @returns {Promise<DnsRecord>} a promise that resolves with the updated record
            */
        updateDnsRecord(record: DnsRecordUpdateRequest): Promise<DnsRecord>;
        /**
            * Deletes a DNS record within the org.
            * @param {number} recordId the record ID
            * @returns {Promise<any>} a promise that resolves when the operation completes
            */
        deleteDnsRecord(recordId: number): Promise<any>;
        /**
            * Gets all DNS zones that exist within the org.
            * @returns {Promise<Array<OrgDnsZone>>} a promise that resolves with the list of DNS zones
            */
        getOrgDnsZones(): Promise<Array<OrgDnsZone>>;
        /**
            * Adds a new DNS zone within the org.
            * @param {DnsZoneCreateRequest} zoneSpec the new DNS zone details
            * @returns {Promise<DnsZone>} a promise that resolves with the newly created DNS zone
            */
        addDnsZone(zoneSpec: DnsZoneCreateRequest): Promise<DnsZone>;
        /**
            * Deletes a DNS zone from the org.
            * @param {number} zoneId the ID of the zone
            * @returns {Promise<any>} a promise that resolves when the operation completes
            */
        deleteDnsZone(zoneId: number): Promise<any>;
        /**
            * Checks the status of a DNS zone within the org.
            * @param {number} zoneId the ID of the zone
            * @returns {Promise<CheckDnsZone>} a promise that resolves with the zone check results
            */
        checkDnsZone(zoneId: number): Promise<CheckDnsZone>;
        /**
            * Gets all IP addresses available for assignment in PTR records.
            * @returns {Promise<IpAddressSet>} a promise that resolves with the set of available IP addresses
            */
        getAvailableIpsForPtrRecords(): Promise<IpAddressSet>;
        /**
            * Gets all catalogs within the organization.
            * @returns {Promise<Array<Catalog>>} returns a promise that resolves with the list of organization catalogs
            */
        getOrgCatalogs(): Promise<Array<Catalog>>;
        /**
            * Get the continuity protection reports available for download for the given organization.
            * @param {string} the report format to filter on
            * @param {boolean} whether to return the sole latest report for this org
            * @returns {Promise<Array<ReportHeader>>} promise Promise that resolves with a list of Report
            */
        getContinuityProtectionReports(format?: ReportFormat, latest?: boolean): Promise<Array<ReportHeader>>;
        /**
            * Get the disaster recovery admin reports available for download for the given organization.
            * @param {string} the report format to filter on
            * @param {boolean} whether to return the sole latest report for this org
            * @returns {Promise<Array<ReportHeader>>} promise Promise that resolves with a list of Report
            */
        getDisasterRecoveryAdminReports(format?: ReportFormat, latest?: boolean): Promise<Array<ReportHeader>>;
        /**
            * Get the billing reports available for download for the given organization.
            * @param {string} the report format to filter on
            * @param {boolean} whether to return the sole latest report for this org
            * @returns {Promise<Array<ReportHeader>>} promise Promise that resolves with a list of Report
            */
        getBillingReports(format?: ReportFormat, latest?: boolean): Promise<Array<ReportHeader>>;
        /**
            * Get the VM inventory reports available for download for the given organization.
            * @param {string} the report format to filter on
            * @param {boolean} whether to return the sole latest report for this org
            * @returns {Promise<Array<ReportHeader>>} promise Promise that resolves with a list of Report
            */
        getVmInventoryReports(format?: ReportFormat, latest?: boolean): Promise<Array<ReportHeader>>;
        /**
            * Get the support request reports available for download for the given organization.
            * @param {string} the report format to filter on
            * @param {boolean} whether to return the sole latest report for this org
            * @returns {Promise<Array<ReportHeader>>} promise Promise that resolves with a list of Report
            */
        getSupportRequestReports(orgUuid: string, format?: ReportFormat, latest?: boolean): Promise<Array<ReportHeader>>;
        /**
            * Get the cloud event reports available for download for the given organization.
            * @param {string} the report format to filter on
            * @param {boolean} whether to return the sole latest report for this org
            * @returns {Promise<Array<ReportHeader>>} promise Promise that resolves with a list of Report
            */
        getCloudEventReports(orgUuid: string, format?: ReportFormat, latest?: boolean): Promise<Array<ReportHeader>>;
        /**
            * Get the login event reports available for download for the given organization.
            * @param {string} the report format to filter on
            * @param {boolean} whether to return the sole latest report for this org
            * @returns {Promise<Array<ReportHeader>>} promise Promise that resolves with a list of Report
            */
        getLoginEventReports(orgUuid: string, format?: ReportFormat, latest?: boolean): Promise<Array<ReportHeader>>;
        /**
            * Get the VM encryption reports available for download for the given organization.
            * @param {string} the report format to filter on
            * @param {boolean} whether to return the sole latest report for this org
            * @returns {Promise<Array<ReportHeader>>} promise Promise that resolves with a list of Report
            */
        getVMEncryptionReports(format?: ReportFormat, latest?: boolean): Promise<Array<ReportHeader>>;
        /**
            * Get the HIPAA reports available for download for the given organization.
            * @param {string} the report format to filter on
            * @param {boolean} whether to return the sole latest report for this org
            * @returns {Promise<Array<ReportHeader>>} promise Promise that resolves with a list of Report
            */
        getHIPAAReports(format?: ReportFormat, latest?: boolean): Promise<Array<ReportHeader>>;
        /**
            * Get the web reputation reports available for download for the given organization.
            * @param {string} the report format to filter on
            * @param {boolean} whether to return the sole latest report for this org
            * @returns {Promise<Array<ReportHeader>>} promise Promise that resolves with a list of Report
            */
        getWebReputationEventReports(format?: ReportFormat, latest?: boolean): Promise<Array<ReportHeader>>;
        /**
            * Get the DPI event reports available for download for the given organization.
            * @param {string} the report format to filter on
            * @param {boolean} whether to return the sole latest report for this org
            * @returns {Promise<Array<ReportHeader>>} promise Promise that resolves with a list of Report
            */
        getDPIEventReports(format?: ReportFormat, latest?: boolean): Promise<Array<ReportHeader>>;
        /**
            * Get the integrity event reports available for download for the given organization.
            * @param {string} the report format to filter on
            * @param {boolean} whether to return the sole latest report for this org
            * @returns {Promise<Array<ReportHeader>>} promise Promise that resolves with a list of Report
            */
        getIntegrityEventReports(format?: ReportFormat, latest?: boolean): Promise<Array<ReportHeader>>;
        /**
            * Get the firewall event reports available for download for the given organization.
            * @param {string} the report format to filter on
            * @param {boolean} whether to return the sole latest report for this org
            * @returns {Promise<Array<ReportHeader>>} promise Promise that resolves with a list of Report
            */
        getFirewallEventReports(format?: ReportFormat, latest?: boolean): Promise<Array<ReportHeader>>;
        /**
            * Get the log inspection event reports available for download for the given organization.
            * @param {string} the report format to filter on
            * @param {boolean} whether to return the sole latest report for this org
            * @returns {Promise<Array<ReportHeader>>} promise Promise that resolves with a list of Report
            */
        getLogInspectionEventReports(format?: ReportFormat, latest?: boolean): Promise<Array<ReportHeader>>;
        /**
            * Get the anti-malware event reports available for download for the given organization.
            * @param {string} the report format to filter on
            * @param {boolean} whether to return the sole latest report for this org
            * @returns {Promise<Array<ReportHeader>>} promise Promise that resolves with a list of Report
            */
        getAntimalwareEventReports(format?: ReportFormat, latest?: boolean): Promise<Array<ReportHeader>>;
        /**
            * Get the vulnerability event reports available for download for the given organization.
            * @param {string} the report format to filter on
            * @param {boolean} whether to return the sole latest report for this org
            * @returns {Promise<Array<ReportHeader>>} promise Promise that resolves with a list of Report
            */
        getVulnerabilityReports(format?: ReportFormat, latest?: boolean): Promise<Array<ReportHeader>>;
        /**
            * Get a report with its JSON content.  This endpoint is experimental.
            * @param {string} the report UUID
            * @private
            * @returns {Promise<ReportWithContent>} promise Promise that resolves with the report with content
            */
        getReportWithContent(reportUuid: string): Promise<ReportWithContent>;
        /**
            * Get a report with its JSON summary.  This endpoint is experimental.
            * @param {string} the report UUID
            * @private
            * @returns {Promise<ReportWithSummary>} promise Promise that resolves with the report with summary
            */
        getReportWithSummary(reportUuid: string): Promise<ReportWithSummary>;
        /**
            * Get the antimalware over time serie for the given organization and date range.
            * @param {number} start Start date (defaults to one month prior to end param)
            * @param {number} end End date (defaults to current time if not provided)
            * @param {number} limit Limit on number of samples to return (defaults to 730)
            * @returns {Promise<AntimalwareOverTime>} promise Promise that resolves with a AntimalwareOverTime serie
            */
        getAntimalwareOverTimeSerie(start?: number, end?: number, limit?: number): Promise<AntimalwareOverTime>;
        /**
            * Get the compliance over time serie for the given organization and serie name.
            * @param {SerieType} type Type of the series (ANTI_MALWARE, VULNERABILITY, LOG_INSPECTION, FIREWALL)
            * @param {number} start Start date (defaults to one month prior to end param)
            * @param {number} end End date (defaults to current time if not provided)
            * @param {number} limit Limit on number of samples to return (defaults to 60)
            * @returns {Promise<ComplianceOverTime>} promise Promise that resolves with a ComplianceOverTime serie
            */
        getComplianceOverTimeSerie(type?: SerieType, start?: number, end?: number, limit?: number): Promise<ComplianceOverTime>;
        /**
            * Get the firewall over time serie for the given organization and date range.
            * @param {number} start Start date (defaults to Jan 1, 1970)
            * @param {number} end End date (defaults to current time if not provided)
            * @param {number} limit Limit on number of samples to return (defaults to 730)
            * @returns {Promise<FirewallOverTime>} promise Promise that resolves with a FirewallOverTime serie
            */
        getFirewallOverTimeSerie(start?: number, end?: number, limit?: number): Promise<FirewallOverTime>;
        /**
            * Get the log inspection over time serie for the given organization and date range.
            * @param {number} start Start date (defaults to Jan 1, 1970)
            * @param {number} end End date (defaults to current time if not provided)
            * @param {number} limit Limit on number of samples to return (defaults to 730)
            * @returns {Promise<LogInspectionOverTime>} promise Promise that resolves with a LogInspectionOverTime serie
            */
        getLogInspectionOverTimeSerie(start?: number, end?: number, limit?: number): Promise<LogInspectionOverTime>;
        /**
            * Get the vulnerability over time serie for the given organization and date range.
            * @param {number} start Start date (defaults to Jan 1, 1970)
            * @param {number} end End date (defaults to current time if not provided)
            * @param {number} limit Limit on number of samples to return (defaults to 730)
            * @returns {Promise<VulnerabilityOverTime>} promise Promise that resolves with a ComplianceOverTime serie
            */
        getVulnerabilityOverTimeSerie(start?: number, end?: number, limit?: number): Promise<VulnerabilityOverTime>;
        /**
            * Generate the anti-malware report for the given organization and time range.
            * @param {number} start Start date as timestamp
            * @param {number} end End date as timestamp
            * @param {string} format Report format ('pdf' or 'html')
            * @param {boolean} emailOnCompletion Whether to email the report upon successful generation
            * @param {string} email Email address to send the report to if emailOnCompletion is true,
            * defaults to the user's profile email if not specified
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        generateAntiMalwareReport(start?: number, end?: number, format?: string, emailOnCompletion?: boolean, email?: string): Promise<Task>;
        /**
            * Generate the billing report for a given organization.
            * @param {BillingReportRequest} billingReportSpec Billing report
            * ({@link http://doc.10.api.iland.test/1.0/apidocs/#!/org-reporting/generateBillingReport|Doc})
            * @param {boolean} emailOnCompletion Whether to email the report upon successful generation
            * @param {string} email Email address to send the report to if emailOnCompletion is true,
            * defaults to the user's profile email if not specified
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        generateBillingReport(billingReportSpec: BillingReportRequest, emailOnCompletion?: boolean, email?: string): Promise<Task>;
        /**
            * Generate a continuity protection summary report for the given organization.
            * @param {string} format Report format ('pdf' or 'html')
            * @param {boolean} emailOnCompletion Whether to email the report upon successful generation
            * @param {string} email Email address to send the report to if emailOnCompletion is true,
            * defaults to the user's profile email if not specified
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        generateContinuityProtectionSummaryReport(format?: string, emailOnCompletion?: boolean, email?: string): Promise<Task>;
        /**
            * Generate the DPI event history report for the given organization and time range.
            * @param {number} start Start date as timestamp
            * @param {number} end End date as timestamp
            * @param {string} format Report format ('pdf' or 'html')
            * @param {boolean} emailOnCompletion Whether to email the report upon successful generation
            * @param {string} email Email address to send the report to if emailOnCompletion is true,
            * defaults to the user's profile email if not specified
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        generateDPIEventHistoryReport(start?: number, end?: number, format?: string, emailOnCompletion?: boolean, email?: string): Promise<Task>;
        /**
            * Generate the dr admin report for the given organization.
            * @param {string} format Report format ('pdf' or 'html')
            * @param {boolean} emailOnCompletion Whether to email the report upon successful generation
            * @param {string} email Email address to send the report to if emailOnCompletion is true,
            * defaults to the user's profile email if not specified
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        generateDRAdminReport(format?: string, emailOnCompletion?: boolean, email?: string): Promise<Task>;
        /**
            * Generate the ecs event history report for the given organization and time range.
            * @param {number} start Start date as timestamp
            * @param {number} end End date as timestamp
            * @param {string} format Report format ('pdf' or 'html')
            * @param {boolean} emailOnCompletion Whether to email the report upon successful generation
            * @param {string} email Email address to send the report to if emailOnCompletion is true,
            * defaults to the user's profile email if not specified
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        generateEcsEventHistoryReport(start?: number, end?: number, format?: string, emailOnCompletion?: boolean, email?: string): Promise<Task>;
        /**
            * Generate the firewall event history report for the given organization and time range.
            * @param {number} start Start date as timestamp
            * @param {number} end End date as timestamp
            * @param {string} format Report format ('pdf' or 'html')
            * @param {boolean} emailOnCompletion Whether to email the report upon successful generation
            * @param {string} email Email address to send the report to if emailOnCompletion is true,
            * defaults to the user's profile email if not specified
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        generateFirewallEventHistoryReport(start?: number, end?: number, format?: string, emailOnCompletion?: boolean, email?: string): Promise<Task>;
        /**
            * Generate the HIPAA report for the given organization and time range.
            * @param {number} start Start date as timestamp
            * @param {number} end End date as timestamp
            * @param {string} format Report format ('pdf' or 'html')
            * @param {boolean} emailOnCompletion Whether to email the report upon successful generation
            * @param {string} email Email address to send the report to if emailOnCompletion is true,
            * defaults to the user's profile email if not specified
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        generateHipaaReport(start?: number, end?: number, format?: string, emailOnCompletion?: boolean, email?: string): Promise<Task>;
        /**
            * Generate the integrity event history report for the given organization and time range.
            * @param {number} start Start date as timestamp
            * @param {number} end End date as timestamp
            * @param {string} format Report format ('pdf' or 'html')
            * @param {boolean} emailOnCompletion Whether to email the report upon successful generation
            * @param {string} email Email address to send the report to if emailOnCompletion is true,
            * defaults to the user's profile email if not specified
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        generateIntegrityEventHistoryReport(start?: number, end?: number, format?: string, emailOnCompletion?: boolean, email?: string): Promise<Task>;
        /**
            * Generate the log inspection report for the given organization and time range.
            * @param {number} start Start date as timestamp
            * @param {number} end End date as timestamp
            * @param {string} format Report format ('pdf' or 'html')
            * @param {boolean} emailOnCompletion Whether to email the report upon successful generation
            * @param {string} email Email address to send the report to if emailOnCompletion is true,
            * defaults to the user's profile email if not specified
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        generateLogInspectionReport(start?: number, end?: number, format?: string, emailOnCompletion?: boolean, email?: string): Promise<Task>;
        /**
            * Generate the login event history report for the given organization and time range.
            * @param {number} start Start date as timestamp
            * @param {number} end End date as timestamp
            * @param {string} format Report format ('pdf' or 'html')
            * @param {boolean} emailOnCompletion Whether to email the report upon successful generation
            * @param {string} email Email address to send the report to if emailOnCompletion is true,
            * defaults to the user's profile email if not specified
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        generateLoginEventHistoryReport(start?: number, end?: number, format?: string, emailOnCompletion?: boolean, email?: string): Promise<Task>;
        /**
            * Generate the support request history report for the given organization and time range.
            * @param {number} start Start date as timestamp
            * @param {number} end End date as timestamp
            * @param {string} format Report format ('pdf' or 'html')
            * @param {boolean} emailOnCompletion Whether to email the report upon successful generation
            * @param {string} email Email address to send the report to if emailOnCompletion is true,
            * defaults to the user's profile email if not specified
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        generateSupportRequestReport(start?: number, end?: number, format?: string, emailOnCompletion?: boolean, email?: string): Promise<Task>;
        /**
            * Generate the VM encryption report for the given organization.
            * @param {string} format Report format ('pdf' or 'html')
            * @param {boolean} emailOnCompletion Whether to email the report upon successful generation
            * @param {string} email 3mail address to send the report to if emailOnCompletion is true,
            * defaults to the user's profile email if not specified
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        generateVmEncryptionReport(format?: string, emailOnCompletion?: boolean, email?: string): Promise<Task>;
        /**
            * Generate the vm inventory report for a given organization.
            * @param {boolean} emailOnCompletion Whether to email the report upon successful generation
            * @param {string} email 3mail address to send the report to if emailOnCompletion is true,
            * defaults to the user's profile email if not specified
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        generateVmInventoryReport(emailOnCompletion?: boolean, email?: string): Promise<Task>;
        /**
            * Generate the vulnerability report for the given organization.
            * @param {string} format Report format ('pdf' or 'html')
            * @param {boolean} emailOnCompletion Whether to email the report upon successful generation
            * @param {string} email email address to send the report to if emailOnCompletion is true,
            * defaults to the user's profile email if not specified
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        generateVulnerabilityReport(format?: string, emailOnCompletion?: boolean, email?: string): Promise<Task>;
        /**
            * Generate the web reputation event history report for the given organization and time range.
            * @param {number} start Start date as timestamp
            * @param {number} end End date as timestamp
            * @param {string} format Report format ('pdf' or 'html')
            * @param {boolean} emailOnCompletion Whether to email the report upon successful generation
            * @param {string} email Email address to send the report to if emailOnCompletion is true,
            * defaults to the user's profile email if not specified
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        generateWebReputationEventHistoryReport(start?: number, end?: number, format?: string, emailOnCompletion?: boolean, email?: string): Promise<Task>;
        /**
            * Get the number of events for the given organization, date range, and report type.
            * @param {string} report Type Type of report to filter on
            * @param {number} start Start date (defaults to yesterday)
            * @param {number} end End date (defaults to today)
            * @returns {Promise<number>} promise Promise that resolves with the reports count
            */
        getReportsCount(reportType?: string, start?: number, end?: number): Promise<number>;
        /**
            * Gets all disaster recovery runbooks in the org.
            * @returns {Promise<Array<DisasterRecoveryRunbook>>} a promise that resolves with all runbooks in the org
            */
        getRecoveryRunbooks(): Promise<Array<DisasterRecoveryRunbook>>;
        /**
            * Creates a new disaster recovery runbook.
            * @param {DisasterRecoveryRunbookCreateRequest} spec the new runbook specification
            * @returns {Promise<DisasterRecoveryRunbook>} a promise that resolves with the new runbook
            */
        createRecoveryRunbook(spec: DisasterRecoveryRunbookCreateRequest): Promise<DisasterRecoveryRunbook>;
        /**
            * Gets all vApp templates within the org.
            * @returns {Promise<Array<VappTemplate>>} a promise that resolves with the list of vapp templates
            */
        getVappTemplates(): Promise<Array<VappTemplate>>;
        /**
            * Get all external networks that are associated with the specified organization.
            * @returns {Promise<Array<ExternalNetwork>>} promise Promise that resolves with an Array of ExternalNetworks
            */
        getExternalNetworks(): Promise<Array<ExternalNetwork>>;
        /**
            * Launches a new Nessus scan.
            * @param {number} scanTemplateId the ID of the template for the scan
            * @returns {Promise<NessusLaunch>} a promise that resolves with the launch result
            */
        launchNessusScan(scanTemplateId: number): Promise<NessusLaunch>;
        /**
            * Pauses a Nessus scan.
            * @param {number} scanTemplateId the ID of the template that the scan is derived from
            * @returns {Promise<any>} a promise that resolves when the operation completes
            */
        pauseNessusScan(scanTemplateId: number): Promise<any>;
        /**
            * Stops a Nessus scan.
            * @param {number} scanTemplateId the ID of the template that the scan is derived from
            * @returns {Promise<any>} a promise that resolves when the operation completes.
            */
        stopNessusScan(scanTemplateId: number): Promise<any>;
        /**
            * Resumes a Nessus scan.
            * @param {number} scanTemplateId the ID of the template that the scan is derived from.
            * @returns {Promise<any>} a promise that resolves when the operation completes
            */
        resumeNessusScan(scanTemplateId: number): Promise<any>;
        /**
            * Gets all Nessus scan templates for the org.
            * @param {number} offset paging offset
            * @param {number} limit paging limit
            * @returns {Promise<Array<NessusScan>>} a promise that resolves with the list of Nessus scans
            */
        getNessusScanTemplates(offset?: number, limit?: number): Promise<Array<NessusScan>>;
        /**
            * Gets the Nessus scan results for a specified template.
            * @param {number} scanTemplateId the ID of the template
            * @param {number} offset the paging offset
            * @param {number} limit the paging limit
            * @returns {Promise<Array<NessusScan>>} a promise that resolves with the list of nessus scan results
            */
        getNessusScanResultsForTemplate(scanTemplateId: number, offset?: number, limit?: number): Promise<Array<NessusScan>>;
        /**
            * Get Nessus scan result.
            * @param {string} scanResultUuid the UUID of the result to retrieve
            * @returns {Promise<NessusScanDetails>} a promise that resolves with the nessus sacan details
            */
        getNessusScanResult(scanResultUuid: string): Promise<NessusScanDetails>;
        /**
            * Update a nessus scan template.
            * @param {number} scanTemplateId the template ID
            * @param {NessusScanUpdateRequest} spec the udpate spec
            * @returns {Promise<NessusScanUpdate>} a promise that resolves with the scan update result
            */
        updateNessusScanTemplate(scanTemplateId: number, spec: NessusScanUpdateRequest): Promise<NessusScanUpdate>;
        /**
            * Update Nessus scan opt out preferences.
            * @param {NessusScanOptOutCreateRequest} request opt out request
            * @returns {Promise<NessusScanOptOut>} a promise that resolves with the opt out details
            */
        updateNessusScanOptOutPreferences(request: NessusScanOptOutCreateRequest): Promise<NessusScanOptOut>;
        /**
            * Gets Nessus scan opt out preferences.
            * @returns {Promise<NessusScanOptOut>} a promise that resolves with the orgs Nessus scan opt out details
            */
        getNessusScanOptOutPreferences(): Promise<NessusScanOptOut>;
        /**
            * Get all VPGs that belong to the org.
            * @param {Array<VpgSubEntityRequest>} expand the list of expansions to include in the response
            * @returns {Promise<Array<ExpandedVpg>>} a promise that resolves with the vpgs
            */
        getVpgs(expand?: Array<VpgSubEntityRequest>): Promise<Array<ExpandedVpg>>;
        /**
            * Creates a catalog.
            * @param {CatalogCreateRequest} request the create catalog request.
            * @returns {Promise<Task>} a promise that resolves with a task
            */
        createCatalog(request: CatalogCreateRequest): Promise<Task>;
        /**
            * Indicates whether the org is an advanced security org.
            * @returns {Promise<isAdvancedSecurityOrg>} a promise that resolves with the result indicating whether this is an
            * advanced security org
            */
        isAdvancedSecurityOrg(): Promise<IsComplianceOrg>;
        /**
            * Gets the billing currency code for this org.
            * @returns {Promise<OrgCurrencyCode>} a promise that resolves with the org's currency code.
            */
        getBillingCurrencyCode(): Promise<OrgCurrencyCode>;
        /**
            * Gets the org's public IP assignments.
            * @returns {Promise<Array<PublicIpAssignment>>} a promise that resolves with the org's public ip assignments
            */
        getPublicIpAssignments(): Promise<Array<PublicIpAssignment>>;
        /**
            * Get a list of series detailing the hourly cost over an invoice period for
            * all vDCs in a given Organization.
            * @param {number} year the year
            * @param {number} month the month in range 1-12
            * @param {Array<string>} additionalFields additional bill fields that should be included in the series
            * @returns {Promise<Array<BillingSampleSerie>>} promise Promise that resolves with a list of series of samples
            * detailing hourly vDC total cost by hour for the invoice period
            */
        getVdcCostOverInvoicePeriodSeries(year?: number, month?: number, additionalFields?: Array<string>): Promise<Array<BillingSampleSerie>>;
        /**
            * Batch test failover for one or more VPGs within an org.
            * @param {BatchFailoverTestParamsRequest} params the batch failover test parameters
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        batchFailoverTest(params: BatchFailoverTestParamsRequest): Promise<Task>;
        /**
            * Initiates a batch live failover on one or more VPGs withing an org.
            * @param {BatchFailoverParamsRequest} params the batch failover parameters
            * @returns {Promise<Task>} promise promise that resolves with a Task
            */
        batchFailover(params: BatchFailoverParamsRequest): Promise<Task>;
        /**
            * Gets a vCD edge gateway usage summary, summarizing the total bandwidth used
            * for both inbound and outbound edge network traffic.
            *
            * If no start/end dates are provided it will default to the latest hour
            * range. If you pass a custom time range both start and end date must be
            * passed together
            * @param {string} type Type
            * @param {number} start Start date
            * @param {number} end End date
            * @returns {Promise<Array<NetworkPerfSampleSerie>>}
            */
        getEdgeNetworkUsageSummary(type?: string, start?: number, end?: number): Promise<Array<NetworkPerfSampleSerie>>;
        /**
            * Gets usage data for a VCD edge gateway. Returns a time series showing the
            * average inbound and outbound network thoughput in KBps.
            * @param {string} type Type
            * @param {number} start Start date
            * @param {number} end End date
            * @returns {Promise<Array<NetworkPerfSampleSerie>>}
            */
        getEdgeNetworkUsageOverTime(type?: string, start?: number, end?: number): Promise<Array<NetworkPerfSampleSerie>>;
        /**
            * Get the network usage for the organization
            * @param {string} type Type
            * @param {number} start Start Date
            * @param {number} end End Date
            * @returns {Promise<Array<NetworkPerfSampleSerie>>}
            */
        getOrgBandwidthUsage(type?: string, start?: number, end?: number): Promise<Array<NetworkPerfSampleSerie>>;
        /**
            * Get the network usage summary for the organization
            * @param {string} type Type
            * @param {number} start Start Date
            * @param {number} end End Date
            * @returns {Promise<Array<NetworkPerfSampleSerie>>}
            */
        getBandwidthSummation(type?: string, start?: number, end?: number): Promise<Array<NetworkPerfSampleSerie>>;
        /**
            * Gets the bandwidth usage information for the organization.
            * @param {number} month the month in range 1-12
            * @param {number} year the year
            * @returns {Promise<BandwidthUsageSummary>} a promise that resolves with the bandwidth usage information
            */
        getBandwidthUsage(month?: number, year?: number): Promise<BandwidthUsageSummary>;
        /**
            * Retrieve a CSV report email with all event history for a given Org.
            * @returns {Promise<void>} there is no response object.
            */
        emailEventHistory(email: string): Promise<void>;
        /**
            * Retrieve the VCC Failover Plans within this org.
            */
        getVccFailoverPlans(): Promise<Array<VCCFailoverPlan>>;
        /**
            * Retrieve the org's VPG protection summary.
            */
        getVpgsProtectionSummary(): Promise<VpgsProtectionInfo>;
        /**
            * Retrieve VDI teams that are configured within the org.
            *
            * @return {Promise<Array<VdiTeam>>} a promise that resolves with the array of VDI teams
            */
        listVdiTeams(): Promise<Array<VdiTeam>>;
        /**
            * Retrieve a VDI team by UUID.
            *
            * @param {string} uuid the uuid of the VDI team
            * @return {Promise<VdiTeam>} a promise that resolves with the VDI team
            */
        getVdiTeam(uuid: string): Promise<VdiTeam>;
        /**
            * Delete a VDI team.
            *
            * @param {string} uuid the UUID of the team to delete
            * @return {Promise} that resolves when the delete operation completes successfully
            */
        deleteVdiTeam(uuid: string): Promise<unknown>;
        /**
            * Update a VDI team.
            *
            * @param {string} uuid the UUID of the VDI team to update
            * @param {VdiTeamUpdateRequest} the update request params
            * @return {Promise<VdiTeam>} a promise that resolves with the updated VDI team
            */
        updateVdiTeam(uuid: string, update: VdiTeamUpdateRequest): Promise<VdiTeam>;
        /**
            * Create a VDI team.
            *
            * @param {VdiTeamUpdateRequest} teamData the VDI team creation request params
            * @return {Promise<VdiTeam>} a promise that resolves with the team details
            */
        createVdiTeam(teamData: VdiTeamUpdateRequest): Promise<VdiTeam>;
        /**
            * Retrieve VDI users that are configured within the org.
            *
            * @return {Promise<Array<VdiUser>>} a promise that resolves with the array of VDI users
            */
        listVdiUsers(): Promise<Array<VdiUser>>;
        /**
            * Retrieve a VDI user by UUID.
            *
            * @param {string} uuid the UUID of the VDI user to retrieve
            * @return {Promise<VdiUser>} a promise that resolves with the VDI user
            */
        getVdiUser(uuid: string): Promise<VdiUser>;
        /**
            * Delete a VDI user.
            *
            * @param {string} uuid the UUID of the VDI user to delete
            * @return {Promise} that resolves when the operation completes successfully
            */
        deleteVdiUser(uuid: string): Promise<unknown>;
        /**
            * Update a VDI user.
            *
            * @param {string} uuid the UUID of the VDI user to update
            * @param {VdiUserUpdateRequest} the update request params
            * @return {Promise<VdiUser>} a promise that resolves with the VDI user
            */
        updateVdiUser(uuid: string, update: VdiUserUpdateRequest): Promise<VdiUser>;
        /**
            * Create a VDI user.
            *
            * @param {VdiUserUpdateRequest} userData the new user params
            * @return {Promise<VdiUser>} a promise that resolves with the VDI user
            */
        createVdiUser(userData: VdiUserUpdateRequest): Promise<VdiUser>;
        /**
            * Retrieve VDI automation groups that are configured within the org.
            *
            * @return {Promise<Array<VdiAutomationGroup>>} a promise that resolves with the array of VDI automation groups
            */
        listVdiAutomationGroups(): Promise<Array<VdiAutomationGroup>>;
        /**
            * Retrieve a VDI automation group.
            *
            * @param {string} automationGroupUuid the UUID of the VDI automation group to retrieve
            * @return {Promise<VdiAutomationGroup>} a promise that resolves with the VDI automation group
            */
        getVdiAutomationGroup(automationGroupUuid: string): Promise<VdiAutomationGroup>;
        /**
            * Delete a VDI automation group.
            *
            * @param {string} uuid the UUID of the automation group to delete
            * @return {Promise} a promise that resolves when the delete operation completes successfully
            */
        deleteVdiAutomationGroup(automationGroupUuid: string): Promise<unknown>;
        /**
            * Update a VDI automation group.
            *
            * @param {string} automationGroupUuid the UUID of the VDI automation group
            * @param {VdiAutomationGroupUpdateRequest} the automation group update params
            * @return {Promise<VdiAutomationGroup>} a promise that resolves with the updated VDI automation group
            */
        updateVdiAutomationGroup(automationGroupUuid: string, update: VdiAutomationGroupUpdateRequest): Promise<VdiAutomationGroup>;
        /**
            * Create a VDI automation group.
            *
            * @param {VdiAutomationGroupUpdateRequest} the new VDI automation group params
            * @return {Promise<VdiAutomationGroup>} a promise that resolves with the new VDI automation group
            */
        createVdiAutomationGroup(createParams: VdiAutomationGroupUpdateRequest): Promise<VdiAutomationGroup>;
        /**
            * Deploy a VDI automation group.
            *
            * @param {string} automationGroupUuid the UUID of the VDI automation group to deploy
            * @return {Promise} a promise that resolves when the deployment request has successfully been queued
            */
        deployVdiAutomationGroup(automationGroupUuid: string, deployParams: VdiAutomationDeploymentRequest): Promise<unknown>;
        /**
            * Retrieve list of VDI automation deployments.
            *
            * @param {string} automationGroupUuid the UUID of the automation group to list deployments for
            * @return {Promise<Array<VdiAutomationDeployment>>} a promise that resolves with the array of VDI automation
            * deployments
            */
        listVdiAutomationDeployments(automationGroupUuid: string): Promise<Array<VdiAutomationDeployment>>;
        /**
            * Get a VDI automation deployment.
            *
            * @param {string} automationGroupUuid the UUID of the VDI automation group
            * @param {string} deploymentUuid the UUID of the VDI automation deployment
            * @return {Promise<VdiAutomationDeployment>} a promise that resolves with the VDI automation deployment
            */
        getVdiAutomationDeployment(automationGroupUuid: string, deploymentUuid: string): Promise<VdiAutomationDeployment>;
        /**
            * Destroy a VDI automation deployment.
            *
            * @param {string} automationGroupUuid the UUID of the automation group
            * @param {string} deploymentUuid the UUID of the VDI deployment
            * @return {Promise} a promise that resolves when the deployment has been queued for tear down
            */
        destroyVdiAutomationDeployment(automationGroupUuid: string, deploymentUuid: string): Promise<unknown>;
        /**
            * Destroy all VDI automation deployments that are associated with a particular automation group.
            *
            * @param {string} automationGroupUuid the UUID of the automation group
            * @return {Promise} a promise that resolves when all deployments have successfully been queued for tear down
            */
        destroyAllVdiAutomationDeployments(automationGroupUuid: string): Promise<unknown>;
        /**
            * Retrieve the org VDI automation deployment summary.
            *
            * @return {Promise<VdiOrgDeploymentSummary>} a promise that resolves with the org VDI deployment summary
            */
        getOrgVdiDeploymentSummary(): Promise<VdiOrgDeploymentSummary>;
        /**
            * Retrieve a VDI automation group deployment summary.
            *
            * @param {string} automationGroupUuid the UUID of the VDI automation group
            * @return {Promise<VdiAutomationGroupDeploymentSummary>} a promise that resolves with the org deployment summary
            */
        getVdiAutomationGroupDeploymentSummary(automationGroupUuid: string): Promise<VdiAutomationGroupDeploymentSummary>;
        /**
            * Whether or not this org has legacy billing.
            *
            * @return {Promise<BillingLegacyResponse>} a promise that resolves with the billing legacy response.
            */
        hasLegacyBilling(): Promise<BillingLegacyResponse>;
        /**
            * Gets the Org's integrated backup status.
            * @returns {Promise<OrgIntegratedBackupStatus>}
            */
        getIntegratedBackupStatus(): Promise<OrgIntegratedBackupStatus>;
        /**
            * List the existing backup groups that are configured in a specified
            * organization.
            *
            * @param {boolean} includeDeleted Whether to include deleted backup groups. Default is false. (Optional)
            * @param {boolean} includeSummaryStats Default is false. (Optional)
            * @param {boolean} includeLastRun Default is false. (Optional)
            * @param {boolean} includeBackupPolicy Default is false. (Optional)
            * @return {Promise<Array<BackupGroup>>}
            */
        listBackupGroups(includeDeleted?: boolean, includeSummaryStats?: boolean, includeLastRun?: boolean, includeBackupPolicy?: boolean): Promise<Array<BackupGroup>>;
        /**
            * Gets backup group summary stats for the Org.
            * Stat time-range defaults to the past 24 hours.
            * Both startTimeMillis and endTimeMillis params are required if one is used.
            *
            * @param {number} startTimeMillis Default is 24 hours ago. (Optional)
            * @param {number} endTimeMillis Default is now. (Optional)
            *
            * @return {Promise<OrgGroupSummaryStats>}
            */
        getBackupGroupSummaryStats(startTimeMillis?: number, endTimeMillis?: number): Promise<OrgBackupSummaryStats>;
        /**
            * List the existing backup policies that are configured in an organization.
            *
            * @param {boolean} includeVdcScopedPolicies
            * @return {Promise<Array<BackupPolicy>>}
            */
        listBackupPolicies(includeVdcScopedPolicies?: boolean): Promise<Array<BackupPolicy>>;
        /**
            * Get details of an individual org-scoped backup policy.
            *
            * @param {string} backupPolicyUid
            * @return {Promise<BackupPolicy>}
            */
        getBackupPolicy(backupPolicyUid: string): Promise<BackupPolicy>;
        /**
            * Create a new org-scoped backup policy.
            *
            * @param {BackupPolicyUpdateRequest} creationRequest
            * @return {Promise<BackupPolicy>}
            */
        createBackupPolicy(creationRequest: BackupPolicyUpdateRequest): Promise<BackupPolicy>;
        /**
            * Update a backup policy.
            *
            * @param {string} backupPolicyUid
            * @param {BackupPolicyUpdateRequest} updateRequest
            * @return {Promise<BackupPolicy>}
            */
        updateBackupPolicy(backupPolicyUid: string, updateRequest: BackupPolicyUpdateRequest): Promise<BackupPolicy>;
        /**
            * Gets the org's backup status.
            * @return {Promise<OrgBackupStatus>}
            */
        getBackupStatus(): Promise<OrgBackupStatus>;
        /**
            * Delete a backup policy.
            *
            * @param {string} backupPolicyUid
            * @return {Promise<unknown>}
            */
        deleteBackupPolicy(backupPolicyUid: string): Promise<unknown>;
        /**
            * Returns aggregated samples for VPGs in an org given a performance serie and
            * time range. The samples returned are dynamic (5 minute samples for range less than a
            * day, hourly for range more than a day, and daily for range more than a month).
            * @param {string} group
            * @param {string} name
            * @param {string} type
            * @param {number} [start]
            * @param {number} [end]
            * @returns {Promise<PerfSampleSeries>} performance sample series
            */
        getOrgPerfFor(group: string, name: string, type: string, start?: number, end?: number): Promise<PerfSamplesSeries>;
}

/**
    * Public IP Assignment.
    */
export class PublicIpAssignment {
        constructor(_json: PublicIpAssignmentJson);
        /**
            * Get type.
            * @returns {PublicAssignmentType}
            */
        get type(): PublicAssignmentType;
        /**
            * Get ip.
            * @returns {string}
            */
        get ip(): string;
        /**
            * Get entity uuid.
            * @returns {string}
            */
        get entityUuid(): string;
        /**
            * Get entity name.
            * @returns {string}
            */
        get entityName(): string;
        /**
            * Get external network uuid.
            * @returns {string}
            */
        get externalNetworkUuid(): string;
        /**
            * Get external network name.
            * @returns {string}
            */
        get externalNetworkName(): string;
        /**
            * Get the json representation of this class.
            * @returns {PublicIpAssignmentJson}
            */
        get json(): PublicIpAssignmentJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export interface AntimalwareOverTimeJson {
    org_uuid: string;
    type: SerieType;
    samples: Array<AntimalwareOverTimeSampleJson>;
}
export interface AntimalwareOverTimeSampleJson {
    time: number;
    total_hosts_scanned: number;
    hosts_with_findings: number;
}

export type ReportType = 'CUSTOM' | 'BASIC' | 'DETAILED';
export interface BillingReportRequestJson {
    custom_columns: {
        [key: string]: string;
    };
    rows: Array<string>;
    date: number;
    email: string;
    filename: string;
    type: ReportType;
}

export interface ComplianceOverTimeJson {
    org_uuid: string;
    type: SerieType;
    samples: Array<ComplianceOverTimeSampleJson>;
}
export interface ComplianceOverTimeSampleJson {
    time: number;
    total_risks: number;
}

export interface FirewallOverTimeJson {
    org_uuid: string;
    type: SerieType;
    samples: Array<FirewallOverTimeSampleJson>;
}
export interface FirewallOverTimeSampleJson {
    time: number;
    total_drops: number;
    total_allows: number;
    total_log_only: number;
}

export interface LogInspectionOverTimeJson {
    org_uuid: string;
    type: SerieType;
    samples: Array<LogInspectionOverTimeSampleJson>;
}
export interface LogInspectionOverTimeSampleJson {
    time: number;
    num_info: number;
    num_low: number;
    num_medium: number;
    num_high: number;
    num_critical: number;
}

export interface ReportWithContentJson {
    uuid: string;
    entity_uuid: string;
    report_type: ReportTypeJson;
    file_type: ReportFormat;
    created: number;
    json_content: string;
    has_content: boolean;
}

export interface ReportWithSummaryJson {
    uuid: string;
    entity_uuid: string;
    report_type: ReportTypeJson;
    file_type: ReportFormat;
    created: number;
    summary: string;
    has_summary: boolean;
}

export type SerieType = 'VULNERABILITY' | 'ANTI_MALWARE' | 'LOG_INSPECTION' | 'FIREWALL';

export interface VulnerabilityOverTimeJson {
    org_uuid: string;
    type: SerieType;
    samples: Array<VulnerabilityOverTimeSampleJson>;
}
export interface VulnerabilityOverTimeSampleJson {
    time: number;
    num_info: number;
    num_low: number;
    num_medium: number;
    num_high: number;
    num_critical: number;
}

export class AntimalwareOverTimeSample {
        constructor(_json: AntimalwareOverTimeSampleJson);
        /**
            * Get time.
            * @returns {number}
            */
        get time(): number;
        /**
            * Get total hosts scanned.
            * @returns {number}
            */
        get totalHostsScanned(): number;
        /**
            * Get hosts with findings.
            * @returns {number}
            */
        get hostsWithFindings(): number;
        /**
            * Get the json representation of this class.
            * @returns {AntimalwareOverTimeSampleJson}
            */
        get json(): AntimalwareOverTimeSampleJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class AntimalwareOverTime {
        constructor(_json: AntimalwareOverTimeJson);
        /**
            * Get org uuid.
            * @returns {string}
            */
        get orgUuid(): string;
        /**
            * Get type.
            * @returns {SerieType}
            */
        get type(): SerieType;
        /**
            * Get samples.
            * @returns {Array<AntimalwareOverTimeSample>}
            */
        get samples(): Array<AntimalwareOverTimeSample>;
        /**
            * Get the json representation of this class.
            * @returns {AntimalwareOverTimeJson}
            */
        get json(): AntimalwareOverTimeJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class BillingReportRequest {
        constructor(billingReportRequest: BillingReportRequest);
        constructor(billingReportRequestJson: BillingReportRequestJson);
        constructor(customColumns: {
                [key: string]: string;
        }, rows: Array<string>, date: number, email: string, filename: string, type: ReportType);
        /**
            * Get custom columns.
            * @returns {{ [key: string]: string }}
            */
        get customColumns(): {
                [key: string]: string;
        };
        /**
            * Get rows.
            * @returns {Array<string>}
            */
        get rows(): Array<string>;
        /**
            * Get date.
            * @returns {number}
            */
        get date(): number;
        /**
            * Get email.
            * @returns {string}
            */
        get email(): string;
        /**
            * Get filename.
            * @returns {string}
            */
        get filename(): string;
        /**
            * Get type.
            * @returns {ReportType}
            */
        get type(): ReportType;
        /**
            * Get the json representation of this class.
            * @returns {BillingReportRequestJson}
            */
        get json(): BillingReportRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class ComplianceOverTimeSample {
        constructor(_json: ComplianceOverTimeSampleJson);
        /**
            * Get time.
            * @returns {number}
            */
        get time(): number;
        /**
            * Get total risks.
            * @returns {number}
            */
        get totalRisks(): number;
        /**
            * Get the json representation of this class.
            * @returns {ComplianceOverTimeSampleJson}
            */
        get json(): ComplianceOverTimeSampleJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class ComplianceOverTime {
        constructor(_json: ComplianceOverTimeJson);
        /**
            * Get org uuid.
            * @returns {string}
            */
        get orgUuid(): string;
        /**
            * Get type.
            * @returns {SerieType}
            */
        get type(): SerieType;
        /**
            * Get samples.
            * @returns {Array<ComplianceOverTimeSample>}
            */
        get samples(): Array<ComplianceOverTimeSample>;
        /**
            * Get the json representation of this class.
            * @returns {ComplianceOverTimeJson}
            */
        get json(): ComplianceOverTimeJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class FirewallOverTimeSample {
        constructor(_json: FirewallOverTimeSampleJson);
        /**
            * Get time.
            * @returns {number}
            */
        get time(): number;
        /**
            * Get total drops.
            * @returns {number}
            */
        get totalDrops(): number;
        /**
            * Get total allows.
            * @returns {number}
            */
        get totalAllows(): number;
        /**
            * Get total log only.
            * @returns {number}
            */
        get totalLogOnly(): number;
        /**
            * Get the json representation of this class.
            * @returns {FirewallOverTimeSampleJson}
            */
        get json(): FirewallOverTimeSampleJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class FirewallOverTime {
        constructor(_json: FirewallOverTimeJson);
        /**
            * Get org uuid.
            * @returns {string}
            */
        get orgUuid(): string;
        /**
            * Get type.
            * @returns {SerieType}
            */
        get type(): SerieType;
        /**
            * Get samples.
            * @returns {Array<FirewallOverTimeSample>}
            */
        get samples(): Array<FirewallOverTimeSample>;
        /**
            * Get the json representation of this class.
            * @returns {FirewallOverTimeJson}
            */
        get json(): FirewallOverTimeJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class LogInspectionOverTimeSample {
        constructor(_json: LogInspectionOverTimeSampleJson);
        /**
            * Get time.
            * @returns {number}
            */
        get time(): number;
        /**
            * Get num info.
            * @returns {number}
            */
        get numInfo(): number;
        /**
            * Get num low.
            * @returns {number}
            */
        get numLow(): number;
        /**
            * Get num medium.
            * @returns {number}
            */
        get numMedium(): number;
        /**
            * Get num high.
            * @returns {number}
            */
        get numHigh(): number;
        /**
            * Get num critical.
            * @returns {number}
            */
        get numCritical(): number;
        /**
            * Get the json representation of this class.
            * @returns {LogInspectionOverTimeSampleJson}
            */
        get json(): LogInspectionOverTimeSampleJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class LogInspectionOverTime {
        constructor(_json: LogInspectionOverTimeJson);
        /**
            * Get org uuid.
            * @returns {string}
            */
        get orgUuid(): string;
        /**
            * Get type.
            * @returns {SerieType}
            */
        get type(): SerieType;
        /**
            * Get samples.
            * @returns {Array<LogInspectionOverTimeSample>}
            */
        get samples(): Array<LogInspectionOverTimeSample>;
        /**
            * Get the json representation of this class.
            * @returns {LogInspectionOverTimeJson}
            */
        get json(): LogInspectionOverTimeJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class ReportWithContent {
        constructor(_json: ReportWithContentJson);
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get entity uuid.
            * @returns {string}
            */
        get entityUuid(): string;
        /**
            * Get report type.
            * @returns {ReportTypeJson}
            */
        get reportType(): ReportTypeJson;
        /**
            * Get file type.
            * @returns {ReportFormat}
            */
        get fileType(): ReportFormat;
        /**
            * Get created.
            * @returns {number}
            */
        get created(): number;
        /**
            * Get json content.
            * @returns {string}
            */
        get jsonContent(): string;
        /**
            * Get has content.
            * @returns {boolean}
            */
        get hasContent(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {ReportWithContentJson}
            */
        get json(): ReportWithContentJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class ReportWithSummary {
        constructor(_json: ReportWithSummaryJson);
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get entity uuid.
            * @returns {string}
            */
        get entityUuid(): string;
        /**
            * Get report type.
            * @returns {ReportTypeJson}
            */
        get reportType(): ReportTypeJson;
        /**
            * Get file type.
            * @returns {ReportFormat}
            */
        get fileType(): ReportFormat;
        /**
            * Get created.
            * @returns {number}
            */
        get created(): number;
        /**
            * Get summary.
            * @returns {string}
            */
        get summary(): string;
        /**
            * Get has summary.
            * @returns {boolean}
            */
        get hasSummary(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {ReportWithSummaryJson}
            */
        get json(): ReportWithSummaryJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VulnerabilityOverTimeSample {
        constructor(_json: VulnerabilityOverTimeSampleJson);
        /**
            * Get time.
            * @returns {number}
            */
        get time(): number;
        /**
            * Get num info.
            * @returns {number}
            */
        get numInfo(): number;
        /**
            * Get num low.
            * @returns {number}
            */
        get numLow(): number;
        /**
            * Get num medium.
            * @returns {number}
            */
        get numMedium(): number;
        /**
            * Get num high.
            * @returns {number}
            */
        get numHigh(): number;
        /**
            * Get num critical.
            * @returns {number}
            */
        get numCritical(): number;
        /**
            * Get the json representation of this class.
            * @returns {VulnerabilityOverTimeSampleJson}
            */
        get json(): VulnerabilityOverTimeSampleJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VulnerabilityOverTime {
        constructor(_json: VulnerabilityOverTimeJson);
        /**
            * Get org uuid.
            * @returns {string}
            */
        get orgUuid(): string;
        /**
            * Get type.
            * @returns {SerieType}
            */
        get type(): SerieType;
        /**
            * Get samples.
            * @returns {Array<VulnerabilityOverTimeSample>}
            */
        get samples(): Array<VulnerabilityOverTimeSample>;
        /**
            * Get the json representation of this class.
            * @returns {VulnerabilityOverTimeJson}
            */
        get json(): VulnerabilityOverTimeJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Org VPG Protection Info.
    */
export class VpgsProtectionInfo {
        constructor(_json: VpgsProtectionInfoJson);
        /**
            * Get total replicated vms.
            * @returns {number}
            */
        get totalReplicatedVms(): number;
        /**
            * Get total unreplicated vms.
            * @returns {number}
            */
        get totalUnreplicatedVms(): number;
        /**
            * Get the json representation of this class.
            * @returns {VpgsProtectionInfoJson}
            */
        get json(): VpgsProtectionInfoJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Interface for PushChannel.
    */
export interface IPushChannel {
        getObservable(): Observable<Event | Task>;
}
/**
    * PushChannel is an abstraction over a websocket connection that provides an easy way to observe updates for events and
    * tasks within the authenticated user's environment. Channels can be scoped to a single company or to all companies
    * that the authenticated user has access to. You must close the channel when you've finished using it in order to close
    * and clean up the underlying websocket.
    */
export class PushChannel implements IPushChannel {
        static open(companyId?: string): PushChannel;
        /**
            * Gets an observable for push updates. Updates will be emitted for all entities that the authenticated user has
            * access to.
            * @returns {Observable<Event | Task>} push update observable
            */
        getObservable(): Observable<Event | Task>;
        /**
            * Closes the underlying websocket connection. This method should always be called when the channel is no longer in
            * use.
            */
        close(): void;
}

export interface GoogleIdentityProviderConfigRequestJson {
    enforce_sso: boolean;
    enabled: boolean;
    client_id: string;
    client_secret: string;
}

export interface IdentityProviderJson {
    enforce_sso: boolean;
    enabled: boolean;
    type: IdentityProviderType;
}

export enum IdentityProviderTypeEnum {
    SAML = "SAML",
    OIDC = "OIDC"
}
export type IdentityProviderType = keyof typeof IdentityProviderTypeEnum;

export enum OIDCClientAuthEnum {
    CLIENT_SECRET_POST = "CLIENT_SECRET_POST",
    CLIENT_SECRET_BASIC = "CLIENT_SECRET_BASIC",
    CLIENT_SECRET_JWT = "CLIENT_SECRET_JWT",
    PRIVATE_KEY_JWT = "PRIVATE_KEY_JWT"
}
export type OIDCClientAuthType = keyof typeof OIDCClientAuthEnum;

export interface OIDCIdentityProviderConfigRequestJson {
    enforce_sso: boolean;
    enabled: boolean;
    authorization_url: string;
    token_url: string;
    client_id: string;
    client_secret: string;
    client_auth: OIDCClientAuthType;
    logout_url?: string;
    login_hint?: boolean;
    ui_locales?: boolean;
    user_info_url?: string;
    backchannel_supported?: boolean;
    disable_user_info?: boolean;
    issuer?: string;
    default_scope?: string;
    prompt?: OIDCPromptType;
    accepts_prompt_none_forward_from_client?: boolean;
    validate_signature?: boolean;
    use_jwks_url?: boolean;
    jwks_url?: string;
    public_key_signature_verifier_key?: string;
    public_key_signature_verifier_key_id?: string;
    allowed_clock_skew?: number;
    forward_parameters?: string;
}

export interface OIDCIdentityProviderJson extends IdentityProviderJson {
    enforce_sso: boolean;
    enabled: boolean;
    authorization_url: string;
    token_url: string;
    client_auth: OIDCClientAuthType;
    client_id: string;
    client_secret: string;
    logout_url: string;
    login_hint: boolean;
    ui_locales: boolean;
    user_info_url: string;
    backchannel_supported: boolean;
    disable_user_info: boolean;
    issuer: string;
    default_scope: string;
    prompt: OIDCPromptType;
    accepts_prompt_none_forward_from_client: boolean;
    validate_signature: boolean;
    use_jwks_url: boolean;
    jwks_url: string;
    public_key_signature_verifier_key: string;
    public_key_signature_verifier_key_id: string;
    allowed_clock_skew: number;
    forward_parameter: string;
    type: IdentityProviderType;
}

export enum OIDCPromptEnum {
    UNSPECIFIED = "unspecified",
    NONE = "none",
    CONSENT = "consent",
    LOGIN = "login",
    SELECT_ACCOUNT = "select_account"
}
export type OIDCPromptType = 'unspecified' | 'none' | 'consent' | 'login' | 'select_account';

export interface OktaIdentityProviderCreateRequestJson {
    enforce_sso: boolean;
    enabled: boolean;
    single_sign_on_service_url: string;
}

export interface SAMLIdentityProviderConfigRequestJson {
    enforce_sso: boolean;
    enabled: boolean;
    single_sign_on_service_url: string;
    single_logout_service_url?: string;
    name_id_policy_format?: SAMLNameIdPolicyFormat;
    principal_type?: SAMLPrincipalType;
    principal_attribute?: string;
    signature_algorithm?: SAMLSignatureAlgorithm;
    saml_xml_key_name_tranformer?: SAMLSignatureKeyName;
    backchannel_supported?: boolean;
    post_binding_response?: boolean;
    post_binding_authn_request?: boolean;
    post_binding_logout?: boolean;
    want_authn_requests_signed?: boolean;
    want_assertions_signed?: boolean;
    want_assertions_encrypted?: boolean;
    signing_certificate?: string;
    force_authn?: boolean;
    validate_signature?: boolean;
    allowed_clock_skew?: string;
}

export interface SAMLIdentityProviderJson extends IdentityProviderJson {
    enforce_sso: boolean;
    enabled: boolean;
    single_logout_service_url: string;
    single_sign_on_service_url: string;
    name_id_policy_format: string;
    principal_type: string;
    principal_attribute: string;
    signature_algorithm: string;
    saml_xml_key_name_tranformer: string;
    backchannel_supported: boolean;
    post_binding_response: boolean;
    post_binding_authn_request: boolean;
    post_binding_logout: boolean;
    want_authn_requests_signed: boolean;
    want_assertions_signed: boolean;
    want_assertions_encrypted: boolean;
    signing_certificate: string;
    force_authn: boolean;
    validate_signature: boolean;
    allowed_clock_skew: string;
    type: IdentityProviderType;
}

export enum SAMLNameIdPolicyFormatEnum {
    PERSISTENT = "PERSISTENT",
    EMAIL_ADDRESS = "EMAIL_ADDRESS",
    KERBEROS = "KERBEROS",
    X509_SUBJECT_NAME = "X509_SUBJECT_NAME",
    WINDOWS_DOMAIN_QUALIFIED_NAME = "WINDOWS_DOMAIN_QUALIFIED_NAME",
    UNSPECIFIED = "UNSPECIFIED"
}
export type SAMLNameIdPolicyFormat = keyof typeof SAMLNameIdPolicyFormatEnum;

export enum SAMLPrincipalTypeEnum {
    ATTRIBUTE = "ATTRIBUTE",
    FRIENDLY_ATTRIBUTE = "FRIENDLY_ATTRIBUTE",
    SUBJECT = "SUBJECT"
}
export type SAMLPrincipalType = keyof typeof SAMLPrincipalTypeEnum;

export enum SAMLSignatureAlgorithmEnum {
    RSA_SHA1 = "RSA_SHA1",
    RSA_SHA256 = "RSA_SHA256",
    RSA_SHA512 = "RSA_SHA512",
    DSA_SHA1 = "DSA_SHA1"
}
export type SAMLSignatureAlgorithm = keyof typeof SAMLSignatureAlgorithmEnum;

export enum SAMLSignatureKeyNameEnum {
    NONE = "NONE",
    KEY_ID = "KEY_ID",
    CERT_SUBJECT = "CERT_SUBJECT"
}
export type SAMLSignatureKeyName = keyof typeof SAMLSignatureKeyNameEnum;

export interface SsoLoginErrorJson {
    invalid_username: string;
    date: Date;
}

export interface SsoUserCreateRequestJson {
    email: string;
    domain: string;
    fullname: string;
    role_uuid?: string;
    send_invitation: boolean;
}

export class GoogleIdentityProviderConfigRequest {
        constructor(immutableGoogleIdentityProviderConfigRequest: GoogleIdentityProviderConfigRequest);
        constructor(immutableGoogleIdentityProviderConfigRequestJson: GoogleIdentityProviderConfigRequestJson);
        /**
            * Get enforce sso.
            * @returns {boolean}
            */
        get enforceSso(): boolean;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get client id.
            * @returns {string}
            */
        get clientId(): string;
        /**
            * Get client secret.
            * @returns {string}
            */
        get clientSecret(): string;
        /**
            * Get the json representation of this class.
            * @returns {GoogleIdentityProviderConfigRequestJson}
            */
        get json(): GoogleIdentityProviderConfigRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class IdentityProvider {
        constructor(_jsonData: IdentityProviderJson);
        /**
            * Whether or not to force all users to sign in using SSO. If enabled
            * all users, even local AD users are forced to sign in through SSO.
            * @returns {boolean} enforceSso
            */
        get enforceSso(): boolean;
        /**
            * Whether or not Identity Provider is enabled
            * @returns {boolean} enabled
            */
        get enabled(): boolean;
        /**
            * Returns the identity provider type.
            * @returns {IdentityProviderType} type
            */
        get type(): IdentityProviderType;
        /**
            * Get the json representation of this class.
            * @returns {IdentityProviderJson}
            */
        get json(): IdentityProviderJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class OIDCIdentityProviderConfigRequest {
        constructor(OIDCIdentityProviderConfigRequest: OIDCIdentityProviderConfigRequest);
        constructor(OIDCIdentityProviderConfigRequestJson: OIDCIdentityProviderConfigRequestJson);
        /**
            * Get enforce SSO.
            * @returns {boolean}
            */
        get enforceSSO(): boolean;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get authorization url.
            * @returns {string}
            */
        get authorizationUrl(): string;
        /**
            * Get logout URL.
            * @returns {string | undefined}
            */
        get logoutUrl(): string | undefined;
        /**
            * Get login hint.
            * @returns {boolean | undefined}
            */
        get loginHint(): boolean | undefined;
        /**
            * Get ui locales.
            * @returns {boolean | undefined}
            */
        get uiLocales(): boolean | undefined;
        /**
            * Get token url.
            * @returns {string}
            */
        get tokenUrl(): string;
        /**
            * Get user info url.
            * @returns {string | undefined}
            */
        get userInfoUrl(): string | undefined;
        /**
            * Get backchannel supported.
            * @returns {boolean | undefined}
            */
        get backchannelSupported(): boolean | undefined;
        /**
            * Get disable user info.
            * @returns {boolean | undefined}
            */
        get disableUserInfo(): boolean | undefined;
        /**
            * Get client id.
            * @returns {string}
            */
        get clientId(): string;
        /**
            * Get client secret.
            * @returns {string}
            */
        get clientSecret(): string;
        /**
            * Get client auth.
            * @returns {OIDCClientAuthType}
            */
        get clientAuth(): OIDCClientAuthType;
        /**
            * Get issuer.
            * @returns {string | undefined}
            */
        get issuer(): string | undefined;
        /**
            * Get default scope.
            * @returns {string | undefined}
            */
        get defaultScope(): string | undefined;
        /**
            * Get prompt.
            * @returns {OIDCPromptType | undefined}
            */
        get prompt(): OIDCPromptType | undefined;
        /**
            * Get accepts prompt none forward from client.
            * @returns {boolean | undefined}
            */
        get acceptsPromptNoneForwardFromClient(): boolean | undefined;
        /**
            * Get validate signature.
            * @returns {boolean | undefined}
            */
        get validateSignature(): boolean | undefined;
        /**
            * Get use jwks url.
            * @returns {boolean | undefined}
            */
        get useJwksUrl(): boolean | undefined;
        /**
            * Get jwks url.
            * @returns {string | undefined}
            */
        get jwksUrl(): string | undefined;
        /**
            * Get public key signature verifier key.
            * @returns {string | undefined}
            */
        get publicKeySignatureVerifierKey(): string | undefined;
        /**
            * Get public key signature verifier key id.
            * @returns {string | undefined}
            */
        get publicKeySignatureVerifierKeyId(): string | undefined;
        /**
            * Get allowed clock skew.
            * @returns {number | undefined}
            */
        get allowedClockSkew(): number | undefined;
        /**
            * Get forward parameters.
            * @returns {string | undefined}
            */
        get forwardParameters(): string | undefined;
        /**
            * Get the json representation of this class.
            * @returns {OIDCIdentityProviderConfigRequestJson}
            */
        get json(): OIDCIdentityProviderConfigRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class OIDCIdentityProvider extends IdentityProvider {
        constructor(_json: OIDCIdentityProviderJson);
        /**
            * Get enforce sso.
            * @returns {boolean}
            */
        get enforceSso(): boolean;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get authorization url.
            * @returns {string}
            */
        get authorizationUrl(): string;
        /**
            * Get token url.
            * @returns {string}
            */
        get tokenUrl(): string;
        /**
            * Get client auth.
            * @returns {OIDCClientAuthType}
            */
        get clientAuth(): OIDCClientAuthType;
        /**
            * Get client id.
            * @returns {string}
            */
        get clientId(): string;
        /**
            * Get client secret.
            * @returns {string}
            */
        get clientSecret(): string;
        /**
            * Get logout URL.
            * @returns {string}
            */
        get logoutUrl(): string;
        /**
            * Get login hint.
            * @returns {boolean}
            */
        get loginHint(): boolean;
        /**
            * Get ui locales.
            * @returns {boolean}
            */
        get uiLocales(): boolean;
        /**
            * Get user info url.
            * @returns {string}
            */
        get userInfoUrl(): string;
        /**
            * Get backchannel supported.
            * @returns {boolean}
            */
        get backchannelSupported(): boolean;
        /**
            * Get disable user info.
            * @returns {boolean}
            */
        get disableUserInfo(): boolean;
        /**
            * Get issuer.
            * @returns {string}
            */
        get issuer(): string;
        /**
            * Get default scope.
            * @returns {string}
            */
        get defaultScope(): string;
        /**
            * Get prompt.
            * @returns {OIDCPromptType}
            */
        get prompt(): OIDCPromptType;
        /**
            * Get accepts prompt none forward from client.
            * @returns {boolean}
            */
        get acceptsPromptNoneForwardFromClient(): boolean;
        /**
            * Get validate signature.
            * @returns {boolean}
            */
        get validateSignature(): boolean;
        /**
            * Get use jwks url.
            * @returns {boolean}
            */
        get useJwksUrl(): boolean;
        /**
            * Get jwks url.
            * @returns {string}
            */
        get jwksUrl(): string;
        /**
            * Get public key signature verifier key.
            * @returns {string}
            */
        get publicKeySignatureVerifierKey(): string;
        /**
            * Get public key signature verifier key id.
            * @returns {string}
            */
        get publicKeySignatureVerifierKeyId(): string;
        /**
            * Get allowed clock skew.
            * @returns {number}
            */
        get allowedClockSkew(): number;
        /**
            * Get forward parameter.
            * @returns {string}
            */
        get forwardParameter(): string;
        /**
            * Get type.
            * @returns {IdentityProviderType}
            */
        get type(): IdentityProviderType;
        /**
            * Get the json representation of this class.
            * @returns {OIDCIdentityProviderJson}
            */
        get json(): OIDCIdentityProviderJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Okta Identity Provider Create Request.
    */
export class OktaIdentityProviderCreateRequest {
        constructor(OktaIdentityProviderCreateRequest: OktaIdentityProviderCreateRequest);
        constructor(OktaIdentityProviderCreateRequestJson: OktaIdentityProviderCreateRequestJson);
        constructor(enforceSso: boolean, enabled: boolean, singleSignOnServiceUrl: string);
        /**
            * Get enforce sso.
            * @returns {boolean}
            */
        get enforceSso(): boolean;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get single sign on service url.
            * @returns {string}
            */
        get singleSignOnServiceUrl(): string;
        /**
            * Get the json representation of this class.
            * @returns {OktaIdentityProviderCreateRequestJson}
            */
        get json(): OktaIdentityProviderCreateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class SAMLIdentityProviderConfigRequest {
        constructor(immutableSAMLIdentityProviderConfigRequest: SAMLIdentityProviderConfigRequest);
        constructor(immutableSAMLIdentityProviderConfigRequestJson: SAMLIdentityProviderConfigRequestJson);
        /**
            * Get enforce sso.
            * @returns {boolean}
            */
        get enforceSso(): boolean;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get single sign on service url.
            * @returns {string}
            */
        get singleSignOnServiceUrl(): string;
        /**
            * Get single logout service URL.
            * @returns {string | undefined}
            */
        get singleLogoutServiceUrl(): string | undefined;
        /**
            * Get name id policy format.
            * @returns {SAMLNameIdPolicyFormat | undefined}
            */
        get nameIsPolicyFormat(): SAMLNameIdPolicyFormat | undefined;
        /**
            * Get principal type.
            * @returns {SAMLPrincipalType | undefined}
            */
        get principalType(): SAMLPrincipalType | undefined;
        /**
            * Get principal attribute.
            * @returns {string | undefined}
            */
        get principalAttribute(): string | undefined;
        /**
            * Get signature algorithm.
            * @returns {SAMLSignatureAlgorithm | undefined}
            */
        get signatureAlgorithm(): SAMLSignatureAlgorithm | undefined;
        /**
            * Get saml xml key name tranformer.
            * @returns {SAMLSignatureKeyName | undefined}
            */
        get samlXmlKeyNameTranformer(): SAMLSignatureKeyName | undefined;
        /**
            * Get backchannel supported.
            * @returns {boolean | undefined}
            */
        get backchannelSupported(): boolean | undefined;
        /**
            * Get post binding response.
            * @returns {boolean | undefined}
            */
        get postBindingResponse(): boolean | undefined;
        /**
            * Get post binding authn request.
            * @returns {boolean | undefined}
            */
        get postBindingAuthnRequest(): boolean | undefined;
        /**
            * Get post binding logout.
            * @returns {boolean | undefined}
            */
        get postBindingLogout(): boolean | undefined;
        /**
            * Get want authn requests signed.
            * @returns {boolean | undefined}
            */
        get wantAuthnRequestsSigned(): boolean | undefined;
        /**
            * Get want assertions signed.
            * @returns {boolean | undefined}
            */
        get wantAssertionsSigned(): boolean | undefined;
        /**
            * Get signing certificate.
            * @returns {string | undefined}
            */
        get signingCertificate(): string | undefined;
        /**
            * Get want assertions encrypted.
            * @returns {boolean | undefined}
            */
        get wantAssertionsEncrypted(): boolean | undefined;
        /**
            * Get force authn.
            * @returns {boolean | undefined}
            */
        get forceAuthn(): boolean | undefined;
        /**
            * Get validate signature.
            * @returns {boolean | undefined}
            */
        get validateSignature(): boolean | undefined;
        /**
            * Get allowed clock skew.
            * @returns {string | undefined}
            */
        get allowedClockSkew(): string | undefined;
        /**
            * Get the json representation of this class.
            * @returns {SAMLIdentityProviderConfigRequestJson}
            */
        get json(): SAMLIdentityProviderConfigRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class SAMLIdentityProvider extends IdentityProvider {
        constructor(_json: SAMLIdentityProviderJson);
        /**
            * Get enforce sso.
            * @returns {boolean}
            */
        get enforceSso(): boolean;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get single sign on service url.
            * @returns {string}
            */
        get singleSignOnServiceUrl(): string;
        /**
            * Get single logout service URL.
            * @returns {string}
            */
        get singleLogoutServiceUrl(): string;
        /**
            * Get name id policy format.
            * @returns {string}
            */
        get nameIdPolicyFormat(): string;
        /**
            * Get principal type.
            * @returns {string}
            */
        get principalType(): string;
        /**
            * Get principal attribute.
            * @returns {string}
            */
        get principalAttribute(): string;
        /**
            * Get signature algorithm.
            * @returns {string}
            */
        get signatureAlgorithm(): string;
        /**
            * Get saml xml key name tranformer.
            * @returns {string}
            */
        get samlXmlKeyNameTranformer(): string;
        /**
            * Get backchannel supported.
            * @returns {boolean}
            */
        get backchannelSupported(): boolean;
        /**
            * Get post binding response.
            * @returns {boolean}
            */
        get postBindingResponse(): boolean;
        /**
            * Get post binding authn request.
            * @returns {boolean}
            */
        get postBindingAuthnRequest(): boolean;
        /**
            * Get post binding logout.
            * @returns {boolean}
            */
        get postBindingLogout(): boolean;
        /**
            * Get want authn requests signed.
            * @returns {boolean}
            */
        get wantAuthnRequestsSigned(): boolean;
        /**
            * Get want assertions signed.
            * @returns {boolean}
            */
        get wantAssertionsSigned(): boolean;
        /**
            * Get want assertions encrypted.
            * @returns {boolean}
            */
        get wantAssertionsEncrypted(): boolean;
        /**
            * Get signing certificate.
            * @returns {string}
            */
        get signingCertificate(): string;
        /**
            * Get force authn.
            * @returns {boolean}
            */
        get forceAuthn(): boolean;
        /**
            * Get validate signature.
            * @returns {boolean}
            */
        get validateSignature(): boolean;
        /**
            * Get allowed clock skew.
            * @returns {string}
            */
        get allowedClockSkew(): string;
        /**
            * Get type.
            * @returns {IdentityProviderType}
            */
        get type(): IdentityProviderType;
        /**
            * Get the json representation of this class.
            * @returns {SAMLIdentityProviderJson}
            */
        get json(): SAMLIdentityProviderJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * SSO Login Error Class
    */
export class SsoLoginError {
        constructor(_json: SsoLoginErrorJson);
        /**
            * The invalid username that was passed from the identity provider when
            * attempting to log in via SSO.
            * @returns {string}
            */
        get invalidUsername(): string;
        /**
            * The time the error occurred.
            * @returns {Date}
            */
        get date(): Date;
        /**
            * Get the json representation of this class.
            * @returns {SsoLoginErrorJson}
            */
        get json(): SsoLoginErrorJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class SsoUserCreateRequest {
        constructor(ssoUserCreateRequest: SsoUserCreateRequest);
        constructor(ssoUserCreateRequestJson: SsoUserCreateRequestJson);
        /**
            * Get email.
            * @returns {string}
            */
        get email(): string;
        /**
            * Get domain.
            * @returns {string}
            */
        get domain(): string;
        /**
            * Get fullname.
            * @returns {string}
            */
        get fullname(): string;
        /**
            * Get role uuid.
            * @returns {string | undefined}
            */
        get roleUuid(): string | undefined;
        /**
            * Get send invitation.
            * @returns {boolean}
            */
        get sendInvitation(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {SsoUserCreateRequestJson}
            */
        get json(): SsoUserCreateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export interface TaskFilterParamsJson {
    entity_uuid: string;
    entity_type: EntityType;
    include_descendant_tasks?: boolean;
    synced?: boolean;
    username?: string;
    timestamp_after?: number;
    timestamp_before?: number;
    query_timestamp?: number;
    offset?: number;
    limit?: number;
    order?: PagingOrder;
}

export interface TaskFilterQueryParams {
    entityUuid: string;
    entityType: EntityType;
    includeDescendantTasks?: boolean;
    synced?: boolean;
    username?: string;
    timestampAfter?: number;
    timestampBefore?: number;
    queryTimestamp?: number;
    offset?: number;
    limit?: number;
    order?: PagingOrder;
}

/**
  * Api Task representation.
  */
export interface TaskJson {
    active: boolean;
    company_id: string;
    synced: boolean;
    uuid: string;
    status: TaskStatus;
    location_id: string;
    operation: TaskOperation;
    end_time: number | null;
    entity_uuid: string;
    initiated_from_ecs: boolean;
    initiation_time: number;
    message: string | null;
    operation_description: string;
    org_uuid: string;
    other_attributes: {
        [key: string]: string;
    };
    parent_task_uuid: string | null;
    progress: number;
    start_time: number | null;
    sub_tasks: Array<string>;
    task_id: string;
    task_type: TaskType;
    user_full_name: string;
    username: string;
    entity_name: string;
}

/**
  * Enumeration of possible task operation values.
  */
export type TaskOperation = 'power on' | 'power off' | 'suspend' | 'shutdown' | 'reset' | 'reboot' | 'update memory size' | 'reset mac address' | 'reconfigure vm' | 'rename vm' | 'rename vapp' | 'update cpu count' | 'update disk size' | 'add virtual disk' | 'update vm disks' | 'delete virtual disk' | 'install VMWare tools' | 'update virtual network card' | 'vapp template enable download from vCloud' | 'vapp template enable download' | 'media enable download' | 'vapp enable download from vCloud' | 'vapp enable download' | 'delete virtual network card' | 'update firewall' | 'update nat service' | 'create snapshot' | 'restore snapshot' | 'remove snapshot' | 'delete entity' | 'update storage lease' | 'update runtime lease' | 'add vapp' | 'add vms' | 'build vapp' | 'build VMs' | 'update description' | 'update static routing' | 'update dhcp service' | 'update load balancer service' | 'update metadata' | 'delete metadata' | 'upgrade virtual hardware' | 'update startup section' | 'eject media' | 'insert media' | 'relocate vm' | 'create edge gateway' | 'delete edge gateway' | 'update vapp template' | 'update media' | 'capture vapp as vapp template' | 'update ipsec vpn service' | 'update ssl vpn configuration' | 'clone vm' | 'clone vapp' | 'clone media' | 'remove network from vapp' | 'add org vdc network to vapp' | 'add vapp network to vapp' | 'update vapp network' | 'update vapp firewall' | 'update vapp network dhcp' | 'update vapp network static routing' | 'update vapp network nat' | 'update guest customization section' | 'update vm capabilities' | 'update edge interface' | 'extend vdc resource pool' | 'create org vdc network' | 'delete org vdc network' | 'update org vdc network' | 'vmware tools upgrade' | 'update vm boot options' | 'update vm drs rules' | 'update vm tools upgrade policy' | 'restore backup' | 'zerto failover test' | 'zerto failover test initiation' | 'zerto failover test stop' | 'zerto failover commit' | 'zerto failover rollback' | 'zerto live failover' | 'zerto live failover initiation' | 'zerto batch live failover' | 'zerto batch test failover' | 'upload vapp template from ovf' | 'upload media from iso' | 'generate hipaa report' | 'generate vm encryption report' | 'generate login event history report' | 'generate support request report' | 'generate ecs event history report' | 'generate log inspection report' | 'generate anti malware report' | 'generate vulnerability report' | 'generate firewall event report' | 'generate integrity event report' | 'generate dpi event report' | 'generate web reputation event report' | 'generate vm inventory report' | 'generate dr admin report' | 'generate protection summary report' | 'generate billing report' | 'create catalog' | 'sync catalog item' | 'managed vapp shutdown' | 'generate failover test report' | 'update cloud tenant repository size' | 'enable nested hypervisor' | 'disable nested hypervisor' | 'update product section' | 'upload ovf to catalog' | 'create catalog item in vcloud' | 'receive ovf file upload' | 'upload ovf files to vcloud' | 'prepare ovf template in vcloud' | 'delete catalog' | 'change VCC tenant name' | 'manage VCC tenant storage' | 'create VCC tenant' | 'delete VCC tenant' | 'vac start job' | 'vac stop job' | 'vac retry job' | 'vac enable job' | 'vac disable job' | 'generate file download bundle' | 'restore vm backup' | 'restore backups in vdc' | 'disaster recovery runbook test' | 'disaster recovery runbook execution';

export interface TaskListJson {
    current_page_parameters: TaskFilterParamsJson;
    next_page_parameters: TaskFilterParamsJson;
    total_records: number;
    last_page: boolean;
    data: Array<TaskJson>;
}

/**
  * Enumeration of possible task status values.
  */
export type TaskStatus = 'success' | 'running' | 'error' | 'cancelled' | 'queued' | 'waiting-on-user-input' | 'unknown';

/**
  * Enumeration of possible task types.
  */
export type TaskType = 'ILAND' | 'REPORTING' | 'VCD' | 'VEEAM' | 'VCCR' | 'VI' | 'ZERTO' | 'CATALOG_UPLOAD' | 'VAC';

/**
    * Task Filter Params.
    */
export class TaskFilterParams implements TaskFilterQueryParams {
        constructor(taskFilterParams: TaskFilterParams);
        constructor(taskFilterParamsJson: TaskFilterParamsJson);
        constructor(entityUuid: string, entityType: EntityType, includeDescendantTasks?: boolean, synced?: boolean, username?: string, timestampAfter?: number, timestampBefore?: number, queryTimestamp?: number, offset?: number, limit?: number, order?: PagingOrder);
        /**
            * Get entity uuid.
            * @returns {string}
            */
        get entityUuid(): string;
        /**
            * Get entity type.
            * @returns {EntityType}
            */
        get entityType(): EntityType;
        /**
            * Get include descendant tasks.
            * @returns {boolean}
            */
        get includeDescendantTasks(): boolean | undefined;
        /**
            * Sets the filter property for including or excluding descendant tasks of the entity.
            * @param {boolean} val
            * @returns {TaskFilterParams}
            */
        setIncludeDescendants(val?: boolean): TaskFilterParams;
        /**
            * Get synced.
            * @returns {boolean}
            */
        get synced(): boolean | undefined;
        /**
            * Sets the filter property for excluding tasks with a synced field that doesn't match the specified boolean value.
            * @param {boolean} val
            * @returns {TaskFilterParams}
            */
        setSynced(val?: boolean): TaskFilterParams;
        /**
            * Get username.
            * @returns {string}
            */
        get username(): string | undefined;
        /**
            * Sets the filter property for excluding tasks that were not initiated by the user with the specified username.
            * @param {string} val
            * @returns {TaskFilterParams}
            */
        setUsername(val?: string): TaskFilterParams;
        /**
            * Get timestamp after.
            * @returns {number}
            */
        get timestampAfter(): number | undefined;
        /**
            * Sets the filter property for excluding tasks that do not have a timestamp after the specified epoch timestamp.
            * @param {number} val
            * @returns {TaskFilterParams}
            */
        setTimestampAfter(val?: number): TaskFilterParams;
        /**
            * Get timestamp before.
            * @returns {number}
            */
        get timestampBefore(): number | undefined;
        /**
            * Sets the filter property for excluding tasks that do not have a timestamp before the specified epoch timestamp.
            * @param {number} val
            * @returns {TaskFilterParams}
            */
        setTimestampBefore(val?: number): TaskFilterParams;
        /**
            * Get query timestamp.
            * @returns {number}
            */
        get queryTimestamp(): number | undefined;
        /**
            * Sets the query timestamp property. This property is useful for stable pagination over a query result set.
            * @param {number} val
            * @returns {TaskFilterParams}
            */
        setQueryTimestamp(val?: number): TaskFilterParams;
        /**
            * Get offset.
            * @returns {number}
            */
        get offset(): number | undefined;
        /**
            * Sets the paging offset.
            * @param {number} val
            * @returns {TaskFilterParams}
            */
        setOffset(val?: number): TaskFilterParams;
        /**
            * Get limit.
            * @returns {number}
            */
        get limit(): number | undefined;
        /**
            * Sets the paging limit.
            * @param {number} val
            * @returns {TaskFilterParams}
            */
        setLimit(val?: number): TaskFilterParams;
        /**
            * Get order.
            * @returns {PagingOrder}
            */
        get order(): PagingOrder | undefined;
        /**
            * Sets the paging order.
            * @param {PagingOrder} val
            * @returns {TaskFilterParams}
            */
        setOrder(val?: PagingOrder): TaskFilterParams;
        /**
            * Get the json representation of this class.
            * @returns {TaskFilterParams}
            */
        get json(): TaskFilterParamsJson;
        getQueryParams(): TaskFilterQueryParams;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Task List.
    */
export class TaskList {
        constructor(_json: TaskListJson);
        /**
            * Get current page parameters.
            * @returns {TaskFilterParams}
            */
        get currentPageParameters(): TaskFilterParams;
        /**
            * Get next page parameters.
            * @returns {TaskFilterParams}
            */
        get nextPageParameters(): TaskFilterParams;
        /**
            * Get total records.
            * @returns {number}
            */
        get totalRecords(): number;
        /**
            * Get last page.
            * @returns {boolean}
            */
        get lastPage(): boolean;
        /**
            * Get data.
            * @returns {Array<TaskJson>}
            */
        get data(): Array<Task>;
        /**
            * Get the json representation of this class.
            * @returns {TaskListJson}
            */
        get json(): TaskListJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Task.
    */
export class Task {
        constructor(_apiTask: TaskJson);
        /**
            * Gets a Task by UUID.
            * @param taskUuid the task uuid
            * @returns {Promise<Task>} promise that resolves with the Task
            */
        static getTask(taskUuid: string): Promise<Task>;
        /**
            * Gets a list of tasks filtered by specified query parameters.
            * @param params the query params
            * @returns {Promise<TaskList>} promise that resolves with the TaskList
            */
        static getTasks(params: TaskFilterParams): Promise<TaskList>;
        /**
            * Sets a push channel provider to use for task updates. If not explicitly set,
            * the getPromise() and getObservable() methods will simply poll for updates at 1 second intervals.
            *
            * @param provider {PushChannelProvider}
            */
        static setPushChannelProvider(provider: PushChannelProvider | null): void;
        /**
            * Gets the UUID of the task.
            * @returns {string} UUID
            */
        get uuid(): string;
        /**
            * Get company id.
            * @returns {string}
            */
        get companyId(): string;
        /**
            * Gets the datacenter location ID of the task.
            * @returns {string} datacenter location ID
            */
        get locationId(): string;
        /**
            * Indicates whether the task is complete.
            * @returns {boolean} value
            */
        get complete(): boolean;
        /**
            * Indicates the status of the task.
            * @returns {TaskStatus} task status
            */
        get status(): TaskStatus;
        /**
            * Gets the task's operation identifier.
            */
        get operation(): TaskOperation;
        /**
            * Gets the end time of the task.
            * @returns {Date|null} end time of the task or null if the task hasn't yet completed
            */
        get endTime(): Date | null;
        /**
            * Gets the UUID of the entity that is associated with the task.
            * @returns {string} the UUID of the associated entity
            */
        get entityUuid(): string;
        /**
            * Indicates whether the task was initiated from the iland API.
            * @returns {boolean} value
            */
        get initiatedFromIlandApi(): boolean;
        /**
            * Gets the date/time that the task was received/queued by the API.
            * @returns {Date} the date that the task was initiated
            */
        get initiationTime(): Date;
        /**
            * Gets the message associated with the task, if there is one. The message may provide extra information if the task
            * ended with an error status.
            * @returns {string|null} message string or null if no message is associated with the task
            */
        get message(): string | null;
        /**
            * Returns an operation description that may provide more detail about the operation that the task is associated with.
            * @returns {string} description
            */
        get operationDescription(): string;
        /**
            * Returns the UUID of the organization that the task is associated with.
            */
        get orgUuid(): string;
        /**
            * Gets a map of additional task details that are specific to the task operation type.
            * @returns {{ [key: string]: string }} map of other task attributes
            */
        get otherAttributes(): {
                [key: string]: string;
        };
        /**
            * If this is a sub-task, returns the UUID of the parent task, otherwise null.
            * @returns {string|null} returns the UUID of the parent task
            */
        get parentTaskUuid(): string | null;
        /**
            * Gets the task progress as a percentage.
            * @returns {number} in the range 0-100
            */
        get progress(): number;
        /**
            * Gets the start time of the task, if the task has started. If the task is still queued, returns null.
            * @returns {Date|null} the start time of the task or null
            */
        get startTime(): Date | null;
        /**
            * Gets the task's sub-tasks, if this is a composite task.
            * @returns {Array<string>}
            */
        get subTasks(): Array<string>;
        /**
            * If this task is a wrapper for a task from another service (vCloud director, Zerto, etc), this will return the ID of
            * the task known to that service. Otherwise returns Uhe task UUID.
            * @returns {string} the ID of the task
            */
        get taskId(): string;
        /**
            * Gets the task type.
            * @returns {TaskType} the type of the task
            */
        get taskType(): TaskType;
        /**
            * Gets the username of the user that initiated the task.
            * @returns {string} username of the initiating user
            */
        get username(): string;
        /**
            * Gets the full name of the user that initiated the task.
            * @returns {string} full name of the user that initiated the task
            */
        get userFullName(): string;
        /**
            * Gets the tasks entity name
            * @returns {string} entity name
            */
        get entityName(): string;
        /**
            * Returns true if task is running
            * @returns {boolean}
            */
        get isRunning(): boolean;
        /**
            * Returns true if task is cancelled
            * @returns {boolean}
            */
        get isCancelled(): boolean;
        /**
            * Returns true if task is success
            * @returns {boolean}
            */
        get isSuccess(): boolean;
        /**
            * Returns true if task is queued
            * @returns {boolean}
            */
        get isQueued(): boolean;
        /**
            * Returns true if task is waiting on user input
            * @returns {boolean}
            */
        get isWaitingOnUserInput(): boolean;
        /**
            * Returns true if task has error
            * @returns {boolean}
            */
        get hasError(): boolean;
        /**
            * Returns true if task is waiting on user input
            * @returns {boolean}
            */
        get hasUnknownStatus(): boolean;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {TaskJson} the API Task object
            */
        get json(): TaskJson;
        /**
            * Retrieves a new representation of the task from the API.
            * @returns {Promise<Task>} promise that resolves with updated task
            */
        refresh(): Promise<Task>;
        /**
            * Cancels a task. Only supported for active, top-level catalog upload tasks.
            */
        cancelTask(): Promise<any>;
        /**
            * Gets a promise that resolves or rejects when the task is complete. An error status will cause rejection.
            * @returns {Promise<Task>} completion promise
            */
        getPromise(): Promise<Task>;
        /**
            * Gets an observable that is updated as the progress or status of the task changes.
            * @returns {Observable<Task>} task observable
            */
        getObservable(): Observable<Task>;
}
/**
    * Push Channel Provider.
    */
export type PushChannelProvider = (companyId: string) => IPushChannel | null;

/**
  * Account Event JSON interface.
  */
export interface AccountEventJson {
    time: number;
    type: string;
    client_name: string;
    user_id: string;
    session_id: string;
    ip_address: string;
    error: string;
    details: {
        [key: string]: string;
    };
}

/**
  * Batch Inbox Update Request JSON interface.
  */
export interface BatchInboxUpdateRequestJson {
    type: UpdateType;
    folder: MessageFolder;
    selection: MessageSelection;
    uuids: Array<string>;
}

/**
  * Inbox Mark All As Read Request JSON interface.
  */
export interface InboxMarkAllAsReadRequestJson {
    folder: MessageFolder;
}

/**
  * Inbox Message Filter Params JSON interface.
  */
export interface InboxMessageFilterParamsJson {
    folder: MessageFolder;
    offset: number;
    limit: number;
    order: PagingOrder;
}

/**
  * Inbox Message JSON interface.
  */
export interface InboxMessageJson {
    uuid: string;
    subject: string;
    content: string;
    hash: string;
    folder: MessageFolder;
    read: boolean;
    time: number;
    username: string;
}

/**
  * Inbox Message List JSON Interface.
  */
export interface InboxMessageListJson {
    current_page_parameters: InboxMessageFilterParams;
    next_page_parameters: InboxMessageFilterParams;
    total_records: number;
    last_page: boolean;
    data: Array<InboxMessageJson>;
}

/**
  * Message Count JSON interface.
  */
export interface MessageCountJson {
    count: number;
}

/**
  * Message Folder.
  */
export type MessageFolder = 'INBOX' | 'ARCHIVE' | 'DELETED';

/**
  * Message Selection.
  */
export type MessageSelection = 'ALL' | 'READ' | 'UNREAD';

/**
  * Move Message Request JSON interface.
  */
export interface MoveMessageRequestJson {
    folder: MessageFolder;
}

/**
  * Paging Order.
  */
export type PagingOrder = 'ASC' | 'DESC';

/**
  * Update Type.
  */
export type UpdateType = 'DELETE' | 'MARK_AS_READ' | 'ARCHIVE' | 'MOVE_TO_INBOX';

export interface UserDomainJson {
    domain: string;
    domain_name: string;
    domain_id: string;
    domain_type: DomainType;
}

export type DomainType = 'COMPANY' | 'SHARED' | 'SYSTEM_ADMIN' | 'READ_ONLY_SYSTEM_ADMIN';

/**
    * User entity history subscription create request JSON interface
    */
export interface UserEntityHistorySubscriptionCreateRequestJson {
        entity_type: EntityHistorySubscriptionType;
        entity_uuid: string;
        email: string;
        frequency: FrequencyEnum;
        enabled: boolean;
}
/**
    * User entity history subscription type
    */
export enum EntityHistorySubscriptionType {
        COMPANY = "COMPANY",
        ORG = "ORG",
        VDC = "VDC",
        CATALOG = "CATALOG",
        VPG = "VPG",
        ORG_VDC_NETWORK = "ORG_VDC_NETWORK",
        EDGE = "EDGE",
        VAPP = "VAPP",
        VAPP_NETWORK = "VAPP_NETWORK",
        VM = "VM",
        VAPP_TEMPLATE = "VAPP_TEMPLATE",
        MEDIA = "MEDIA",
        EXTERNAL_NETWORK = "EXTERNAL_NETWORK",
        RECOVERY_RUNBOOK = "RECOVERY_RUNBOOK",
        VCC_TENANT = "VCC_TENANT"
}

/**
  * User entity history subscription delete request JSON interface
  */
export interface UserEntityHistorySubscriptionDeleteRequestJson {
    entity_uuid: string;
}

/**
    * User entity history subscription JSON interface
    */
export interface UserEntityHistorySubscriptionJson {
        entity_type: EntityType;
        entity_uuid: string;
        username: string;
        email: string;
        frequency: FrequencyEnum;
        enabled: boolean;
}
/**
    * User entity history subscription frequency enum
    */
export enum FrequencyEnum {
        WEEKLY = "WEEKLY"
}

/**
  * API User JSON Representation.
  */
export interface UserJson {
    user_type: UserType;
    locked: boolean;
    email: string;
    phone: string;
    company: string;
    address: string;
    city: string;
    state: string;
    zip: string;
    country: string;
    name: string;
    fullname: string;
    deleted: boolean;
    created_date: number;
    deleted_date: number | null;
    domain: string | UserDomainJson;
    first_name?: string;
    last_name?: string;
}

export interface UserSessionJson {
    session_id: string;
    ip_address: string;
    username: string;
    start: number;
    last_access: number;
    clients: {
        [key: string]: string;
    };
}

/**
  * Enumeration of possible user types.
  */
export type UserType = 'SYSTEM_ADMIN' | 'READ_ONLY_SYSTEM_ADMIN' | 'CUSTOMER';

export interface UserUpdateRequestJson {
    fullname: string;
    phone: string;
    company: string;
    address: string;
    city: string;
    state: string;
    zip: string;
    country: string;
}

/**
    * Account Event.
    */
export class AccountEvent {
        constructor(_json: AccountEventJson);
        /**
            * Get time.
            * @returns {number}
            */
        get time(): number;
        /**
            * Get type.
            * @returns {string}
            */
        get type(): string;
        /**
            * Get client name.
            * @returns {string}
            */
        get clientName(): string;
        /**
            * Get user id.
            * @returns {string}
            */
        get userId(): string;
        /**
            * Get session id.
            * @returns {string}
            */
        get sessionId(): string;
        /**
            * Get ip address.
            * @returns {string}
            */
        get ipAddress(): string;
        /**
            * Get error.
            * @returns {string}
            */
        get error(): string;
        /**
            * Get details.
            * @returns {{ [key: string]: string }}
            */
        get details(): {
                [key: string]: string;
        };
        /**
            * Get the json representation of this class.
            * @returns {AccountEventJson}
            */
        get json(): AccountEventJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Batch Inbox Update Request.
    */
export class BatchInboxUpdateRequest {
        constructor(batchInboxUpdateRequest: BatchInboxUpdateRequest);
        constructor(batchInboxUpdateRequestJson: BatchInboxUpdateRequestJson);
        constructor(type: UpdateType, folder: MessageFolder, selection: MessageSelection, uuids: Array<string>);
        /**
            * Get type.
            * @returns {UpdateType}
            */
        get type(): UpdateType;
        /**
            * Get folder.
            * @returns {MessageFolder}
            */
        get folder(): MessageFolder;
        /**
            * Get selection.
            * @returns {MessageSelection}
            */
        get selection(): MessageSelection;
        /**
            * Get uuids.
            * @returns {Array<string>}
            */
        get uuids(): Array<string>;
        /**
            * Get the json representation of this class.
            * @returns {BatchInboxUpdateRequestJson}
            */
        get json(): BatchInboxUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Inbox Mark All As Read Request.
    */
export class InboxMarkAllAsReadRequest {
        constructor(inboxMarkAllAsReadRequest: InboxMarkAllAsReadRequest);
        constructor(inboxMarkAllAsReadRequestJson: InboxMarkAllAsReadRequestJson);
        constructor(folder: MessageFolder);
        /**
            * Get folder.
            * @returns {MessageFolder}
            */
        get folder(): MessageFolder;
        /**
            * Get the json representation of this class.
            * @returns {InboxMarkAllAsReadRequestJson}
            */
        get json(): InboxMarkAllAsReadRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Inbox Message Filter Params.
    */
export class InboxMessageFilterParams {
        constructor(_json: InboxMessageFilterParamsJson);
        /**
            * Get folder.
            * @returns {MessageFolder}
            */
        get folder(): MessageFolder;
        /**
            * Get offset.
            * @returns {number}
            */
        get offset(): number;
        /**
            * Get limit.
            * @returns {number}
            */
        get limit(): number;
        /**
            * Get order.
            * @returns {PagingOrder}
            */
        get order(): PagingOrder;
        /**
            * Get the json representation of this class.
            * @returns {InboxMessageFilterParams}
            */
        get json(): InboxMessageFilterParamsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Inbox Message List.
    */
export class InboxMessageList {
        constructor(_json: InboxMessageListJson);
        /**
            * Get current page parameters.
            * @returns {InboxMessageFilterParams}
            */
        get currentPageParameters(): InboxMessageFilterParams;
        /**
            * Get next page parameters.
            * @returns {InboxMessageFilterParams}
            */
        get nextPageParameters(): InboxMessageFilterParams;
        /**
            * Get total records.
            * @returns {number}
            */
        get totalRecords(): number;
        /**
            * Get last page.
            * @returns {boolean}
            */
        get lastPage(): boolean;
        /**
            * Get data.
            * @returns {Array<InboxMessage>}
            */
        get data(): Array<InboxMessage>;
        /**
            * Get the json representation of this class.
            * @returns {InboxMessageListJson}
            */
        get json(): InboxMessageListJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Inbox Message.
    */
export class InboxMessage {
        constructor(_json: InboxMessageJson);
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get subject.
            * @returns {string}
            */
        get subject(): string;
        /**
            * Get content.
            * @returns {string}
            */
        get content(): string;
        /**
            * Get hash.
            * @returns {string}
            */
        get hash(): string;
        /**
            * Get folder.
            * @returns {MessageFolder}
            */
        get folder(): MessageFolder;
        /**
            * Get read.
            * @returns {boolean}
            */
        get read(): boolean;
        /**
            * Get time.
            * @returns {number}
            */
        get time(): number;
        /**
            * Get username.
            * @returns {string}
            */
        get username(): string;
        /**
            * Get the json representation of this class.
            * @returns {InboxMessageJson}
            */
        get json(): InboxMessageJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * User Inventory JSON interface.
    */
export interface UserInventoryJson {
        username: string;
        inventory: Array<UserCompanyInventoryJson>;
}
/**
    * User Company Inventory JSON interface.
    */
export interface UserCompanyInventoryJson {
        company_id: string;
        company_name: string;
        entities: {
                [entityDomain: string]: Array<UserInventoryEntityJson>;
        };
}
/**
    * User Inventory Entity JSON interface.
    */
export interface UserInventoryEntityJson {
        uuid: string;
        type: IamEntityType;
        name: string;
        parent_uuid: string | null;
        parent_type: IamEntityType | null;
}

/**
    * Inventory Entity.
    */
export interface InventoryEntity {
        readonly uuid: string;
        readonly type: IamEntityType;
        readonly name: string;
        readonly parentUuid: string | null;
        readonly parentType: IamEntityType | null;
}
/**
    * User inventory entity implementation.
    */
export class InventoryEntityImpl implements InventoryEntity {
        constructor(_json: UserInventoryEntityJson);
        /**
            * Gets the UUID of the entity.
            * @returns {string} UUID
            */
        get uuid(): string;
        /**
            * Gets the type of the entity.
            * @returns {IamEntityType} entity type
            */
        get type(): IamEntityType;
        /**
            * Gets the name of the entity.
            * @returns {string} entity name
            */
        get name(): string;
        /**
            * Sets the name of the entity.
            * @param {string} val the name
            */
        set name(val: string);
        /**
            * Gets the UUID of the parent entity.
            * @returns {string} the parent entity UUID
            */
        get parentUuid(): string | null;
        /**
            * Gets the type of the parent entity.
            * @returns {IamEntityType} the parent entity type
            */
        get parentType(): IamEntityType | null;
}
export interface CompanyInventory {
        readonly companyId: string;
        getEntityByUuid(uuid: string): InventoryEntity | undefined;
        getAllEntitiesByType(): {
                [type: string]: Array<InventoryEntity>;
        };
        getEntitiesByType(type: IamEntityType): Array<InventoryEntity>;
        getChildrenForEntity(uuid: string): {
                [type: string]: Array<InventoryEntity>;
        } | undefined;
}
export class CompanyInventoryImpl implements CompanyInventory {
        constructor(_inventory: UserCompanyInventoryJson);
        get companyId(): string;
        /**
            * Get an inventory entity by UUID.
            * @param uuid {string} UUID of the entity
            * @returns {InventoryEntity|undefined}
            */
        getEntityByUuid(uuid: string): InventoryEntity | undefined;
        /**
            * Get all entities mapped by their types.
            * @returns {{[p: string]: Array<InventoryEntity>}}
            */
        getAllEntitiesByType(): {
                [type: string]: Array<InventoryEntity>;
        };
        /**
            * Get an array of inventory entities of the specified type.
            * @param {IamEntityType} type
            * @returns {Array<InventoryEntity>}
            */
        getEntitiesByType(type: IamEntityType): Array<InventoryEntity>;
        /**
            * Gets the map of children belonging to an entity.
            * @param {string} uuid
            * @returns {{[p: string]: Array<InventoryEntity>} | undefined}
            */
        getChildrenForEntity(uuid: string): {
                [type: string]: Array<InventoryEntity>;
        } | undefined;
        addEntity(entity: UserInventoryEntityJson, original?: boolean): void;
        removeEntity(entityUuid: string): void;
        renameEntity(entityUuid: string, newName: string): void;
        getObservable(): Observable<InventoryUpdate>;
}
export interface InventoryUpdate {
        type: InventoryUpdateType;
        entity: InventoryEntity;
}
export type InventoryUpdateType = 'CREATE' | 'DELETE' | 'UPDATE';

/**
    * Message Count.
    */
export class MessageCount {
        constructor(_json: MessageCountJson);
        /**
            * Get count.
            * @returns {number}
            */
        get count(): number;
        /**
            * Get the json representation of this class.
            * @returns {MessageCountJson}
            */
        get json(): MessageCountJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Move Message Request.
    */
export class MoveMessageRequest {
        constructor(moveMessageRequest: MoveMessageRequest);
        constructor(moveMessageRequestJson: MoveMessageRequestJson);
        constructor(folder: MessageFolder);
        /**
            * Get folder.
            * @returns {MessageFolder}
            */
        get folder(): MessageFolder;
        /**
            * Get the json representation of this class.
            * @returns {MoveMessageRequestJson}
            */
        get json(): MoveMessageRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * User Entity History Subscription Create Request
    */
export class UserEntityHistorySubscriptionCreateRequest {
        constructor(request: UserEntityHistorySubscriptionCreateRequest);
        constructor(requestJson: UserEntityHistorySubscriptionCreateRequestJson);
        constructor(entityUuid: string, entityType: EntityHistorySubscriptionType, email: string, frequency: FrequencyEnum, enabled: boolean);
        /**
            * Get entity type from user subscription
            * @returns {EntityHistorySubscriptionType}
            */
        get entityType(): EntityHistorySubscriptionType;
        /**
            * Get entity uuid from user subscription
            * @returns {string}
            */
        get entityUuid(): string;
        /**
            * Get email from user subscription
            * @returns {string}
            */
        get email(): string;
        /**
            * Get frequency from user subscription
            * @returns {FrequencyEnum}
            */
        get frequency(): FrequencyEnum;
        /**
            * Get is enabled from user subscription
            * @returns {boolean}
            */
        get isEnabled(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {UserEntityHistorySubscriptionCreateRequestJson}
            */
        get json(): UserEntityHistorySubscriptionCreateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * User Entity History Subscription Delete Request
    */
export class UserEntityHistorySubscriptionDeleteRequest {
        constructor(request: UserEntityHistorySubscriptionDeleteRequest);
        constructor(requestJson: UserEntityHistorySubscriptionDeleteRequestJson);
        constructor(entityUuid: string);
        /**
            * Get entity uuid of delete request
            * @returns {string}
            */
        get entityUuid(): string;
        /**
            * Get the json representation of this class.
            * @returns {UserEntityHistorySubscriptionDeleteRequestJson}
            */
        get json(): UserEntityHistorySubscriptionDeleteRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * User Entity History Subscription
    */
export class UserEntityHistorySubscription {
        constructor(_json: UserEntityHistorySubscriptionJson);
        /**
            * Get entity type from user subscription
            * @returns {EntityType}
            */
        get entityType(): EntityType;
        /**
            * Get entity uuid from user subscription
            * @returns {string}
            */
        get entityUuid(): string;
        /**
            * Get username from user subscription
            * @returns {string}
            */
        get username(): string;
        /**
            * Get email from user subscription
            * @returns {string}
            */
        get email(): string;
        /**
            * Get frequency from user subscription
            * @returns {FrequencyEnum}
            */
        get frequency(): FrequencyEnum;
        /**
            * Get is enabled from user subscription
            * @returns {boolean}
            */
        get isEnabled(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {UserEntityHistorySubscriptionJson}
            */
        get json(): UserEntityHistorySubscriptionJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * User Session.
    */
export class UserSession {
        constructor(_json: UserSessionJson);
        /**
            * Get session id.
            * @returns {string}
            */
        get sessionId(): string;
        /**
            * Get ip address.
            * @returns {string}
            */
        get ipAddress(): string;
        /**
            * Get username.
            * @returns {string}
            */
        get username(): string;
        /**
            * Get start.
            * @returns {number}
            */
        get start(): number;
        /**
            * Get last access.
            * @returns {number}
            */
        get lastAccess(): number;
        /**
            * Get clients.
            * @returns {{ [key: string]: string }}
            */
        get clients(): {
                [key: string]: string;
        };
        /**
            * Get the json representation of this class.
            * @returns {UserSessionJson}
            */
        get json(): UserSessionJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * User Update Request.
    */
export class UserUpdateRequest {
        constructor(userUpdateRequest: UserUpdateRequest);
        constructor(userUpdateRequestJson: UserUpdateRequestJson);
        constructor(fullname: string, phone: string, company: string, address: string, city: string, state: string, zip: string, country: string);
        /**
            * Get the full name.
            * @returns {string}
            */
        get fullname(): string;
        /**
            * Get phone.
            * @returns {string}
            */
        get phone(): string;
        /**
            * Get company.
            * @returns {string}
            */
        get company(): string;
        /**
            * Get address.
            * @returns {string}
            */
        get address(): string;
        /**
            * Get city.
            * @returns {string}
            */
        get city(): string;
        /**
            * Get state.
            * @returns {string}
            */
        get state(): string;
        /**
            * Get zip.
            * @returns {string}
            */
        get zip(): string;
        /**
            * Get country.
            * @returns {string}
            */
        get country(): string;
        /**
            * Get the json representation of this class.
            * @returns {UserUpdateRequestJson}
            */
        get json(): UserUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * UserWithSecurity
    */
export class UserWithSecurity extends User {
        constructor(_apiUser: UserJson);
        /**
            * Set the inventory for user.
            * @param {Array<CompanyInventory> | undefined} value
            */
        set inventory(value: Array<CompanyInventory>);
        /**
            * Get the user companyInventory list.
            * @returns {Array<CompanyInventory> | undefined}
            */
        get inventory(): Array<CompanyInventory>;
        /**
            * Set the roles for user.
            * @param {Map<string, Role>} value
            */
        set rolesCompanyMap(value: Map<string, Role>);
        /**
            * Get a map of user Role by company ID.
            * @returns {Map<string, Role>}
            */
        get rolesCompanyMap(): Map<string, Role>;
        /**
            * Gets a user by username.
            * @param username the user's username
            * @returns {Promise<User>}
            */
        static getUser(username: string): Promise<UserWithSecurity>;
        /**
            * Gets the currently authenticated user.
            * @returns {Promise<User>}
            */
        static getCurrentUser(): Promise<UserWithSecurity>;
        /**
            * Get user with security from an existing user.
            * @param {User} user
            * @returns {Promise<UserWithSecurity>}
            */
        static getUserWithSecurity(user: User): Promise<UserWithSecurity>;
        /**
            * Setup the userWithSecurity class. That will add the needed inventory and roles to the UserWithSecurity class.
            * @param {UserWithSecurity} userWithSecurity
            * @returns {Promise<UserWithSecurity>}
            */
        static setup(userWithSecurity: UserWithSecurity): Promise<UserWithSecurity>;
        /**
            * Get a list of all user's roles.
            * @returns {Promise<Array<Role>>}
            */
        getRoles(): Promise<Array<Role>>;
        /**
            * Check whether or not a user is allowed to perform an action or not.
            * @param {PermissionType} permissionType
            * @param {string} entityUuid
            * @returns {boolean}
            */
        isPermittedTo(permissionType: PermissionType, entityUuid: string): boolean;
        /**
            * Retrieves a new representation of the user from the API.
            * @returns {Promise<User>} promise that resolves with updated user
            */
        refresh(): Promise<UserWithSecurity>;
}

/**
    * User.
    */
export class User {
        constructor(_apiUser: UserJson);
        /**
            * Gets a user by username.
            * @param username the user's username
            * @returns {Promise<User>}
            */
        static getUser(username: string): Promise<User>;
        /**
            * Gets the currently authenticated user.
            * @returns {Promise<User>}
            */
        static getCurrentUser(): Promise<User>;
        /**
            * Gets the user's username.
            * @returns {string} username
            */
        get username(): string;
        /**
            * Gets the user's address.
            * @returns {string} address
            */
        get address(): string;
        /**
            * Gets the user's city.
            * @returns {string} city
            */
        get city(): string;
        /**
            * Gets the user's company.
            * @returns {string} company
            */
        get company(): string;
        /**
            * Gets the user's country.
            * @returns {string} country
            */
        get country(): string;
        /**
            * Gets the user's created date.
            * @returns {Date} created date
            */
        get createdDate(): Date;
        /**
            * Gets the user's domain.
            * @returns {string | UserDomainJson}
            */
        get domain(): string | UserDomainJson;
        /**
            * Indicates whether the user is deleted.
            * @returns {boolean} value
            */
        get deleted(): boolean;
        /**
            * Gets the deleted date of the user.
            * @returns {Date} deleted date or null if the user is not deleted
            */
        get deletedDate(): Date | null;
        /**
            * Gets the user's email address.
            * @returns {string} email address
            */
        get email(): string;
        /**
            * Gets the user's full name.
            * @returns {string} full name
            */
        get fullName(): string;
        /**
            * Indicates whether the user is locked out of their account.
            * @returns {boolean} value
            */
        get locked(): boolean;
        /**
            * Gets the phone number of the user.
            * @returns {string} phone number
            */
        get phoneNumber(): string;
        /**
            * Gets the user's state.
            * @returns {string} state
            */
        get state(): string;
        /**
            * Gets the user type.
            * @returns {UserType} user type
            */
        get userType(): UserType;
        /**
            * Gets the user's zip code.
            * @returns {string} zip code.
            */
        get zip(): string;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {UserJson} the API User object
            */
        get json(): UserJson;
        /**
            * Retrieves a new representation of the user from the API.
            * @returns {Promise<User>} promise that resolves with updated user
            */
        refresh(): Promise<User>;
        /**
            * Update the user.
            * @param {UserUpdateRequest} request
            * @returns {Promise<User>}
            */
        update(request: UserUpdateRequest): Promise<User>;
        /**
            * Delete the current user.
            * @returns {Promise<void>}
            * @throws Error
            */
        delete(): Promise<any>;
        /**
            * Gets the user's inventory within the specified company..
            * @param {string} companyId the ID of the company to retrieve inventory for
            * @returns {Promise<CompanyInventory>}  entity inventory
            * @throws Error
            */
        getInventoryInCompany(companyId: string): Promise<CompanyInventory>;
        /**
            * Gets the user's entity inventory.
            * @returns {Promise<Array<CompanyInventory>>} user's entity inventory
            */
        getInventory(): Promise<Array<CompanyInventory>>;
        /**
            * Gets the user's list of companies.
            * @returns {Promise<Array<Company>>} user's list of companies
            */
        getCompanies(): Promise<Array<Company>>;
        /**
            * Gets the user's role for a company
            * @param {string} companyUuid
            * @returns {Promise<Role>}
            */
        getRole(companyUuid: string): Promise<Role>;
        /**
            * Assign a role to a user.
            * @param {string} companyUuid
            * @param {string} roleUuid
            * @returns {Promise<any>}
            */
        assignRole(companyUuid: string, roleUuid: string): Promise<any>;
        /**
            * Un-assign a role from a user.
            * @param {string} companyUuid
            * @returns {Promise<any>}
            */
        unassignRole(companyUuid: string): Promise<any>;
        /**
            * Get active sessions for a user.
            * @returns {Promise<Array<UserSession>>} a promise that resolves to a list of active user sessions.
            */
        getActiveSessions(): Promise<Array<UserSession>>;
        /**
            * End all active user sessions.
            * @returns {Promise<any>}
            */
        endAllActiveSessions(): Promise<any>;
        /**
            * Updates the user's profile picture.
            * @param {JpegImage} pictureBytes
            * @returns {Promise<any>}
            */
        updatePicture(picture: JpegImage): Promise<any>;
        /**
            * Get the user picture.
            * @returns {Promise<JpegImage>}
            */
        getPicture(): Promise<JpegImage>;
        /**
            * Move a user message to a specified folder.
            * @param {string} uuid
            * @param {MoveMessageRequest} spec
            */
        moveMessage(uuid: string, spec: MoveMessageRequest): Promise<InboxMessage>;
        /**
            * Get a inbox message.
            * @param {string} uuid
            */
        getMessage(uuid: string): Promise<InboxMessage>;
        /**
            * Mark message as read.
            * @param {string} uuid
            */
        markMessageAsRead(uuid: string): Promise<InboxMessage>;
        /**
            * Updates a batch of inbox messages.
            * @param {BatchInboxUpdateRequest} batchUpdate
            */
        batchInboxUpdate(batchUpdate: BatchInboxUpdateRequest): Promise<any>;
        /**
            * Mark all messages in a folder as read.
            * @param {InboxMarkAllAsReadRequest} request
            */
        markAllMessagesAsRead(request: InboxMarkAllAsReadRequest): Promise<any>;
        /**
            * Deletes inbox message.
            * @param {string} uuid
            */
        deleteMessage(uuid: string): Promise<InboxMessage>;
        /**
            * Get unread message count.
            * @param {MessageFolder} folder
            */
        getUnreadMessageCount(folder?: MessageFolder): Promise<MessageCount>;
        /**
            * Get the message headers.
            * @param {InboxMessageFilterParams} filters
            * @returns {Promise<InboxMessageList>>}
            */
        getMessageHeaders(filters: InboxMessageFilterParams): Promise<InboxMessageList>;
        /**
            * Get the user account events.
            * @param {number} offset
            * @param {number} limit
            * @param {number} dateFrom
            * @param {number} dateTo
            * @returns {Promise<Array<AccountEvent>>}
            */
        getAccountEvents(offset?: number, limit?: number, dateFrom?: number, dateTo?: number): Promise<Array<AccountEvent>>;
        /**
            * Get the orgs for a company and user.
            * @param {string} companyId
            * @param {string} location
            * @returns {Promise<Array<Org>>}
            */
        getOrgs(companyId: string, location?: string): Promise<Array<Org>>;
        /**
            * Get the vDCS for a company and user.
            * @param {string} companyId
            * @param {string} location
            * @returns {Promise<Array<Vdc>>}
            */
        getVdcs(companyId: string, location?: string): Promise<Array<Vdc>>;
        /**
            * Get the vApps for a company and user.
            * @param {string} companyId
            * @param {string} location
            * @returns {Promise<Array<Vapp>>}
            */
        getVapps(companyId: string, location?: string): Promise<Array<Vapp>>;
        /**
            * Get the VMs for a company and a user.
            * @param {string} companyId
            * @param {string} location
            * @returns {Promise<Array<Vm>>}
            */
        getVms(companyId: string, location?: string): Promise<Array<Vm>>;
        /**
            * Get the media for a company and a user.
            * @param {string} companyId
            * @param {string} location
            * @returns {Promise<Array<Media>>}
            */
        getMedia(companyId: string, location?: string): Promise<Array<Media>>;
        /**
            * Get the vApp templates for a company and user.
            * @param {string} companyId
            * @param {string} location
            * @returns {Promise<Array<VappTemplate>>}
            */
        getVappTemplates(companyId: string, location?: string): Promise<Array<VappTemplate>>;
        /**
            * Get the edges for a company and user.
            * @param {string} companyId
            * @param {string} location
            * @returns {Promise<Array<Edge>>}
            */
        getEdges(companyId: string, location?: string): Promise<Array<Edge>>;
        /**
            * Get the VPGs for the company and user.
            * @param {string} companyId
            * @param {string} location
            * @returns {Promise<Array<VpgSubEntityRequest>>}
            */
        getVpgs(companyId: string, location?: string, expand?: Array<VpgSubEntityRequest>): Promise<Array<ExpandedVpg>>;
        /**
            * Get the cloud tenants for a company and user.
            * @param {string} companyId
            * @param {string} location
            * @returns {Promise<Array<CloudTenant>>}
            */
        getCloudTenants(companyId: string, location?: string): Promise<Array<CloudTenant>>;
        /**
            * Get the backup companies for a company and user.
            * @param {string} companyId
            * @param {string} location
            * @returns {Promise<Array<BaCompany>>}
            */
        getVacCompanies(companyId: string, location?: string): Promise<Array<BaCompany>>;
        /**
            * Get the backup jobs for a company and user.
            * @param {string} companyId
            * @param {string} locationId
            * @returns {Promise<Array<BaJob>>}
            */
        getVacJobs(companyId: string, locationId?: string): Promise<Array<BaJob>>;
        /**
            * Get the org vdc networks for company and user.
            * @param {string} companyId
            * @param {string} location
            * @returns {Promise<Array<OrgVdcNetwork>>}
            */
        getOrgVdcNetworks(companyId: string, location?: string): Promise<Array<InternalNetwork>>;
        /**
            * Get the vApp networks for company and user.
            * @param {string} companyId
            * @param {string} location
            * @returns {Promise<Array<VappNetwork>>}
            */
        getVappNetworks(companyId: string, location?: string): Promise<Array<VappNetwork>>;
        /**
            * Get the catalogs for company and user.
            * @param {string} companyId
            * @param {string} location
            * @returns {Promise<Array<Catalog>>}
            */
        getCatalogs(companyId: string, location?: string): Promise<Array<Catalog>>;
        /**
            * Get the VCC failover plans for a company and user.
            * @param {string} companyId
            * @param {string} location
            * @returns {Promise<Array<VCCFailoverPlan>>}
            */
        getVccFailoverPlans(companyId: string, location?: string): Promise<Array<VCCFailoverPlan>>;
        /**
            * Get the O365 Organizations for a company and user
            * @param {string} companyId
            * @param {string} locationId
            * @return {Promise<Array<O365Organization>>}
            */
        getO365Organizations(companyId: string, locationId?: string): Promise<Array<O365Organization>>;
        /**
            * Get the O365 Jobs for a company and user
            * @param {string} companyId
            * @param {string} locationId
            * @return {Promise<Array<O365Job>>}
            */
        getO365Jobs(companyId: string, locationId?: string): Promise<Array<O365Job>>;
        /**
            * Get the O365 Active Restore Sessions for a company and user
            * @param {string} companyId
            * @param {string} locationId
            * @return {Promise<Array<O365RestoreSession>>}
            */
        getO365RestoreSessions(companyId: string, locationId?: string): Promise<Array<O365RestoreSession>>;
        /**
            * Get entity history subscriptions for a given user.
            * @return {Promise<Array<UserEntityHistorySubscription>>} list of entity history subscriptions
            */
        getEntityHistorySubscriptions(): Promise<Array<UserEntityHistorySubscription>>;
        /**
            * Add an entity history subscription.
            * @param {UserEntityHistorySubscriptionCreateRequest} request
            * @return {Promise<UserEntityHistorySubscription>} the created entity history subscription
            */
        subscribeToEntityHistory(request: UserEntityHistorySubscriptionCreateRequest): Promise<UserEntityHistorySubscription>;
        /**
            * Remove an entity history subscription.
            * @param {UserEntityHistorySubscriptionDeleteRequest} request
            * @return {Promise<unknown>}
            */
        removeEntityHistorySubscription(request: UserEntityHistorySubscriptionDeleteRequest): Promise<unknown>;
        /**
            * List the existing backup groups that are configured for a specific
            * company and user.
            *
            * @param {string} companyId
            * @param {string} location
            * @param {boolean} includeSummaryStats Default is false. (Optional)
            * @param {boolean} includeLastRun Default is false. (Optional)
            * @param {boolean} includeBackupPolicy Default is false. (Optional)
            * @returns {Promise<Array<BackupGroup>>}
            */
        listBackupGroups(companyId: string, location: string, includeSummaryStats?: boolean, includeLastRun?: boolean, includeBackupPolicy?: boolean): Promise<Array<BackupGroup>>;
}

export interface BaBackupFilterParamsJson {
    offset: number;
    limit: number;
    order: PagingOrder;
}

export type HealthState = 'OK' | 'WARNING' | 'ERROR' | 'OTHER';
export interface BaBackupRepositoryJson {
    id: string;
    name: string;
    repository_uid: string;
    server_name: string;
    company_name: string;
    location_name: string;
    capacity: number;
    free_space: number;
    backup_size: number;
    health_state: HealthState;
    backup_server_id: number;
    is_service_provider_repository: boolean;
}

export interface BaBackupResourceJson {
    id: string;
    cloud_repository_name: string;
    storage_quota: number;
    vms_quota: number;
    workstations_quota: number;
    traffic_quota: number;
    wan_acceleration_enabled: boolean;
    used_storage_quota: number;
    used_traffic_quota: number;
    interval_start_time: number | null;
    interval_end_time: number | null;
    backup_repository: BaBackupRepositoryJson | null;
    wan_accelerator: BaWanAcceleratorJson | null;
}

export interface BaBackupResourceUpdateRequestJson {
    storage_quota: number;
}

export interface BaCompanyBackupHistoryJson {
    last_result: string;
    last_active: number | null;
}

export interface BaCompanyJson extends EntityJson {
    name: string;
    crm: string;
    location_id: string;
    contract_uuid: string;
    owner_name: string;
    backup_resources: Array<BaBackupResourceJson> | null;
    last_active: number | null;
    last_result: string;
    uuid: string;
    instance_uid: string;
    cloud_connect_agent_uid: string;
    site_name: string;
    vcd_organization_uid: string;
    tenant_type: string;
    description: string;
    title: string;
    first_name: string;
    last_name: string;
    user_name: string;
    email_address: string;
    is_enabled: boolean;
    tax_id: string;
    telephone: string;
    country: string;
    city: string;
    street: string;
    us_state: string;
    zip_code: string;
    domain: string;
    company_id: string;
    notes: string;
    backup_protection_enabled: boolean;
    backup_protection_period: number;
    network_failover_resources_enabled: boolean;
    number_of_public_ip: number;
    public_ip_enabled: boolean;
    max_concurrent_tasks: number;
    bandwidth_throttling_enabled: boolean;
    allowed_bandwidth: number;
    allowed_bandwidth_units: string;
    gateway_failover_enabled: boolean;
    vms_backed_up: number;
    vms_replicated: number;
    vms_backed_up_to_cloud: number;
    managed_physical_workstations: number;
    managed_cloud_workstations: number;
    managed_physical_servers: number;
    managed_cloud_servers: number;
    expiration_enabled: boolean;
    expiration_date: number | null;
    total_storage_quota: number;
    used_storage_quota: number;
    endpoint: string;
    agent_and_sub_tenant_count: number;
}

export interface BaCompanyUpdateRequestJson {
    name: string;
}

export enum BaJobBottleneckEnum {
    SOURCE = "SOURCE",
    PROXY = "PROXY",
    NETWORK = "NETWORK",
    TARGET = "TARGET",
    SOURCE_WAN_ACCELERATOR = "SOURCE_WAN_ACCELERATOR",
    TARGET_WAN_ACCELERATOR = "TARGET_WAN_ACCELERATOR",
    UNKNOWN = "UNKNOWN"
}
export type BaJobBottleneck = keyof typeof BaJobBottleneckEnum;

export interface BaJobJson {
    uuid: string;
    name: string;
    status: BaJobStatus;
    type: BaJobType;
    last_run: number;
    end_time: number;
    duration: number;
    procession_rate: number;
    avg_duration: number;
    transferred_data: number;
    bottleneck: BaJobBottleneck;
    server_name: string;
    is_enabled: boolean;
    protected_vms: number;
    scheduling_type: BaJobSchedulingType;
    company_id: string;
    location_id: string;
    company_uuid: string;
}

export enum BaJobSchedulingTypeEnum {
    CONTINUOUSLY = "CONTINUOUSLY",
    PERIODICALLY = "PERIODICALLY",
    MONTHLY = "MONTHLY",
    DAILY = "DAILY",
    CHAINED = "CHAINED",
    DISABLED = "DISABLED",
    NOT_SCHEDULED = "NOTSCHEDULED",
    BACKUP_WINDOW = "BACKUPWINDOW",
    UNKNOWN = "UNKNOWN"
}
export type BaJobSchedulingType = 'CONTINUOUSLY' | 'PERIODICALLY' | 'MONTHLY' | 'DAILY' | 'CHAINED' | 'DISABLED' | 'NOTSCHEDULED' | 'BACKUPWINDOW' | 'UNKNOWN';

export enum BaJobStatusEnum {
    UNKNOWN = "UNKNOWN",
    NONE = "NONE",
    IDLE = "IDLE",
    SUCCESS = "SUCCESS",
    WARNING = "WARNING",
    FAILED = "FAILED",
    RUNNING = "RUNNING",
    STARTING = "STARTING",
    STOPPING = "STOPPING",
    ENABLING = "ENABLING",
    DISABLING = "DISABLING",
    WAITING_TAPE = "WAITINGTAPE",
    WAITING_REPOSITORY = "WAITINGREPOSITORY"
}
export type BaJobStatus = 'UNKNOWN' | 'NONE' | 'IDLE' | 'SUCCESS' | 'WARNING' | 'FAILED' | 'RUNNING' | 'STARTING' | 'STOPPING' | 'ENABLING' | 'DISABLING' | 'WAITINGTAPE' | 'WAITINGREPOSITORY';

export enum BaJobTypeEnum {
    UNKNOWN = "UNKNOWN",
    BACKUP_VM = "BACKUPVM",
    REPLICATION_VM = "REPLICATIONVM",
    COPY_VM = "COPYVM",
    COPY_FILE = "COPYFILE",
    FILE_TO_TAPE = "FILETOTAPE",
    BACKUP_TO_TAPE = "BACKUPTOTAPE",
    BACKUP_COPY = "BACKUPCOPY",
    IMMEDIATELY_BACKUP_COPY = "IMMEDIATELYBACKUPCOPY",
    SQL_LOG_BACKUP = "SQLLOGBACKUP",
    ORACLE_LOG_BACKUP = "ORACLELOGBACKUP",
    SURE_BACKUP = "SUREBACKUP",
    AGENT_POLICY = "AGENTPOLICY",
    AGENT_BACKUP_JOB = "AGENTBACKUPJOB",
    BACKUP_FILE = "BACKUPFILE",
    BACKUP_FILE_COPY = "BACKUPFILECOPY",
    AZURE_BACKUP_JOB = "AZUREBACKUPJOB",
    AWS_BACKUP_JOB = "AWSBACKUPJOB"
}
export type BaJobType = 'UNKNOWN' | 'BACKUPVM' | 'REPLICATIONVM' | 'COPYVM' | 'COPYFILE' | 'FILETOTAPE' | 'BACKUPTOTAPE' | 'BACKUPCOPY' | 'IMMEDIATELYBACKUPCOPY' | 'SQLLOGBACKUP' | 'ORACLELOGBACKUP' | 'SUREBACKUP' | 'AGENTPOLICY' | 'AGENTBACKUPJOB' | 'BACKUPFILE' | 'BACKUPFILECOPY' | 'AZUREBACKUPJOB' | 'AWSBACKUPJOB';

export interface BaCompanyPasswordResetRequestJson {
    password: string;
}

export interface BaWanAcceleratorJson {
    id: string;
    name: string;
    cloud_connect_agent_uid: string;
    is_clients_accelerator: boolean;
}

export interface BaCompanyContractUpgradeRequestJson {
    additional_storage_in_gb: number;
}

export interface VacPerfSampleJson {
    used_quota: number;
    quota: number;
    time: number | null;
}

/**
    * BaBackupFilterParams class
    */
export class BaBackupFilterParams {
        constructor(_json: BaBackupFilterParamsJson);
        /**
            * Get offset.
            * @returns {number}
            */
        get offset(): number;
        /**
            * Get limit.
            * @returns {number}
            */
        get limit(): number;
        /**
            * Get order.
            * @returns {PagingOrder}
            */
        get order(): PagingOrder;
        /**
            * Get the json representation of this class.
            * @returns {BaBackupFilterParamsJson}
            */
        get json(): BaBackupFilterParamsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class BaBackupRepository {
        constructor(_json: BaBackupRepositoryJson);
        /**
            * Get id.
            * @returns {string}
            */
        get id(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get repository uid.
            * @returns {string}
            */
        get repositoryUid(): string;
        /**
            * Get server name.
            * @returns {string}
            */
        get serverName(): string;
        /**
            * Get company name.
            * @returns {string}
            */
        get companyName(): string;
        /**
            * Get location name.
            * @returns {string}
            */
        get locationName(): string;
        /**
            * Get capacity.
            * @returns {number}
            */
        get capacity(): number;
        /**
            * Get free space.
            * @returns {number}
            */
        get freeSpace(): number;
        /**
            * Get backup size.
            * @returns {number}
            */
        get backupSize(): number;
        /**
            * Get health state.
            * @returns {HealthState}
            */
        get healthState(): HealthState;
        /**
            * Get backup server id.
            * @returns {number}
            */
        get backupServerId(): number;
        /**
            * Get is service provider repository.
            * @returns {boolean}
            */
        get isServiceProviderRepository(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {BaBackupRepositoryJson}
            */
        get json(): BaBackupRepositoryJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class BaBackupResource {
        constructor(_json: BaBackupResourceJson);
        /**
            * Get id.
            * @returns {string}
            */
        get id(): string;
        /**
            * Get cloud repository name.
            * @returns {string}
            */
        get cloudRepositoryName(): string;
        /**
            * Get storage quota.
            * @returns {number}
            */
        get storageQuota(): number;
        /**
            * Get vms quota.
            * @returns {number}
            */
        get vmsQuota(): number;
        /**
            * Get workstations quota.
            * @returns {number}
            */
        get workstationsQuota(): number;
        /**
            * Get traffic quota.
            * @returns {number}
            */
        get trafficQuota(): number;
        /**
            * Get wan acceleration enabled.
            * @returns {boolean}
            */
        get wanAccelerationEnabled(): boolean;
        /**
            * Get used storage quota.
            * @returns {number}
            */
        get usedStorageQuota(): number;
        /**
            * Get used traffic quota.
            * @returns {number}
            */
        get usedTrafficQuota(): number;
        /**
            * Get interval start time.
            * @returns {Date | null}
            */
        get intervalStartTime(): Date | null;
        /**
            * Get interval end time.
            * @returns {Date | null}
            */
        get intervalEndTime(): Date | null;
        /**
            * Get backup repository.
            * @returns {BaBackupRepository | null}
            */
        get backupRepository(): BaBackupRepository | null;
        /**
            * Get wan accelerator.
            * @returns {BaWanAccelerator | null}
            */
        get wanAccelerator(): BaWanAccelerator | null;
        /**
            * Get the json representation of this class.
            * @returns {BaBackupResourceJson}
            */
        get json(): BaBackupResourceJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class BaBackupResourceUpdateRequest {
        constructor(baBackupResourceUpdateRequest: BaBackupResourceUpdateRequest);
        constructor(baBackupResourceUpdateRequestJson: BaBackupResourceUpdateRequestJson);
        constructor(storageQuota: number);
        /**
            * Get storage quota.
            * @returns {number}
            */
        get storageQuota(): number;
        /**
            * Get the json representation of this class.
            * @returns {BaBackupResourceUpdateRequestJson}
            */
        get json(): BaBackupResourceUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class BaCompanyBackupHistory {
        constructor(_json: BaCompanyBackupHistoryJson);
        /**
            * Get last result.
            * @returns {string}
            */
        get lastResult(): string;
        /**
            * Get last active.
            * @returns {Date | null}
            */
        get lastActive(): Date | null;
        /**
            * Get the json representation of this class.
            * @returns {BaCompanyBackupHistoryJson}
            */
        get json(): BaCompanyBackupHistoryJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class BaCompanyUpdateRequest {
        constructor(baCompanyUpdateRequest: BaCompanyUpdateRequest);
        constructor(baCompanyUpdateRequestJson: BaCompanyUpdateRequestJson);
        constructor(name: string);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get the json representation of this class.
            * @returns {BaCompanyUpdateRequestJson}
            */
        get json(): BaCompanyUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class BaCompany extends Entity {
        constructor(_json: BaCompanyJson);
        /**
            * Refreshes the Ba Company data by retrieving it from the API again.
            * @param {string} uuid the company uuid
            * @returns {Promise<BaCompany>} promise that resolves with this object
            */
        static getVacCompany(uuid: string): Promise<BaCompany>;
        get entityType(): EntityType;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get crm.
            * @returns {string}
            */
        get crm(): string;
        /**
            * Get location id.
            * @returns {string}
            */
        get locationId(): string;
        /**
            * Get contract uuid.
            * @returns {string}
            */
        get contractUuid(): string;
        /**
            * Get owner name.
            * @returns {string}
            */
        get ownerName(): string;
        /**
            * Get backup resources.
            * @returns {Array<BaBackupResource> | null}
            */
        get backupResources(): Array<BaBackupResource> | null;
        /**
            * Get last active.
            * @returns {Date | null}
            */
        get lastActive(): Date | null;
        /**
            * Get last result.
            * @returns {string}
            */
        get lastResult(): string;
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get instance uid.
            * @returns {string}
            */
        get instanceUid(): string;
        /**
            * Get cloud connect agent uid.
            * @returns {string}
            */
        get cloudConnectAgentUid(): string;
        /**
            * Get site name.
            * @returns {string}
            */
        get siteName(): string;
        /**
            * Get vcd organization uid.
            * @returns {string}
            */
        get vcdOrganizationUid(): string;
        /**
            * Get tenant type.
            * @returns {string}
            */
        get tenantType(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get title.
            * @returns {string}
            */
        get title(): string;
        /**
            * Get first name.
            * @returns {string}
            */
        get firstName(): string;
        /**
            * Get last name.
            * @returns {string}
            */
        get lastName(): string;
        /**
            * Get user name.
            * @returns {string}
            */
        get userName(): string;
        /**
            * Get email address.
            * @returns {string}
            */
        get emailAddress(): string;
        /**
            * Get is enabled.
            * @returns {boolean}
            */
        get isEnabled(): boolean;
        /**
            * Get tax id.
            * @returns {string}
            */
        get taxId(): string;
        /**
            * Get telephone.
            * @returns {string}
            */
        get telephone(): string;
        /**
            * Get country.
            * @returns {string}
            */
        get country(): string;
        /**
            * Get city.
            * @returns {string}
            */
        get city(): string;
        /**
            * Get street.
            * @returns {string}
            */
        get street(): string;
        /**
            * Get us state. System ID of a USA states where a company is located.
            * @returns {string}
            */
        get usState(): string;
        /**
            * Get zip code.
            * @returns {string}
            */
        get zipCode(): string;
        /**
            * Get domain.
            * @returns {string}
            */
        get domain(): string;
        /**
            * Get company id.
            * @returns {string}
            */
        get companyId(): string;
        /**
            * Get notes.
            * @returns {string}
            */
        get notes(): string;
        /**
            * Get backup protection enabled.
            * @returns {boolean}
            */
        get backupProtectionEnabled(): boolean;
        /**
            * Get backup protection period.
            * @returns {number}
            */
        get backupProtectionPeriod(): number;
        /**
            * Get network failover resources enabled.
            * @returns {boolean}
            */
        get networkFailoverResourcesEnabled(): boolean;
        /**
            * Get number of public ip.
            * @returns {number}
            */
        get numberOfPublicIp(): number;
        /**
            * Get public ip enabled.
            * @returns {boolean}
            */
        get publicIpEnabled(): boolean;
        /**
            * Get max concurrent tasks.
            * @returns {number}
            */
        get maxConcurrentTasks(): number;
        /**
            * Get bandwidth throttling enabled.
            * @returns {boolean}
            */
        get bandwidthThrottlingEnabled(): boolean;
        /**
            * Get allowed bandwidth.
            * @returns {number}
            */
        get allowedBandwidth(): number;
        /**
            * Get allowed bandwidth units.
            * @returns {string}
            */
        get allowedBandwidthUnits(): string;
        /**
            * Get gateway failover enabled.
            * @returns {boolean}
            */
        get gatewayFailoverEnabled(): boolean;
        /**
            * Get vms backed up.
            * @returns {number}
            */
        get vmsBackedUp(): number;
        /**
            * Get vms replicated.
            * @returns {number}
            */
        get vmsReplicated(): number;
        /**
            * Get vms backed up to cloud.
            * @returns {number}
            */
        get vmsBackedUpToCloud(): number;
        /**
            * Get managed physical workstations.
            * @returns {number}
            */
        get managedPhysicalWorkstations(): number;
        /**
            * Get managed cloud workstations.
            * @returns {number}
            */
        get managedCloudWorkstations(): number;
        /**
            * Get managed physical servers.
            * @returns {number}
            */
        get managedPhysicalServers(): number;
        /**
            * Get managed cloud servers.
            * @returns {number}
            */
        get managedCloudServers(): number;
        /**
            * Get expiration enabled.
            * @returns {boolean}
            */
        get expirationEnabled(): boolean;
        /**
            * Get expiration date.
            * @returns {Date | null}
            */
        get expirationDate(): Date | null;
        /**
            * Get total storage quota.
            * @returns {number}
            */
        get totalStorageQuota(): number;
        /**
            * Get used storage quota.
            * @returns {number}
            */
        get usedStorageQuota(): number;
        /**
            * Get endpoint.
            * @returns {string}
            */
        get endpoint(): string;
        /**
            * Get agent and sub tenant count.
            * @returns {number}
            */
        get agentAndSubTenantCount(): number;
        /**
            * Get the json representation of this class.
            * @returns {BaCompanyJson}
            */
        get json(): BaCompanyJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
        /**
            * Refreshes the Ba Company data by retrieving it from the API again.
            * @returns {Promise<BaCompany>} promise that resolves with this object
            */
        refresh(): Promise<BaCompany>;
        /**
            * Gets the storage usage for the Ba Company
            * @param {number} start
            * @param {number} end
            * @param {PerfIntervalType} interval
            * @param {number} limit
            * @returns {Promise<Array<VacPerfSample>>} array of Vac Perf Samples
            */
        getStorageUsage(start?: number, end?: number, interval?: PerfIntervalType, limit?: number): Promise<Array<VacPerfSample>>;
        /**
            * Gets the backup history for the BaCompany
            * @param {number} offset
            * @param {number} limit
            * @returns {Promise<Array<BaCompanyBackupHistory>>} array of Vac BaCompany Backup History objects
            */
        getBackupHistory(offset?: number, limit?: number): Promise<Array<BaCompanyBackupHistory>>;
        /**
            * @deprecated (we are adding the request at company/location level instead, so this one won't be used anymore.
            * We'll need to remove it at some point.)
            * Upgrades the contract for the BaCompany
            * @param {BaCompanyContractUpgradeRequest} updateContractRequest
            * @returns {Promise}
            */
        upgradeTenantContract(updateContractRequest: BaCompanyContractUpgradeRequest): Promise<unknown>;
        /**
            * Update BaCompany name
            * @param {BaCompanyUpdateRequest} updateRequest
            * @returns {Promise<BaCompany>}
            */
        updateVacCompany(updateRequest: BaCompanyUpdateRequest): Promise<BaCompany>;
        /**
            * Reset the password for a given tenant (BaCompany)
            * @param {BaCompanyPasswordResetRequest} resetPasswordRequest
            * @returns {Promise}
            */
        resetVacCompanyPassword(resetPasswordRequest: BaCompanyPasswordResetRequest): Promise<unknown>;
        /**
            * Update storage quota for a given tenant (BaCompany)
            * @param {BaBackupResourceUpdateRequest} backupResourceUpdateRequest
            * @returns {Promise}
            */
        updateVacCompanyStorageQuota(backupResourceUpdateRequest: BaBackupResourceUpdateRequest): Promise<unknown>;
        /**
            * Delete the VAC company.
            * @returns {Promise}
            */
        deleteVacCompany(): Promise<unknown>;
        /**
            * Get VAC backup directories.
            * @param {BaBackupFilterParams} params The request params
            * @returns {Promise<BaBackupDirectoryList | null>}
            */
        getBackupDirectoryList(params: BaBackupFilterParams): Promise<BaBackupDirectoryList | null>;
        /**
            * Get VAC backup files for a specific directory.
            * @param {string} backupDirectoryId The backup directory ID.
            * @param {BaBackupFilterParams} params The request params
            * @returns {Promise<BaBackupFileList | null>}
            */
        getBackupFileList(backupDirectoryId: string, params: BaBackupFilterParams): Promise<BaBackupFileList | null>;
        /**
            * Gets a list of VAC jobs for a given VAC company.
            * @returns {Promise<Array<BaJob>>} Array of VAC jobs
            */
        getBackupJobs(): Promise<Array<BaJob>>;
}

export class BaJob {
        constructor(_json: BaJobJson);
        /**
            * Get a VAC Job by UUID
            * @param uuid
            * @returns {Promise<BaJob>} promise that resolves with a VAC Job
            */
        static getBackupJob(uuid: string): Promise<BaJob>;
        /**
            * Get UUID.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Name of the job configured in Veeam Backup & Replication.
            * @returns {string}
            */
        get name(): string;
        /**
            * Status of the latest job session. Possible values: Success, Warning, Failed, Running, No Info
            * @returns {BaJobStatus}
            */
        get status(): BaJobStatus;
        /**
            * Veeam Backup & Replication job type.
            * @returns {BaJobType}
            */
        get type(): BaJobType;
        /**
            * Gets date and time when the latest job session started.
            * @returns {Date | null}
            */
        get lastRun(): Date | null;
        /**
            * Gets date and time when the latest job session finished.
            * @returns {Date | null}
            */
        get endTime(): Date | null;
        /**
            * Gets time taken to complete the latest job session in seconds.
            * @returns {number}
            */
        get duration(): number;
        /**
            * Gets rate at which VM data was processed during the latest job session in bytes per second (MB/s).
            * @returns {number}
            */
        get processionRate(): number;
        /**
            * Gets average time taken to complete a job session in seconds.
            * @returns {number}
            */
        get avgDuration(): number;
        /**
            * Gets total amount of data that was transferred to target during the latest job session in MB.
            * @returns {number}
            */
        get transferredData(): number;
        /**
            * Gets bottleneck in the process of transferring the data from source to target.
            * @returns {BaJobBottleneck}
            */
        get bottleneck(): BaJobBottleneck;
        /**
            * Gets name of the Veeam Backup & Replication or Veeam Cloud Connect server on which a job was configured.
            * @returns {string}
            */
        get serverName(): string;
        /**
            * Indicates whether a job schedule is enabled.
            * @returns {boolean}
            */
        get isEnabled(): boolean;
        /**
            * Gets number of VMs protected by the job.
            * @returns {number}
            */
        get protectedVms(): number;
        /**
            * Gets type of schedule configured for the job.
            * @returns {BaJobSchedulingType}
            */
        get schedulingType(): BaJobSchedulingType;
        /**
            * Gets the company id.
            * @returns {string}
            */
        get companyId(): string;
        /**
            * Gets the location id.
            * @returns {string}
            */
        get locationId(): string;
        /**
            * Gets the iland company uuid for the VAC job.
            * @returns {string}
            */
        get companyUuid(): string;
        /**
            * Get the json representation of this class.
            * @returns {BaJobJson}
            */
        get json(): BaJobJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
        /**
            * Refreshes the VAC Job data by retrieving it from the API again.
            * @returns {Promise<BaJob>}
            */
        refresh(): Promise<BaJob>;
        /**
            * Enable a VAC job.
            * @returns {Promise<Task>>}
            */
        enableVacJob(): Promise<Task>;
        /**
            * Disable a VAC job.
            * @returns {Promise<Task>>}
            */
        disableVacJob(): Promise<Task>;
        /**
            * Start a VAC job.
            * @returns {Promise<Task>}
            */
        startVacJob(): Promise<Task>;
        /**
            * Stop a VAC job.
            * @returns {Promise<Task>}
            */
        stopVacJob(): Promise<Task>;
        /**
            * Retry a VAC job.
            * @returns {Promise<Task>}
            */
        retryVacJob(): Promise<Task>;
        /**
            * Get the history for a VAC job given a start and end date.
            * If start or end is not passed then it defaults start to a week ago and sets end as current time.
            * @param {number} start Start date in milliseconds
            * @param {number} end End date in milliseconds
            * @returns {Promise<Array<BaJob>>} List of jobs for the given period
            */
        getVacJobHistory(start?: number, end?: number): Promise<Array<BaJob>>;
}

export class BaCompanyPasswordResetRequest {
        constructor(baCompanyPasswordResetRequest: BaCompanyPasswordResetRequest);
        constructor(baCompanyPasswordResetRequestJson: BaCompanyPasswordResetRequestJson);
        constructor(password: string);
        /**
            * Get password.
            * @returns {string}
            */
        get password(): string;
        /**
            * Get the json representation of this class.
            * @returns {BaCompanyPasswordResetRequestJson}
            */
        get json(): BaCompanyPasswordResetRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class BaWanAccelerator {
        constructor(_json: BaWanAcceleratorJson);
        /**
            * Get id.
            * @returns {string}
            */
        get id(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get cloud connect agent uid.
            * @returns {string}
            */
        get cloudConnectAgentUid(): string;
        /**
            * Get is clients accelerator.
            * @returns {boolean}
            */
        get isClientsAccelerator(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {BaWanAcceleratorJson}
            */
        get json(): BaWanAcceleratorJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export interface BaBackupDirectoryJson {
    uuid: string;
    name: string;
    size_mb: number;
    modified_at: number;
    repository_name: string;
    backup_server_name: string;
    recycled: boolean;
}

export interface BaBackupDirectoryListJson {
    current_page_parameters: BaBackupFilterParamsJson;
    next_page_parameters: BaBackupFilterParamsJson;
    total_records: number;
    last_page: boolean;
    data: Array<BaBackupDirectoryJson>;
}

/**
    * BaBackupDirectoryList class
    */
export class BaBackupDirectoryList {
        constructor(_json: BaBackupDirectoryListJson);
        /**
            * Get current page parameters.
            * @returns {BaBackupFilterParams}
            */
        get currentPageParameters(): BaBackupFilterParams;
        /**
            * Get next page parameters.
            * @returns {BaBackupFilterParams}
            */
        get nextPageParameters(): BaBackupFilterParams;
        /**
            * Get total records.
            * @returns {number}
            */
        get totalRecords(): number;
        /**
            * Get last page.
            * @returns {boolean}
            */
        get lastPage(): boolean;
        /**
            * Get data.
            * @returns {Array<BaBackupDirectory>}
            */
        get data(): Array<BaBackupDirectory>;
        /**
            * Get the json representation of this class.
            * @returns {BaBackupDirectoryListJson}
            */
        get json(): BaBackupDirectoryListJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * BaBackupDirectory class
    */
export class BaBackupDirectory {
        constructor(_json: BaBackupDirectoryJson);
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get size mb.
            * @returns {number}
            */
        get sizeMb(): number;
        /**
            * Get modified at.
            * @returns {Date | null}
            */
        get modifiedAt(): Date | null;
        /**
            * Get repository name.
            * @returns {string}
            */
        get repositoryName(): string;
        /**
            * Get backup server name.
            * @returns {string}
            */
        get backupServerName(): string;
        /**
            * Get recycled.
            * @returns {boolean}
            */
        get recycled(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {BaBackupDirectoryJson}
            */
        get json(): BaBackupDirectoryJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export interface BaBackupFileJson {
    uuid: string;
    name: string;
    type: string;
    size_mb: number;
    modified_at: number;
}

export interface BaBackupFileListJson {
    current_page_parameters: BaBackupFilterParamsJson;
    next_page_parameters: BaBackupFilterParamsJson;
    total_records: number;
    last_page: boolean;
    data: Array<BaBackupFileJson>;
}

/**
    * BaBackupFileList class
    */
export class BaBackupFileList {
        constructor(_json: BaBackupFileListJson);
        /**
            * Get current page parameters.
            * @returns {BaBackupFilterParams}
            */
        get currentPageParameters(): BaBackupFilterParams;
        /**
            * Get next page parameters.
            * @returns {BaBackupFilterParams}
            */
        get nextPageParameters(): BaBackupFilterParams;
        /**
            * Get total records.
            * @returns {number}
            */
        get totalRecords(): number;
        /**
            * Get last page.
            * @returns {boolean}
            */
        get lastPage(): boolean;
        /**
            * Get data.
            * @returns {Array<BaBackupFile>}
            */
        get data(): Array<BaBackupFile>;
        /**
            * Get the json representation of this class.
            * @returns {BaBackupFileListJson}
            */
        get json(): BaBackupFileListJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * BaBackupFile class
    */
export class BaBackupFile {
        constructor(_json: BaBackupFileJson);
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get type.
            * @returns {string}
            */
        get type(): string;
        /**
            * Get size mb.
            * @returns {number}
            */
        get sizeMb(): number;
        /**
            * Get modified at.
            * @returns {Date | null}
            */
        get modifiedAt(): Date | null;
        /**
            * Get the json representation of this class.
            * @returns {BaBackupFileJson}
            */
        get json(): BaBackupFileJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class BaCompanyContractUpgradeRequest {
        constructor(baCompanyContractUpgradeRequest: BaCompanyContractUpgradeRequest);
        constructor(baCompanyContractUpgradeRequestJson: BaCompanyContractUpgradeRequestJson);
        constructor(additionalStorageInGB: number);
        /**
            * Get additional storage in gb.
            * @returns {number}
            */
        get additionalStorageInGb(): number;
        /**
            * Get the json representation of this class.
            * @returns {BaCompanyContractUpgradeRequestJson}
            */
        get json(): BaCompanyContractUpgradeRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VacPerfSample {
        constructor(_json: VacPerfSampleJson);
        /**
            * Get used quota.
            * @returns {number}
            */
        get usedQuota(): number;
        /**
            * Get quota.
            * @returns {number}
            */
        get quota(): number;
        /**
            * Get time.
            * @returns {Date | null}
            */
        get time(): Date | null;
        /**
            * Get the json representation of this class.
            * @returns {VacPerfSampleJson}
            */
        get json(): VacPerfSampleJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export interface VappNetworkDHCPServiceJson {
    vapp_uuid: string;
    network_name: string;
    enabled: boolean;
    ip_range: IpRangeJson;
    default_lease_time: number;
    max_lease_time: number;
}

export interface VappNetworkDHCPServiceUpdateRequestJson {
    enabled: boolean;
    ip_range: IpRangeJson;
    default_lease_time: number;
    max_lease_time: number;
}

export interface VappNetworkFirewallJson {
    vapp_uuid: string;
    network_name: string;
    logging_enabled: boolean;
    enabled: boolean;
    default_action: string;
    rules: Array<VappNetworkFirewallRuleJson>;
}

export interface VappNetworkFirewallRuleJson {
    description: string;
    destination_ip: string;
    destination_port_range: string;
    direction: string;
    icmp_sub_type: string;
    id: string;
    policy: string;
    port: number;
    protocols: Array<string>;
    source_ip: string;
    source_port: number;
    source_port_range: string;
    logging_enabled: boolean;
    enabled: boolean;
    match_on_translate: boolean;
    rule_index: number;
}

export interface VappNetworkFirewallRuleRequestJson {
    description: string;
    destination_ip: string;
    destination_port_range: string;
    direction: string;
    icmp_sub_type: string;
    policy: string;
    port: number;
    protocols: Array<string>;
    source_ip: string;
    source_port: number;
    source_port_range: string;
    logging_enabled: boolean;
    enabled: boolean;
    match_on_translate: boolean;
}

export interface VappNetworkFirewallUpdateRequestJson {
    logging_enabled: boolean;
    enabled: boolean;
    default_action: string;
    rules: Array<VappNetworkFirewallRuleRequestJson>;
}

export interface VappNetworkInterfaceJson {
    vapp_uuid: string;
    vapp_network_uuid: string;
    vm_uuid: string;
    vnic_id: number;
    ip_address: string;
    vm_local_id: string;
    ip_translation_mapped: boolean;
    vm_name: string;
}

export interface VappNetworkIpTranslationNATRuleJson {
    mapping_mode: string;
    vm_interface: string;
    external_ip: string;
    vm_local_id: string;
}

export interface VappNetworkIpTranslationNATRuleRequestJson {
    mapping_mode: string;
    vm_interface: string;
    external_ip: string;
    vm_local_id: string;
}

/**
  * Interface for vApp Network JSON properties.
  */
export interface VappNetworkJson extends AbstractNetworkJson {
    vapp_uuid: string;
    router_external_ip: string;
}

export interface VappNetworkNATServiceJson {
    vapp_uuid: string;
    network_name: string;
    enabled: boolean;
    type: string;
    ip_translation_rules: Array<VappNetworkIpTranslationNATRuleJson>;
    port_forwarding_rules: Array<VappNetworkPortForwardNATRuleJson>;
    enable_ip_masquerade: boolean;
}

export type VappNetworkNATServiceType = 'PORT_FORWARDING' | 'IP_TRANSLATION';
export interface VappNetworkNATServiceUpdateRequestJson {
    enabled: boolean;
    type: VappNetworkNATServiceType;
    ip_translation_rules: Array<VappNetworkIpTranslationNATRuleRequestJson>;
    port_forwarding_rules: Array<VappNetworkPortForwardNATRuleRequestJson>;
    enable_ip_masquerade: boolean;
}

export interface VappNetworkPortForwardNATRuleJson {
    external_port: string;
    forward_to_port: string;
    protocol: string;
    vm_interface: string;
    vm_local_id: string;
}

export interface VappNetworkPortForwardNATRuleRequestJson {
    external_port: string;
    forward_to_port: string;
    protocol: string;
    vm_interface: string;
    vm_local_id: string;
}

export interface VappNetworkStaticRouteJson {
    name: string;
    network: string;
    next_hop_ip: string;
}

export interface VappNetworkStaticRouteRequestJson {
    name: string;
    network: string;
    next_hop_ip: string;
}

export interface VappNetworkStaticRoutingServiceJson {
    vapp_uuid: string;
    network_name: string;
    enabled: boolean;
    static_routes: Array<VappNetworkStaticRouteJson>;
}

export interface VappNetworkStaticRoutingServiceUpdateRequestJson {
    enabled: boolean;
    static_routes: Array<VappNetworkStaticRouteRequestJson>;
}

export interface VappNetworkUpdateRequestJson {
    fence_mode: FenceModeType;
    parent_network_uuid: string;
    description: string;
    name: string;
    primary_dns: string;
    secondary_dns: string;
    dns_suffix: string;
    inherited: boolean;
    ip_ranges: Array<IpRangeJson>;
    router_external_ip: string;
}

export class VappNetworkDHCPServiceUpdateRequest {
        constructor(vappNetworkDHCPServiceUpdateRequest: VappNetworkDHCPServiceUpdateRequest);
        constructor(vappNetworkDHCPServiceUpdateRequestJson: VappNetworkDHCPServiceUpdateRequestJson);
        constructor(enabled: boolean, ipRange: IpRangeJson, defaultLeaseTime: number, maxLeaseTime: number);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get ip range.
            * @returns {IpRange}
            */
        get ipRange(): IpRange;
        /**
            * Get default lease time.
            * @returns {number}
            */
        get defaultLeaseTime(): number;
        /**
            * Get max lease time.
            * @returns {number}
            */
        get maxLeaseTime(): number;
        /**
            * Get the json representation of this class.
            * @returns {VappNetworkDHCPServiceUpdateRequestJson}
            */
        get json(): VappNetworkDHCPServiceUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VappNetworkDHCPService {
        constructor(_json: VappNetworkDHCPServiceJson);
        /**
            * Get vapp uuid.
            * @returns {string}
            */
        get vappUuid(): string;
        /**
            * Get network name.
            * @returns {string}
            */
        get networkName(): string;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get ip range.
            * @returns {IpRange}
            */
        get ipRange(): IpRange;
        /**
            * Get default lease time.
            * @returns {number}
            */
        get defaultLeaseTime(): number;
        /**
            * Get max lease time.
            * @returns {number}
            */
        get maxLeaseTime(): number;
        /**
            * Get the json representation of this class.
            * @returns {VappNetworkDHCPServiceJson}
            */
        get json(): VappNetworkDHCPServiceJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VappNetworkFirewallRuleRequest {
        constructor(vappNetworkFirewallRuleRequest: VappNetworkFirewallRuleRequest);
        constructor(vappNetworkFirewallRuleRequestJson: VappNetworkFirewallRuleRequestJson);
        constructor(description: string, destinationIp: string, destinationPortRange: string, direction: string, icmpSubType: string, policy: string, port: number, protocols: Array<string>, sourceIp: string, sourcePort: number, sourcePortRange: string, loggingEnabled: boolean, enabled: boolean, matchOnTranslate: boolean);
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get destination ip.
            * @returns {string}
            */
        get destinationIp(): string;
        /**
            * Get destination port range.
            * @returns {string}
            */
        get destinationPortRange(): string;
        /**
            * Get direction.
            * @returns {string}
            */
        get direction(): string;
        /**
            * Get icmp sub type.
            * @returns {string}
            */
        get icmpSubType(): string;
        /**
            * Get policy.
            * @returns {string}
            */
        get policy(): string;
        /**
            * Get port.
            * @returns {number}
            */
        get port(): number;
        /**
            * Get protocols.
            * @returns {Array<string>}
            */
        get protocols(): Array<string>;
        /**
            * Get source ip.
            * @returns {string}
            */
        get sourceIp(): string;
        /**
            * Get source port.
            * @returns {number}
            */
        get sourcePort(): number;
        /**
            * Get source port range.
            * @returns {string}
            */
        get sourcePortRange(): string;
        /**
            * Get logging enabled.
            * @returns {boolean}
            */
        get loggingEnabled(): boolean;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get match on translate.
            * @returns {boolean}
            */
        get matchOnTranslate(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {VappNetworkFirewallRuleRequestJson}
            */
        get json(): VappNetworkFirewallRuleRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VappNetworkFirewallRule {
        constructor(_json: VappNetworkFirewallRuleJson);
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get destination ip.
            * @returns {string}
            */
        get destinationIp(): string;
        /**
            * Get destination port range.
            * @returns {string}
            */
        get destinationPortRange(): string;
        /**
            * Get direction.
            * @returns {string}
            */
        get direction(): string;
        /**
            * Get icmp sub type.
            * @returns {string}
            */
        get icmpSubType(): string;
        /**
            * Get id.
            * @returns {string}
            */
        get id(): string;
        /**
            * Get policy.
            * @returns {string}
            */
        get policy(): string;
        /**
            * Get port.
            * @returns {number}
            */
        get port(): number;
        /**
            * Get protocols.
            * @returns {Array<string>}
            */
        get protocols(): Array<string>;
        /**
            * Get source ip.
            * @returns {string}
            */
        get sourceIp(): string;
        /**
            * Get source port.
            * @returns {number}
            */
        get sourcePort(): number;
        /**
            * Get source port range.
            * @returns {string}
            */
        get sourcePortRange(): string;
        /**
            * Get logging enabled.
            * @returns {boolean}
            */
        get loggingEnabled(): boolean;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get match on translate.
            * @returns {boolean}
            */
        get matchOnTranslate(): boolean;
        /**
            * Get rule index.
            * @returns {number}
            */
        get ruleIndex(): number;
        /**
            * Get the json representation of this class.
            * @returns {VappNetworkFirewallRuleJson}
            */
        get json(): VappNetworkFirewallRuleJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VappNetworkFirewallUpdateRequest {
        constructor(vappNetworkFirewallUpdateRequest: VappNetworkFirewallUpdateRequest);
        constructor(vappNetworkFirewallUpdateRequestJson: VappNetworkFirewallUpdateRequestJson);
        constructor(loggingEnabled: boolean, enabled: boolean, defaultAction: string, rules: Array<VappNetworkFirewallRuleRequestJson>);
        /**
            * Get logging enabled.
            * @returns {boolean}
            */
        get loggingEnabled(): boolean;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get default action.
            * @returns {string}
            */
        get defaultAction(): string;
        /**
            * Get rules.
            * @returns {Array<VappNetworkFirewallRuleRequest>}
            */
        get rules(): Array<VappNetworkFirewallRuleRequest>;
        /**
            * Get the json representation of this class.
            * @returns {VappNetworkFirewallUpdateRequestJson}
            */
        get json(): VappNetworkFirewallUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VappNetworkFirewall {
        constructor(_json: VappNetworkFirewallJson);
        /**
            * Get vapp uuid.
            * @returns {string}
            */
        get vappUuid(): string;
        /**
            * Get network name.
            * @returns {string}
            */
        get networkName(): string;
        /**
            * Get logging enabled.
            * @returns {boolean}
            */
        get loggingEnabled(): boolean;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get default action.
            * @returns {string}
            */
        get defaultAction(): string;
        /**
            * Get rules.
            * @returns {Array<VappNetworkFirewallRule>}
            */
        get rules(): Array<VappNetworkFirewallRule>;
        /**
            * Get the json representation of this class.
            * @returns {VappNetworkFirewallJson}
            */
        get json(): VappNetworkFirewallJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VappNetworkInterface {
        constructor(_json: VappNetworkInterfaceJson);
        /**
            * Get vapp uuid.
            * @returns {string}
            */
        get vappUuid(): string;
        /**
            * Get vapp network uuid.
            * @returns {string}
            */
        get vappNetworkUuid(): string;
        /**
            * Get vm uuid.
            * @returns {string}
            */
        get vmUuid(): string;
        /**
            * Get vnic id.
            * @returns {number}
            */
        get vnicId(): number;
        /**
            * Get ip address.
            * @returns {string}
            */
        get ipAddress(): string;
        /**
            * Get vm local id.
            * @returns {string}
            */
        get vmLocalId(): string;
        /**
            * Get ip translation mapped.
            * @returns {boolean}
            */
        get ipTranslationMapped(): boolean;
        /**
            * Get vm name.
            * @returns {string}
            */
        get vmName(): string;
        /**
            * Get the json representation of this class.
            * @returns {VappNetworkInterfaceJson}
            */
        get json(): VappNetworkInterfaceJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VappNetworkIpTranslationNATRuleRequest {
        constructor(vappNetworkIpTranslationNATRuleRequest: VappNetworkIpTranslationNATRuleRequest);
        constructor(vappNetworkIpTranslationNATRuleRequestJson: VappNetworkIpTranslationNATRuleRequestJson);
        constructor(mappingMode: string, vmInterface: string, externalIp: string, vmLocalId: string);
        /**
            * Get mapping mode.
            * @returns {string}
            */
        get mappingMode(): string;
        /**
            * Get vm interface.
            * @returns {string}
            */
        get vmInterface(): string;
        /**
            * Get external ip.
            * @returns {string}
            */
        get externalIp(): string;
        /**
            * Get vm local id.
            * @returns {string}
            */
        get vmLocalId(): string;
        /**
            * Get the json representation of this class.
            * @returns {VappNetworkIpTranslationNATRuleRequestJson}
            */
        get json(): VappNetworkIpTranslationNATRuleRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VappNetworkIpTranslationNATRule {
        constructor(_json: VappNetworkIpTranslationNATRuleJson);
        /**
            * Get mapping mode.
            * @returns {string}
            */
        get mappingMode(): string;
        /**
            * Get vm interface.
            * @returns {string}
            */
        get vmInterface(): string;
        /**
            * Get external ip.
            * @returns {string}
            */
        get externalIp(): string;
        /**
            * Get vm local id.
            * @returns {string}
            */
        get vmLocalId(): string;
        /**
            * Get the json representation of this class.
            * @returns {VappNetworkIpTranslationNATRuleJson}
            */
        get json(): VappNetworkIpTranslationNATRuleJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VappNetworkNATServiceUpdateRequest {
        constructor(vappNetworkNATServiceUpdateRequest: VappNetworkNATServiceUpdateRequest);
        constructor(vappNetworkNATServiceUpdateRequestJson: VappNetworkNATServiceUpdateRequestJson);
        constructor(enabled: boolean, type: VappNetworkNATServiceType, ipTranslationRules: Array<VappNetworkIpTranslationNATRuleRequestJson>, portForwardingRules: Array<VappNetworkPortForwardNATRuleRequestJson>, enableIpMasquerade: boolean);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get type.
            * @returns {Type}
            */
        get type(): VappNetworkNATServiceType;
        /**
            * Get ip translation rules.
            * @returns {Array<VappNetworkIpTranslationNATRuleRequest>}
            */
        get ipTranslationRules(): Array<VappNetworkIpTranslationNATRuleRequest>;
        /**
            * Get port forwarding rules.
            * @returns {Array<VappNetworkPortForwardNATRuleRequest>}
            */
        get portForwardingRules(): Array<VappNetworkPortForwardNATRuleRequest>;
        /**
            * Get enable ip masquerade.
            * @returns {boolean}
            */
        get enableIpMasquerade(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {VappNetworkNATServiceUpdateRequestJson}
            */
        get json(): VappNetworkNATServiceUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VappNetworkNATService {
        constructor(_json: VappNetworkNATServiceJson);
        /**
            * Get vapp uuid.
            * @returns {string}
            */
        get vappUuid(): string;
        /**
            * Get network name.
            * @returns {string}
            */
        get networkName(): string;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get type.
            * @returns {string}
            */
        get type(): string;
        /**
            * Get ip translation rules.
            * @returns {Array<VappNetworkIpTranslationNATRule>}
            */
        get ipTranslationRules(): Array<VappNetworkIpTranslationNATRule>;
        /**
            * Get port forwarding rules.
            * @returns {Array<VappNetworkPortForwardNATRule>}
            */
        get portForwardingRules(): Array<VappNetworkPortForwardNATRule>;
        /**
            * Get enable ip masquerade.
            * @returns {boolean}
            */
        get enableIpMasquerade(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {VappNetworkNATServiceJson}
            */
        get json(): VappNetworkNATServiceJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VappNetworkPortForwardNATRuleRequest {
        constructor(vappNetworkPortForwardNATRuleRequest: VappNetworkPortForwardNATRuleRequest);
        constructor(vappNetworkPortForwardNATRuleRequestJson: VappNetworkPortForwardNATRuleRequestJson);
        constructor(externalPort: string, forwardToPort: string, protocol: string, vmInterface: string, vmLocalId: string);
        /**
            * Get external port.
            * @returns {string}
            */
        get externalPort(): string;
        /**
            * Get forward to port.
            * @returns {string}
            */
        get forwardToPort(): string;
        /**
            * Get protocol.
            * @returns {string}
            */
        get protocol(): string;
        /**
            * Get vm interface.
            * @returns {string}
            */
        get vmInterface(): string;
        /**
            * Get vm local id.
            * @returns {string}
            */
        get vmLocalId(): string;
        /**
            * Get the json representation of this class.
            * @returns {VappNetworkPortForwardNATRuleRequestJson}
            */
        get json(): VappNetworkPortForwardNATRuleRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VappNetworkPortForwardNATRule {
        constructor(_json: VappNetworkPortForwardNATRuleJson);
        /**
            * Get external port.
            * @returns {string}
            */
        get externalPort(): string;
        /**
            * Get forward to port.
            * @returns {string}
            */
        get forwardToPort(): string;
        /**
            * Get protocol.
            * @returns {string}
            */
        get protocol(): string;
        /**
            * Get vm interface.
            * @returns {string}
            */
        get vmInterface(): string;
        /**
            * Get vm local id.
            * @returns {string}
            */
        get vmLocalId(): string;
        /**
            * Get the json representation of this class.
            * @returns {VappNetworkPortForwardNATRuleJson}
            */
        get json(): VappNetworkPortForwardNATRuleJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VappNetworkStaticRouteRequest {
        constructor(vappNetworkStaticRouteRequest: VappNetworkStaticRouteRequest);
        constructor(vappNetworkStaticRouteRequestJson: VappNetworkStaticRouteRequestJson);
        constructor(name: string, network: string, nextHopIP: string);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get network.
            * @returns {string}
            */
        get network(): string;
        /**
            * Get next hop ip.
            * @returns {string}
            */
        get nextHopIP(): string;
        /**
            * Get the json representation of this class.
            * @returns {VappNetworkStaticRouteRequestJson}
            */
        get json(): VappNetworkStaticRouteRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VappNetworkStaticRoute {
        constructor(_json: VappNetworkStaticRouteJson);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get network.
            * @returns {string}
            */
        get network(): string;
        /**
            * Get next hop ip.
            * @returns {string}
            */
        get nextHopIP(): string;
        /**
            * Get the json representation of this class.
            * @returns {VappNetworkStaticRouteJson}
            */
        get json(): VappNetworkStaticRouteJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VappNetworkStaticRoutingServiceUpdateRequest {
        constructor(vappNetworkStaticRoutingServiceUpdateRequest: VappNetworkStaticRoutingServiceUpdateRequest);
        constructor(vappNetworkStaticRoutingServiceUpdateRequestJson: VappNetworkStaticRoutingServiceUpdateRequestJson);
        constructor(enabled: boolean, staticRoutes: Array<VappNetworkStaticRouteRequestJson>);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get static routes.
            * @returns {Array<VappNetworkStaticRouteRequest>}
            */
        get staticRoutes(): Array<VappNetworkStaticRouteRequest>;
        /**
            * Get the json representation of this class.
            * @returns {VappNetworkStaticRoutingServiceUpdateRequestJson}
            */
        get json(): VappNetworkStaticRoutingServiceUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VappNetworkStaticRoutingService {
        constructor(_json: VappNetworkStaticRoutingServiceJson);
        /**
            * Get vapp uuid.
            * @returns {string}
            */
        get vappUuid(): string;
        /**
            * Get network name.
            * @returns {string}
            */
        get networkName(): string;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get static routes.
            * @returns {Array<VappNetworkStaticRoute>}
            */
        get staticRoutes(): Array<VappNetworkStaticRoute>;
        /**
            * Get the json representation of this class.
            * @returns {VappNetworkStaticRoutingServiceJson}
            */
        get json(): VappNetworkStaticRoutingServiceJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VappNetworkUpdateRequest {
        constructor(vappNetworkUpdateRequest: VappNetworkUpdateRequest);
        constructor(vappNetworkUpdateRequestJson: VappNetworkUpdateRequestJson);
        constructor(parentNetworkUuid: string, description: string, name: string, primaryDns: string, secondaryDns: string, dnsSuffix: string, inherited: boolean, ipRanges: Array<IpRangeJson>, routerExternalIp: string, fenceMode: FenceModeType);
        /**
            * Get fence mode.
            * @returns {FenceModeType}
            */
        get fenceMode(): FenceModeType;
        /**
            * Get parent network uuid.
            * @returns {string}
            */
        get parentNetworkUuid(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get primary dns.
            * @returns {string}
            */
        get primaryDns(): string;
        /**
            * Get secondary dns.
            * @returns {string}
            */
        get secondaryDns(): string;
        /**
            * Get dns suffix.
            * @returns {string}
            */
        get dnsSuffix(): string;
        /**
            * Get inherited.
            * @returns {boolean}
            */
        get inherited(): boolean;
        /**
            * Get ip ranges.
            * @returns {Array<IpRange>}
            */
        get ipRanges(): Array<IpRange>;
        /**
            * Get router external ip.
            * @returns {string}
            */
        get routerExternalIp(): string;
        /**
            * Get the json representation of this class.
            * @returns {VappNetworkUpdateRequestJson}
            */
        get json(): VappNetworkUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * vApp Network.
    */
export class VappNetwork extends AbstractNetwork {
        constructor(_json: VappNetworkJson);
        /**
            * Gets an vApp network by UUID.
            * @param uuid vApp network UUID
            * @returns {Promise<VappNetwork>} promise that resolves with the vApp network
            */
        static getVappNetwork(uuid: string): Promise<VappNetwork>;
        /**
            * Gets the entity type.
            * @returns {EntityType}
            */
        get entityType(): EntityType;
        /**
            * Gets the UUID of the vApp that the network is associated with.
            * @returns {string} vApp UUID
            */
        get vappUuid(): string | null;
        /**
            * If this is a NAT Routed network, gets the external IP of the router for the vApp Network edge gateway.
            * @returns {string} IP address
            */
        get routerExternalIp(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {VappNetworkJson} the API __json__ object
            */
        get json(): VappNetworkJson;
        /**
            * Refreshes the vApp network data by retrieving it from the API again.
            * @returns {Promise<VappNetwork>} promise that resolves with this object
            */
        refresh(): Promise<VappNetwork>;
        /**
            * Remove a network from the given Vapp.
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        removeNetworkFromVapp(): Promise<Task>;
        /**
            * Update a vApp network's properties. Note that vCloud Director changes the
            * UUID of the network when it is updated.
            * @param {VappNetworkUpdateRequest} vappNetwork VappNetwork update request
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        updateVappNetwork(vappNetwork: VappNetworkUpdateRequest): Promise<Task>;
        /**
            * Get DHCP service for a given vapp network.
            * @returns {Promise<VappNetworkDHCPService>} promise Promise that resolve with VappNetworkDHCPService
            */
        getDHCPService(): Promise<VappNetworkDHCPService>;
        /**
            *
            * @param {VappNetworkDHCPServiceUpdateRequest} dhcpService
            * @returns {Promise<Task>}
            */
        updateDHCPService(dhcpService: VappNetworkDHCPServiceUpdateRequest): Promise<Task>;
        /**
            * Get static routing service for a given vapp network.
            * @returns {Promise<VappNetworkStaticRoutingService>} promise Promise that resolves with a
            * VappNetworkStaticRoutingService
            */
        getStaticRouting(): Promise<VappNetworkStaticRoutingService>;
        /**
            * Get vApp Network VM interfaces that are tied to this vApp network.
            *
            * This is a list of VM vnic interfaces that are currently tied to this vApp
            * network. If the <em>ip_translation_mapped</em>field is true it means the
            * interface already has and IP translation rule currently mapped via NAT.
            * Other fields return such as <em>vm_local_id</em> and <em>vnic_id</em> point
            * to which VM the interface is attached to and in what VNIC spot.
            * @returns {Promise<Array<VappNetworkInterface>>} promise Promise that resolves with a list of VappNetworkInterface
            */
        getVmInterfaces(): Promise<Array<VappNetworkInterface>>;
        /**
            * Update the static routing service for a given vapp network.
            * @param {VappNetworkStaticRoutingServiceUpdateRequest} staticRoutingService vapp network static routing service
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        updateStaticRouting(staticRoutingService: VappNetworkStaticRoutingServiceUpdateRequest): Promise<Task>;
        /**
            * Get NAT service for a given vapp network
            * @returns {Promise<VappNetworkNATService>}
            */
        getNATService(): Promise<VappNetworkNATService>;
        /**
            * Get a firewall for a given vapp network.
            * @returns {Promise<VappNetworkFirewall>} promise Promise that resolves with a VappNetworkFirewall
            */
        getFirewall(): Promise<VappNetworkFirewall>;
        /**
            * Update the NAT service for a given vapp network
            * @param {VappNetworkNATServiceUpdateRequest} natService vapp network nat service
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        updateNAT(natService: VappNetworkNATServiceUpdateRequest): Promise<Task>;
        /**
            * Update a firewall for a given vApp Network.
            * @param {VappNetworkFirewallUpdateRequest} firewall vapp firewall
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        updateFirewall(firewall: VappNetworkFirewallUpdateRequest): Promise<Task>;
}

/**
  * Eula Section JSON properties
  */
export interface EulaSectionJson {
    info: string;
    license: string;
}

/**
  * Template Disk Configuration JSON.
  */
export interface TemplateDiskConfigurationJson {
    name: string;
    size_in_bytes: number;
    disk_type: DiskType;
}

/**
  * Template VNIC Configuration Response JSON.
  */
export interface TemplateVnicConfigurationJson {
    network_name: string;
    ip_assignment_mode: IpAddressingModeType;
    ip_address: string;
    primary_vnic: boolean;
    network_adapter_type: AdapterType;
    needs_customization: boolean;
    connected: boolean;
}

/**
  * Vapp Template Configuration Response JSON.
  */
export interface VappTemplateConfigurationJson {
    uuid: string;
    name: string;
    description: string;
    vms: Array<VmTemplateConfigurationJson>;
    networks: Array<VappTemplateNetworkConfigurationJson>;
    eula_sections: Array<EulaSectionJson>;
}

/**
  * vApp template Download Details JSON.
  */
export interface VappTemplateDownloadDetailsJson {
    enabled: boolean;
    name: string;
    size_in_bytes: number;
}

/**
  * Interface for VappTemplate JSON representation.
  */
export interface VappTemplateJson extends EntityJson {
    description: string;
    vcloud_href: string;
    status: number;
    size: number;
    customizable: boolean;
    customization_required: boolean;
    gold_master: boolean;
    storage_profile_uuid: string;
    is_public: boolean;
    vdc_uuid: string;
    location_id: string;
    org_uuid: string;
    catalog_uuid: string;
    created_date: number;
    is_expired: boolean;
    vm_templates: Array<VappTemplateVmJson>;
}

/**
  * vApp Template Network Configuration Response JSON.
  */
export interface VappTemplateNetworkConfigurationJson {
    name: string;
    description: string;
    fence_mode: FenceModeType;
    ip_scope: NetworkIpScopeJson;
    parent_network_name: string;
}

/**
  * Vapp Template Update Request JSON.
  */
export interface VappTemplateUpdateRequestJson {
    name: string;
    description: string;
}

export interface VappTemplateVmJson {
    status: number;
    size: number;
    uuid: string;
    name: string;
    fullname: string;
    description: string;
    vcloud_href: string;
    deleted: boolean;
    created_date: number;
    deleted_date: number;
}

/**
  * VM Template Configuration Response JSON.
  */
export interface VmTemplateConfigurationJson {
    uuid: string;
    name: string;
    description: string;
    memory_in_bytes: number;
    number_of_cpus: number;
    number_of_cores_per_socket: number;
    storage_profile_uuid: string;
    hardware_version: string;
    operating_system_version: string;
    expose_cpu_virtualization: boolean;
    computer_name: string;
    disks: Array<TemplateDiskConfigurationJson>;
    vnics: Array<TemplateVnicConfigurationJson>;
    eula_sections: Array<EulaSectionJson>;
}

/**
    * EULA Section
    */
export class EulaSection {
        constructor(_json: EulaSectionJson);
        /**
            * Get info for Eula Section
            * @returns {string}
            */
        get info(): string;
        /**
            * Get license for Eula Section
            * @returns {string}
            */
        get license(): string;
        /**
            * Get the json representation of this class.
            * @returns {EulaSectionJson}
            */
        get json(): EulaSectionJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Template Disk Configuration.
    */
export class TemplateDiskConfiguration {
        constructor(_json: TemplateDiskConfigurationJson);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get size in bytes.
            * @returns {number}
            */
        get sizeInBytes(): number;
        /**
            * Get disk type.
            * @returns {DiskType}
            */
        get diskType(): DiskType;
        /**
            * Get the json representation of this class.
            * @returns {TemplateDiskConfigurationJson}
            */
        get json(): TemplateDiskConfigurationJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Template VNIC Configuration Response.
    */
export class TemplateVnicConfiguration {
        constructor(_json: TemplateVnicConfigurationJson);
        /**
            * Get network name.
            * @returns {string}
            */
        get networkName(): string;
        /**
            * Get ip assignment mode.
            * @returns {IpAddressingModeType}
            */
        get ipAssignmentMode(): IpAddressingModeType;
        /**
            * Get ip address.
            * @returns {string}
            */
        get ipAddress(): string;
        /**
            * Get primary vnic.
            * @returns {boolean}
            */
        get primaryVnic(): boolean;
        /**
            * Get network adapter type.
            * @returns {AdapterType}
            */
        get networkAdapterType(): AdapterType;
        /**
            * Get needs customization.
            * @returns {boolean}
            */
        get needsCustomization(): boolean;
        /**
            * Get connected.
            * @returns {boolean}
            */
        get connected(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {TemplateVnicConfigurationJson}
            */
        get json(): TemplateVnicConfigurationJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Vapp Template Configuration Response.
    */
export class VappTemplateConfiguration {
        constructor(_json: VappTemplateConfigurationJson);
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get vms.
            * @returns {Array<VmTemplateConfigurationJson>}
            */
        get vms(): Array<VmTemplateConfiguration>;
        /**
            * Get networks.
            * @returns {Array<VappTemplateNetworkConfiguration>}
            */
        get networks(): Array<VappTemplateNetworkConfiguration>;
        /**
            * Get eula sections if any exist
            * @return {Array<EulaSection>}
            */
        get eulaSections(): Array<EulaSection>;
        /**
            * Get the json representation of this class.
            * @returns {VappTemplateConfigurationJson}
            */
        get json(): VappTemplateConfigurationJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * vApp template Download Details.
    */
export class VappTemplateDownloadDetails {
        constructor(_json: VappTemplateDownloadDetailsJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get size in bytes.
            * @returns {number}
            */
        get sizeInBytes(): number;
        /**
            * Get the json representation of this class.
            * @returns {VappTemplateDownloadDetailsJson}
            */
        get json(): VappTemplateDownloadDetailsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * vApp Template Network Configuration Response.
    */
export class VappTemplateNetworkConfiguration {
        constructor(_json: VappTemplateNetworkConfigurationJson);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get fence mode.
            * @returns {FenceModeType}
            */
        get fenceMode(): FenceModeType;
        /**
            * Get ip scope.
            * @returns {NetworkIpScope}
            */
        get ipScope(): NetworkIpScope;
        /**
            * Get parent network name.
            * @returns {string}
            */
        get parentNetworkName(): string;
        /**
            * Get the json representation of this class.
            * @returns {VappTemplateNetworkConfigurationJson}
            */
        get json(): VappTemplateNetworkConfigurationJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Vapp Template Update Request.
    */
export class VappTemplateUpdateRequest {
        constructor(vappTemplateUpdateRequest: VappTemplateUpdateRequest);
        constructor(vappTemplateUpdateRequestJson: VappTemplateUpdateRequestJson);
        constructor(name: string, description: string);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get the json representation of this class.
            * @returns {VappTemplateUpdateRequestJson}
            */
        get json(): VappTemplateUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VappTemplateVm {
        constructor(_json: VappTemplateVmJson);
        /**
            * Get status.
            * @returns {number}
            */
        get status(): number;
        /**
            * Get size.
            * @returns {number}
            */
        get size(): number;
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get fullname.
            * @returns {string}
            */
        get fullname(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get vcloud href.
            * @returns {string}
            */
        get vcloudHref(): string;
        /**
            * Get deleted.
            * @returns {boolean}
            */
        get deleted(): boolean;
        /**
            * Get created date.
            * @returns {number}
            */
        get createdDate(): number;
        /**
            * Get deleted date.
            * @returns {number}
            */
        get deletedDate(): number;
        /**
            * Get the json representation of this class.
            * @returns {VappTemplateVmJson}
            */
        get json(): VappTemplateVmJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * VappTemplate
    */
export class VappTemplate extends Entity {
        constructor(_json: VappTemplateJson);
        /**
            * Get the VappTemplate from API.
            * @param {string} uuid
            * @returns {Promise<VappTemplate>} promise that resolves with the VappTemplate.
            */
        static getVappTemplate(uuid: string): Promise<VappTemplate>;
        /**
            * Get VappTemplate entity type.
            * @returns {EntityType}
            */
        get entityType(): EntityType;
        /**
            * Get VappTemplate description
            * @returns {string}
            */
        get description(): string;
        /**
            * Get VappTemplate vCloudHref.
            * @returns {string}
            */
        get vcloudHref(): string;
        /**
            * Get VappTemplate status
            * @returns {number}
            */
        get status(): number;
        /**
            * Get VappTemplate size.
            * @returns {number}
            */
        get size(): number;
        /**
            * Indicate whether the VappTemplate is customisable or not.
            * @returns {boolean}
            */
        get isCustomisable(): boolean;
        /**
            * Indicate whether the VappTemplate customization is required or not.
            * @returns {boolean}
            */
        get isCustomizationRequired(): boolean;
        /**
            * Indicate whether the VappTemplate is gold master or not.
            * @returns {boolean}
            */
        get isGoldMaster(): boolean;
        /**
            * Indicate whether the VappTemplate is public or not.
            * @returns {boolean}
            */
        get isPublic(): boolean;
        /**
            * Get VappTemplate storage profile uuid.
            * @returns {string}
            */
        get storageProfileUuid(): string;
        /**
            * Get VappTemplate vDc uuid
            * @returns {string}
            */
        get vdcUuid(): string;
        /**
            * Get VappTemplate location ID
            * @returns {string}
            */
        get locationId(): string;
        /**
            * Get VappTemplate org uuid
            * @returns {string}
            */
        get orgUuid(): string;
        /**
            * Get VappTemplate catalog uuid
            * @returns {string}
            */
        get catalogUuid(): string;
        /**
            * Get VappTemplate creation date
            * @returns {Date}
            */
        get createdDate(): Date;
        /**
            * Indicate whether the VappTemplate is expired or not.
            * @returns {boolean}
            */
        get isExpired(): boolean;
        /**
            * Get vm templates.
            * @returns {Array<VappTemplateVm>}
            */
        get vmTemplates(): Array<VappTemplateVm>;
        /**
            * Gets the raw JSON object from the API.
            * @returns {VappTemplateJson} the API __json__ object
            */
        get json(): VappTemplateJson;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Refreshes the VappTemplate data by retrieving it from the API again.
            * @returns {Promise<VappTemplate>} promise that resolves with this object
            */
        refresh(): Promise<VappTemplate>;
        /**
            * Update a Vapp Template.
            * Capable of updating the templates name, and description.
            * @param {VappTemplateUpdateRequest} req vapp template update request
            * @returns {Promise<Task>}
            */
        updateVappTemplate(req: VappTemplateUpdateRequest): Promise<Task>;
        /**
            * Delete a Vapp template.
            * @returns {Promise<Task>}
            */
        deleteVappTemplate(): Promise<Task>;
        /**
            * Retrieve a vApp Template's VMs.
            * @returns {Promise<Array<VappTemplateVm>>} promise Promise that resolves with a list of VappTemplateVm
            */
        getVappTemplateVms(): Promise<Array<VappTemplateVm>>;
        /**
            * Retrieve a vApp Template's detailed configuration.
            * @returns {Promise<VappTemplateConfiguration>} promise Promise that resolves with VappTemplateConfiguration
            */
        getVappTemplateConfiguration(): Promise<VappTemplateConfiguration>;
        /**
            * Enable the download of the vapp template. Returns a CoreTask which monitors
            * the progress of the download.
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        enableVappTemplateDownload(): Promise<Task>;
        /**
            * Gets download details for the vApp Template. Details include whether the
            * template is enabled for download, and, if enabled, the size and name of the
            * download.
            * @returns {Promise<VappTemplateDownloadDetails>} promise Promise that resolves with VappTemplateDownloadDetails
            */
        getDownloadDetails(): Promise<VappTemplateDownloadDetails>;
        /**
            * Get a link to download the vApp Template.
            * @returns {string}
            */
        getDownloadLink(): string;
        /**
            * Gets the vApp Template's metadata.
            * @returns {Promise<Array<Metadata<MetadataType>>>} promise Promise that resolves with a list of Metadata
            */
        getMetadata(): Promise<Array<Metadata<MetadataType>>>;
        /**
            * Updates the vApp Template's metadata.
            * @param {Array<Metadata<MetadataType>>} metadata the new array of metadata
            * @returns {Promise<Task>} task promise
            */
        updateMetadata(metadata: Array<Metadata<MetadataType>>): Promise<Task>;
        /**
            * Delete a specific piece of metadata associated with a vapp template by its
            * key.
            * @param {string} key metadata key
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        deleteMetadata(key: string): Promise<Task>;
}

/**
    * VM Template Configuration Response.
    */
export class VmTemplateConfiguration {
        constructor(_json: VmTemplateConfigurationJson);
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get memory in bytes.
            * @returns {number}
            */
        get memoryInBytes(): number;
        /**
            * Get number of cpus.
            * @returns {number}
            */
        get numberOfCpus(): number;
        /**
            * Get number of cores per socket.
            * @returns {number}
            */
        get numberOfCoresPerSocket(): number;
        /**
            * Get storage profile uuid.
            * @returns {string}
            */
        get storageProfileUuid(): string;
        /**
            * Get hardware version.
            * @returns {string}
            */
        get hardwareVersion(): string;
        /**
            * Get operating system version.
            * @returns {string}
            */
        get operatingSystemVersion(): string;
        /**
            * Get expose cpu virtualization.
            * @returns {boolean}
            */
        get exposeCpuVirtualization(): boolean;
        /**
            * Get computer name.
            * @returns {string}
            */
        get computerName(): string;
        /**
            * Get disks.
            * @returns {Array<TemplateDiskConfiguration>}
            */
        get disks(): Array<TemplateDiskConfiguration>;
        /**
            * Get vnics.
            * @returns {Array<TemplateVnicConfiguration>}
            */
        get vnics(): Array<TemplateVnicConfiguration>;
        /**
            * Get eula sections if any exist
            * @return {Array<EulaSection>}
            */
        get eulaSections(): Array<EulaSection>;
        /**
            * Get the json representation of this class.
            * @returns {VmTemplateConfigurationJson}
            */
        get json(): VmTemplateConfigurationJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export interface VappChildVmCopyMoveRequestJson {
    vm_uuid: string;
    storage_profile: string;
}

export interface VappCopyMoveRequestJson {
    name: string;
    description: string;
    vm_specs: Array<VappChildVmCopyMoveRequestJson>;
    vdc_uuid: string;
}

export interface VappDownloadDetailsJson {
    enabled: boolean;
    download_name: string;
    download_size_bytes: number;
}

/**
    * Interface for vApp properties.
    */
export interface VappJson extends EntityJson {
        deployed: boolean;
        status: VappStatus;
        storage_profiles: Array<string>;
        runtime_lease_in_seconds: number;
        storage_lease_in_seconds: number;
        runtime_expire: number | null;
        storage_expire: number | null;
        vdc_uuid: string;
        org_uuid: string;
        location_id: string;
        description: string;
        vcloud_href: string;
        created_date: number;
        is_expired: boolean;
        allocation_model: VdcAllocationModel;
}
/**
    * Specification for a Build Vapp request.
    */
export interface BuildVappRequestJson {
        name: string;
        description: string;
        vms: Array<BuildVmRequestJson>;
}
/**
    * Specification for an Add Vapp request.
    */
export interface AddVappRequestJson {
        vapp_template_uuid: string;
        name: string;
        description: string;
        fence_mode: FenceModeType;
        vms: Array<VmCreateRequestJson>;
        vapp_network: AddVappNetworkInitializationParamsJson;
}
/**
    * Specification for an Add Vapp Network Initialization Params request.
    */
export interface AddVappNetworkInitializationParamsJson {
        name: string;
        description: string;
        deployed: boolean;
        backward_compatibility_mode: boolean;
        retain_net_info_across_deployments: boolean;
        parent_network_uuid: string;
        gateway_address: string;
        network_mask: string;
        primary_dns: string;
        secondary_dns: string;
        dns_suffix: string;
        ip_ranges: Array<IpRangeJson>;
}

export interface VappNetworkCreateRequestJson {
    name: string;
    description: string;
    deployed: boolean;
    backward_compatibility_mode: boolean;
    retain_net_info_across_deployments: boolean;
    parent_network_uuid: string;
    gateway_address: string;
    network_mask: string;
    primary_dns: string;
    secondary_dns: string;
    dns_suffix: string;
    ip_ranges: Array<IpRangeJson>;
}

export interface VappRenameRequestJson {
    name: string;
}

export interface RuntimeLeaseUpdateRequestJson {
    expiration_in_seconds: number;
}

export interface VappStartupSectionItemJson {
    vm_name: string;
    order: number;
    startup_action: string;
    stop_action: string;
    start_delay: number;
    stop_delay: number;
}

export interface VappStartupSectionItemRequestJson {
    vm_name: string;
    ord: number;
    start_action: string;
    stop_action: string;
    start_delay: number;
    stop_delay: number;
}

/**
  * Enumeration of possible vApp statuses from the API.
  */
export type VappStatus = 'POWERED_ON' | 'POWERED_OFF' | 'FAILED_CREATION' | 'INCONSISTENT_STATE' | 'RESOLVED' | 'SUSPENDED' | 'UNKNOWN' | 'UNRECOGNIZED' | 'UNRESOLVED' | 'WAITING_FOR_INPUT' | 'MIXED';

export interface StorageLeaseUpdateRequestJson {
    expiration_in_seconds: number;
}

export interface VappDescriptionUpdateRequestJson {
    description: string;
}

export interface VappResourceSummaryJson {
    reserved_cpu: number;
    reserved_mem: number;
    consumed_cpu: number;
    consumed_mem: number;
    consumed_disk: number;
    provisioned_disk: number;
    configured_disk: number;
    number_of_vms: number;
}

export interface VmSummaryMapResponseJson {
    summaries: {
        [key: string]: VmSummaryJson;
    };
}

/**
    * Vapp resource summary.
    */
export class VappResourceSummary {
        constructor(_json: VappResourceSummaryJson);
        /**
            * Get reserved cpu.
            * @returns {number}
            */
        get reservedCpu(): number;
        /**
            * Get reserved mem.
            * @returns {number}
            */
        get reservedMem(): number;
        /**
            * Get consumed cpu.
            * @returns {number}
            */
        get consumedCpu(): number;
        /**
            * Get consumed mem.
            * @returns {number}
            */
        get consumedMem(): number;
        /**
            * Get consumed disk.
            * @returns {number}
            */
        get consumedDisk(): number;
        /**
            * Get provisioned disk.
            * @returns {number}
            */
        get provisionedDisk(): number;
        /**
            * Get configured disk.
            * @returns {number}
            */
        get configuredDisk(): number;
        /**
            * Get number of vms.
            * @returns {number}
            */
        get numberOfVms(): number;
        /**
            * Get the json representation of this class.
            * @returns {VappResourceSummaryJson}
            */
        get json(): VappResourceSummaryJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Vm resource summary map response.
    */
export class VmResourceSummaryMapResponse {
        constructor(_json: VmSummaryMapResponseJson);
        /**
            * Get summaries.
            * @returns {{ [key: string]: VmSummary }}
            */
        get summaries(): {
                [key: string]: VmSummary;
        };
        /**
            * Get the json representation of this class.
            * @returns {VmSummaryMapResponseJson}
            */
        get json(): VmSummaryMapResponseJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * vApp child VM copy move request.
    */
export class VappChildVmCopyMoveRequest {
        constructor(vappChildVmCopyMoveRequest: VappChildVmCopyMoveRequest);
        constructor(vappChildVmCopyMoveRequestJson: VappChildVmCopyMoveRequestJson);
        constructor(vmUuid: string, storageProfile: string);
        /**
            * Get vm uuid.
            * @returns {string}
            */
        get vmUuid(): string;
        /**
            * Get storage profile.
            * @returns {string}
            */
        get storageProfile(): string;
        /**
            * Get the json representation of this class.
            * @returns {VappChildVmCopyMoveRequestJson}
            */
        get json(): VappChildVmCopyMoveRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * vApp copy move request.
    */
export class VappCopyMoveRequest {
        constructor(vappCopyMoveRequest: VappCopyMoveRequest);
        constructor(vappCopyMoveRequestJson: VappCopyMoveRequestJson);
        constructor(name: string, description: string, vmSpecs: Array<VappChildVmCopyMoveRequestJson>, vdcUuid: string);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get vm specs.
            * @returns {Array<VappChildVmCopyMoveRequest>}
            */
        get vmSpecs(): Array<VappChildVmCopyMoveRequest>;
        /**
            * Get vdc uuid.
            * @returns {string}
            */
        get vdcUuid(): string;
        /**
            * Get the json representation of this class.
            * @returns {VappCopyMoveRequestJson}
            */
        get json(): VappCopyMoveRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VappDownloadDetails {
        constructor(_json: VappDownloadDetailsJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get download name.
            * @returns {string}
            */
        get downloadName(): string;
        /**
            * Get download size bytes.
            * @returns {number}
            */
        get downloadSizeBytes(): number;
        /**
            * Get the json representation of this class.
            * @returns {DownloadDetailsJson}
            */
        get json(): VappDownloadDetailsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VappNetworkCreateRequest {
        constructor(_json: VappNetworkCreateRequestJson);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get deployed.
            * @returns {boolean}
            */
        get deployed(): boolean;
        /**
            * Get backward compatibility mode.
            * @returns {boolean}
            */
        get backwardCompatibilityMode(): boolean;
        /**
            * Get retain net info across deployments.
            * @returns {boolean}
            */
        get retainNetInfoAcrossDeployments(): boolean;
        /**
            * Get parent network uuid.
            * @returns {string}
            */
        get parentNetworkUuid(): string;
        /**
            * Get gateway address.
            * @returns {string}
            */
        get gatewayAddress(): string;
        /**
            * Get network mask.
            * @returns {string}
            */
        get networkMask(): string;
        /**
            * Get primary dns.
            * @returns {string}
            */
        get primaryDns(): string;
        /**
            * Get secondary dns.
            * @returns {string}
            */
        get secondaryDns(): string;
        /**
            * Get dns suffix.
            * @returns {string}
            */
        get dnsSuffix(): string;
        /**
            * Get ip ranges.
            * @returns {Array<IpRangeJson>}
            */
        get ipRanges(): Array<IpRangeJson>;
        /**
            * Get the json representation of this class.
            * @returns {VappNetworkCreateRequestJson}
            */
        get json(): VappNetworkCreateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Request to rename a vApp.
    */
export class VappRenameRequest {
        constructor(vappRenameRequest: VappRenameRequest);
        constructor(vappRenameRequestJson: VappRenameRequestJson);
        constructor(name: string);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get the json representation of this class.
            * @returns {VappRenameRequestJson}
            */
        get json(): VappRenameRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Request to update a vAppruntime lease.
    */
export class RuntimeLeaseUpdateRequest {
        constructor(runtimeLeaseUpdateRequest: RuntimeLeaseUpdateRequest);
        constructor(runtimeLeaseUpdateRequestJson: RuntimeLeaseUpdateRequestJson);
        constructor(expirationInSeconds: number);
        /**
            * Get expiration in seconds.
            * @returns {number}
            */
        get expirationInSeconds(): number;
        /**
            * Get the json representation of this class.
            * @returns {RuntimeLeaseUpdateRequestJson}
            */
        get json(): RuntimeLeaseUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VappStartupSectionItemRequest {
        constructor(vappStartupSectionItemRequest: VappStartupSectionItemRequest);
        constructor(vappStartupSectionItemRequestJson: VappStartupSectionItemRequestJson);
        constructor(vmName: string, ord: number, startAction: string, stopAction: string, startDelay: number, stopDelay: number);
        /**
            * Get vm name.
            * @returns {string}
            */
        get vmName(): string;
        /**
            * Get ord.
            * @returns {number}
            */
        get ord(): number;
        /**
            * Get start action.
            * @returns {string}
            */
        get startAction(): string;
        /**
            * Get stop action.
            * @returns {string}
            */
        get stopAction(): string;
        /**
            * Get start delay.
            * @returns {number}
            */
        get startDelay(): number;
        /**
            * Get stop delay.
            * @returns {number}
            */
        get stopDelay(): number;
        /**
            * Get the json representation of this class.
            * @returns {VappStartupSectionItemRequestJson}
            */
        get json(): VappStartupSectionItemRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VappStartupSectionItem {
        constructor(_json: VappStartupSectionItemJson);
        /**
            * Get vm name.
            * @returns {string}
            */
        get vmName(): string;
        /**
            * Get order.
            * @returns {number}
            */
        get order(): number;
        /**
            * Get startup action.
            * @returns {string}
            */
        get startupAction(): string;
        /**
            * Get stop action.
            * @returns {string}
            */
        get stopAction(): string;
        /**
            * Get start delay.
            * @returns {number}
            */
        get startDelay(): number;
        /**
            * Get stop delay.
            * @returns {number}
            */
        get stopDelay(): number;
        /**
            * Get the json representation of this class.
            * @returns {VappStartupSectionItemJson}
            */
        get json(): VappStartupSectionItemJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Request to update a vApp storage lease.
    */
export class StorageLeaseUpdateRequest {
        constructor(storageLeaseUpdateRequest: StorageLeaseUpdateRequest);
        constructor(storageLeaseUpdateRequestJson: StorageLeaseUpdateRequestJson);
        constructor(expirationInSeconds: number);
        /**
            * Get expiration in seconds.
            * @returns {number}
            */
        get expirationInSeconds(): number;
        /**
            * Get the json representation of this class.
            * @returns {StorageLeaseUpdateRequestJson}
            */
        get json(): StorageLeaseUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Requet to update a vApp description.
    */
export class VappDescriptionUpdateRequest {
        constructor(vappDescriptionUpdateRequest: VappDescriptionUpdateRequest);
        constructor(vappDescriptionUpdateRequestJson: VappDescriptionUpdateRequestJson);
        constructor(description: string);
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get the json representation of this class.
            * @returns {VappDescriptionUpdateRequestJson}
            */
        get json(): VappDescriptionUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Virtual Application.
    */
export class Vapp extends Entity implements EntityWithPerfSamples {
        apiPrefix: string;
        getPerfCounters: () => Promise<Array<PerfCounter>>;
        getPerfSamples: (request: PerfSamplesRequest) => Promise<PerfSamplesSeries>;
        constructor(_json: VappJson);
        /**
            * Gets a vApp by UUID.
            * @param uuid vApp UUID
            * @returns {Promise<Vapp>} promise that resolves with the vApp
            */
        static getVapp(uuid: string): Promise<Vapp>;
        get entityType(): EntityType;
        /**
            * Indicates whether this vApp is currently deployed.
            * @returns {boolean} value
            */
        get deployed(): boolean;
        /**
            * Gets the vApps current power status.
            * @returns {VappPowerStatus} power status
            */
        get powerStatus(): VappPowerStatus;
        /**
            * Gets the storage profiles that are associated with this VM
            * @returns {Array<string>} array of storage profile UUIDs
            */
        get storageProfiles(): Array<string>;
        /**
            * Gets the runtime lease setting, in seconds.
            * @returns {number} runtime lease
            */
        get runtimeLease(): number;
        /**
            * Gets the storage lease setting, in seconds.
            * @returns {number} storage lease
            */
        get storageLease(): number;
        /**
            * Gets the expiration date of the runtime lease, if one is currently active.
            * @returns {Date} runtime lease expiration date
            */
        get runtimeLeaseExpirationDate(): Date | null;
        /**
            * Gets the expiration date of the storage lease, if one is currently active.
            * @returns {Date} storage lease expiration date
            */
        get storageLeaseExpirationDate(): Date | null;
        /**
            * Gets the UUID of the vDC that this vApp is associated with.
            * @returns {string} vDC UUID
            */
        get vdcUuid(): string;
        /**
            * Gets the UUID of the Org that this vApp is associated with.
            * @returns {string} org UUID
            */
        get orgUuid(): string;
        /**
            * Gets the datacenter location identifier for the vApp.
            * @returns {string} datacenter location ID
            */
        get locationId(): string;
        /**
            * Gets the vApps description.
            * @returns {string} description
            */
        get description(): string;
        /**
            * Gets the vCloud HREF of the vApp.
            * @returns {string} vCloud HREF
            */
        get vcloudHref(): string;
        /**
            * Gets the date that this vApp was created.
            * @returns {Date} creation date
            */
        get creationDate(): Date;
        /**
            * Indicates whether this vApp is currently in the expired items bin.
            * @returns {boolean} value
            */
        get expired(): boolean;
        /**
            * Get Vapp's Vdc Allocation Model
            * @returns {VdcAllocationModel} allocation model
            */
        get allocationModel(): VdcAllocationModel;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {VappJson} the API __json__ object
            */
        get json(): VappJson;
        /**
            * Refreshes the vApp data by retrieving it from the API again.
            * @returns {Promise<Vapp>}
            */
        refresh(): Promise<Vapp>;
        /**
            * Update the vApp name.
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        updateName(request: VappRenameRequest): Promise<Task>;
        /**
            * Update the vApp description.
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        updateDescription(request: VappDescriptionUpdateRequest): Promise<Task>;
        /**
            * Gets the vApps child VMs.
            * @returns {Promise<Vm[]>} promise that resolves with an array of child VMs
            */
        getVms(): Promise<Array<Vm>>;
        /**
            * Gets the vApps child vApp Networks.
            * @returns {Promise<VappNetwork[]>} promise that resolves with an array of child vApp Networks
            */
        getVappNetworks(): Promise<Array<VappNetwork>>;
        /**
            * Creates VMs in vApp.
            * @param {Array} buildVmRequestList
            * @returns {Promise<Task>} task response
            */
        buildVms(buildVmRequestList: Array<BuildVmRequestJson>): Promise<Task>;
        /**
            * Delete the vApp.
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        deleteVapp(): Promise<Task>;
        /**
            * Power on the vApp.
            * @param {boolean} forceGuestCustomization Optional param to force guest re-customization on restart
            * defaults to false
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        powerOnVapp(forceGuestCustomization?: boolean): Promise<Task>;
        /**
            * Power off the vApp.
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        powerOffVapp(): Promise<Task>;
        /**
            * Managed shutdown of the vApp using the vApp's startup section settings.
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        managedShutdown(): Promise<Task>;
        /**
            * Suspend the vApp.
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        suspendVapp(): Promise<Task>;
        /**
            * Shutdown the vApp.
            * This action requires VMWare Tools to be installed on each VM in the vApp.
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        shutdownVapp(): Promise<Task>;
        /**
            * Reset the vApp.
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        resetVapp(): Promise<Task>;
        /**
            * Reboot the vApp.
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        rebootVapp(): Promise<Task>;
        /**
            * Get the resource summary for the given vApp.
            * @returns {Promise<VappResourceSummary>} promise Promise that resolves with VappResourceSummary
            */
        getSummary(): Promise<VappResourceSummary>;
        /**
            * Get the snapshot for the given vApp.
            * @returns {Promise<Snapshot>} promise Promise that resolves with Snapshot
            */
        getSnapshot(): Promise<Snapshot>;
        /**
            * Get whether the given vApp has a snapshot.
            * @returns {Promise<HasSnapshot>} promise Promise that resolves with HasSnapshot
            */
        hasVappSnapshot(): Promise<HasSnapshot>;
        /**
            * Create a snapshot.
            * @param {SnapshotCreateRequest} request the snapshot creation request
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        createSnapshot(request: SnapshotCreateRequest): Promise<Task>;
        /**
            * Restore a snapshot.
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        restoreSnapshot(): Promise<Task>;
        /**
            * Remove a snapshot.
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        removeSnapshot(): Promise<Task>;
        /**
            * Gets the vApp's metadata.
            * @returns {Promise<Metadata<MetadataType>[]>}
            * @throws Error if type not found for metadata
            */
        getMetadata(): Promise<Array<Metadata<MetadataType>>>;
        /**
            * Updates the vApp's metadata.
            * @param {Array<Metadata<MetadataType>>} metadata the new array of metadata
            * @returns {Promise<Task>} task promise
            */
        updateMetadata(metadata: Array<Metadata<MetadataType>>): Promise<Task>;
        /**
            * Deletes a metadata entry.
            * @param {string} metadataKey the key of the metadata entry to delete
            * @returns {Promise<Task>} task promise
            */
        deleteMetadata(metadataKey: string): Promise<Task>;
        /**
            * Returns vApp Billing for a given invoice period.
            * If month and year are not explicitly supplied the current invoice period is used.
            * @param {number} year the invoice period year (defaults to current year)
            * @param {number} month the invoice period month (defaults to the current month) must be in range 1-12
            * @returns {Promise<Bill>} promise Promise that resolves with billing for the vApp and given invoice period
            */
        getBilling(year?: number, month?: number): Promise<Bill>;
        /**
            * Get the current billing for a vApp.
            * @returns {Promise<BillingSummary>} promise Promise that resolves with vapp billing
            */
        getCurrentBilling(): Promise<BillingSummary>;
        /**
            *  Get the startup section for a particular Vapp.
            * @returns {Promise<Array<VappStartupSectionItem>>} promise Promise that resolves with a list of
            * VappStartupSectionItem
            */
        getStartupSection(): Promise<Array<VappStartupSectionItem>>;
        /**
            * Add a vapp-network to vapp.
            * @param {VappNetworkCreateRequest} vappNetworkCreateRequest
            * @returns {Promise<Task>}
            */
        addVappNetwork(vappNetworkCreateRequest: VappNetworkCreateRequest): Promise<Task>;
        /**
            * Copy a vApp.
            * @param {VappCopyMoveRequest} the request for the vApp copy
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        copyVapp(spec: VappCopyMoveRequest): Promise<Task>;
        /**
            * Move a vApp.
            * @param {VappCopyMoveRequest} the request for the vApp move
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        moveVapp(spec: VappCopyMoveRequest): Promise<Task>;
        /**
            * Update a vApp runtime lease.
            * @param {RuntimeLeaseUpdateRequest} runtime lease update request
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        updateRuntimeLease(request: RuntimeLeaseUpdateRequest): Promise<Task>;
        /**
            * Update a vApp storage lease.
            * @param {StorageLeaseUpdateRequest} storage lease update request
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        updateStorageLease(request: StorageLeaseUpdateRequest): Promise<Task>;
        /**
            * Update the startup section of a particular Vapp.
            * @param {Array<VappStartupSectionItemRequest>} startupSection
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        updateStartupSection(startupSection: Array<VappStartupSectionItemRequest>): Promise<Task>;
        /**
            * Enable the download of the vapp. Returns a TaskResponse which monitors the
            * progress of the download.
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        enableDownload(): Promise<Task>;
        /**
            * Gets download details for the vApp. Details include whether the vapp is
            * enabled for download, and, if enabled, the size and name of the download.
            * @returns {Promise<VappDownloadDetails>} promise Promise that resolves with VappDownloadDetails
            */
        getDownloadDetails(): Promise<VappDownloadDetails>;
        /**
            * Get vm resource summary map.
            * @returns {Promise<VmResourceSummaryMapResponse>}
            */
        getVmResourceSummaryMap(): Promise<VmResourceSummaryMapResponse>;
        /**
            * Adds an org vDC network to the vApp.
            * @param {string} networkUuid the UUID of the org vDC network
            * @returns {Promise<Task>} a promise that resolves with the task details
            */
        addOrgVdcNetwork(networkUuid: string): Promise<Task>;
        /**
            * Get the vApp's product sections
            * @returns {Promise<Array<ProductSection>>} a promise that resolves with the product sections of the vApp
            */
        getProductSections(): Promise<Array<ProductSection>>;
        /**
            * Update the vApp's product section properties
            * @param request {UpdateProductSectionRequest}
            * @returns {Promise<Task>}
            */
        updateProductSections(request: UpdateProductSectionRequest): Promise<Task>;
        /**
            * Gets the vApp's available storage profiles.
            * @returns {Promise<Array<StorageProfile>>} a promise that resolves with the available storage profiles
            */
        getAvailableStorageProfiles(): Promise<Array<StorageProfile>>;
        /**
            * Retrieve a CSV report email with all event history for a given vApp.
            * @returns {Promise<void>} there is no response object.
            */
        emailEventHistory(email: string): Promise<void>;
        /**
            * Gets the vApp's integrated backup status.
            * @returns {Promise<VappIntegratedBackupStatusDetail>}
            */
        getIntegratedBackupStatus(): Promise<VappIntegratedBackupStatusDetail>;
        /**
            * Gets the vApp's backup status.
            * @return {Promise<VappBackupStatusDetail>}
            */
        getBackupStatus(): Promise<VappBackupStatusDetail>;
}
/**
    * Enumeration of possible vApp power statuses.
    */
export type VappPowerStatus = VappStatus | 'PARTIALLY_POWERED_OFF';

/**
  * Interface for Cloud Tenant JSON properties.
  */
export interface CloudTenantJson extends EntityJson {
    uid: string;
    enabled: boolean;
    resources: {
        [resources: string]: Array<CloudTenantResourceJson>;
    };
    last_result: string;
    last_active: number;
    throttling_enabled: boolean;
    throttling_speed_limit: number;
    throttling_speed_unit: string;
    public_ip_count: number;
    owner_name: string;
    contract_uuid: string;
    location_id: string;
    endpoint: string;
    backup_count: number;
    company_id: string;
}

/**
  * Interface for VCC Failover Plan properties.
  */
export interface VCCFailoverPlanJson extends EntityJson {
    org_uuid: string;
    uid: string;
    description: string;
    last_test: number;
    vcc_tenant_uid: string;
    vcc_tenant_name: string;
    vms: Array<VCCFailoverPlanVmJson>;
    status: VccFailoverPlanStatus;
}
export type VccFailoverPlanStatus = 'UNKNOWN' | 'UNDO_IN_PROGRESS' | 'UNDO_FAILED' | 'READY' | 'IN_PROGRESS' | 'COMPLETED' | 'FAILED';

/**
  * VCC Failover Plan VM JSON.
  */
export interface VCCFailoverPlanVmJson {
    name: string;
    id: string;
}

/**
  * The JSON model for the VCC Failover plan start request.
  */
export interface VccFailoverStartCreateRequestJson {
    start_date: number | undefined;
}

/**
  * Interface for CloudRepository JSON properties.
  */
export interface CloudRepositoryJson {
    display_name: string;
    quota: number;
    used_quota: number;
    wan_accelerator_uuid: string | null;
    wan_accelerator: WanAcceleratorJson | null;
}

/**
    * Cloud Repository.
    */
export class CloudRepository {
        constructor(_json: CloudRepositoryJson);
        /**
            * Gets the display name for the Cloud Repository
            * @returns {string} display name
            */
        get displayName(): string;
        /**
            * Gets the quota for the Cloud Repository
            * @returns {number} quota
            */
        get quota(): number;
        /**
            * Gets the used quota for the Cloud Repository
            * @returns {number} used quota
            */
        get usedQuota(): number;
        /**
            * Gets the Wan Accelerator uuid for the Cloud Repository
            * @returns {string} wan accelerator uuid
            */
        get wanAcceleratorUuid(): string | null;
        /**
            * Gets the Wan Accelerator object for the Cloud Repository
            * @returns {WanAccelerator} wan accelerator
            */
        get wanAccelerator(): WanAccelerator | null;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {CloudRepositoryJson} the API __json__ object
            */
        get json(): CloudRepositoryJson;
}

/**
  * Interface for Cloud Tenant Backup History Json properties.
  */
export interface CloudTenantBackupHistoryJson {
    last_result: string;
    last_active: number;
}

/**
    * Cloud Tenant Backup History.
    */
export class CloudTenantBackupHistory {
        constructor(_json: CloudTenantBackupHistoryJson);
        /**
            * Get last result
            * @returns {string}
            */
        get lastResult(): string;
        /**
            * Get last active
            * @returns {number}
            */
        get lastActive(): number;
        /**
            * Get the string representation of the class.
            * @returns {string}
            */
        toString(): string;
        /**
            * Get the JSON representation of this class.
            * @returns {CloudTenantBackupHistoryJson}
            */
        get json(): CloudTenantBackupHistoryJson;
}

/**
  * Interface for CloudTenantResource JSON properties.
  */
export interface CloudTenantResourceJson {
    repository: CloudRepositoryJson;
}

/**
    * Cloud Tenant Resource.
    */
export class CloudTenantResource {
        constructor(_json: CloudTenantResourceJson);
        /**
            * Gets a CloudRepository object
            * @returns {CloudRepository} cloud repository object
            */
        get repository(): CloudRepository;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {CloudTenantResourceJson} the API __json__ object
            */
        get json(): CloudTenantResourceJson;
}

/**
    * Cloud Tenant.
    */
export class CloudTenant extends Entity {
        constructor(_json: CloudTenantJson);
        /**
            * Gets a Cloud Tenant by UUID.
            * @param {string} uuid
            * @returns {Promise<CloudTenant>} promise that resolves with the Cloud Tenant
            */
        static getCloudTenant(uuid: string): Promise<CloudTenant>;
        get entityType(): EntityType;
        /**
            * Gets the uid of the Cloud Tenant.
            * @returns {string} id value
            */
        get uid(): string;
        /**
            * Indicates whether the Cloud Tenant is enabled.
            * @returns {boolean} value
            */
        get enabled(): boolean;
        /**
            * Gets the resources of the Cloud Tenant.
            * @returns {CloudTenantResource[]} resources
            */
        get resources(): Array<CloudTenantResource>;
        /**
            * Get the last result of the Cloud Tenant.
            * @returns {string} last result
            */
        get lastResult(): string;
        /**
            * Gets the last active of the Cloud Tenant.
            * @returns {number} value
            */
        get lastActive(): number;
        /**
            * Gets the throttling enabled value of the Cloud Tenant.
            * @returns {boolean} value
            */
        get throttlingEnabled(): boolean;
        /**
            * Gets the throttling speed limit of the Cloud Tenant.
            * @returns {number} speed limit
            */
        get throttlingSpeedLimit(): number;
        /**
            * Gets the throttling speed unit of the Cloud Tenant.
            * @returns {string} speed unit
            */
        get throttlingSpeedUnit(): string;
        /**
            * Gets the public IP count of the Cloud Tenant.
            * @returns {number} public ip count
            */
        get publicIpCount(): number;
        /**
            * Gets the backup count of the Cloud Tenant.
            * @returns {number} backup count
            */
        get backupCount(): number;
        /**
            * Gets the company ID of the Cloud Tenant.
            * @returns {string} company ID
            */
        get companyId(): string;
        /**
            * Gets the owner name of the Cloud Tenant.
            * @returns {string} owner name
            */
        get ownerName(): string;
        /**
            * Gets the contract uuid for the Cloud Tenant.
            * @returns {string} contract uuid
            */
        get contractUuid(): string;
        /**
            * Gets the location id of the Cloud Tenant.
            * @returns {string} location id
            */
        get locationId(): string;
        /**
            * Gets the end point of the Cloud Tenant.
            * @returns {string} end point
            */
        get endPoint(): string;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {CloudTenantJson} the API __json__ object
            */
        get json(): CloudTenantJson;
        /**
            * Gets the storage usage for the Cloud Tenant
            * @param {number} start
            * @param {number} end
            * @param {number} limit
            * @param {PerfIntervalType} interval
            * @returns {Promise<VccPerfSample[]>} array of Vcc Perf Samples
            */
        getStorageUsageFor(start: number, end: number, limit: number, interval: PerfIntervalType): Promise<Array<VccPerfSample>>;
        /**
            * Upgrades the contract for the Cloud Tenant
            * @param {UpdateTenantContractRequest} contract
            * @returns {Promise<any>}
            */
        upgradeTenantContract(updateContractRequest: UpdateTenantContractRequest): Promise<any>;
        /**
            * Get the backup history for the Cloud Tenant
            * @param {number} offset
            * @param {number} limit
            * @returns {Promise<CloudTenantBackupHistory[]>} array of Cloud Tenant Backup History objects
            */
        getBackupHistoryFor(offset?: number, limit?: number): Promise<Array<CloudTenantBackupHistory>>;
        /**
            * Refreshes the Cloud Tenant data by retrieving it from the API again.
            * @returns {Promise<CloudTenant>} promise that resolves with this object
            */
        refresh(): Promise<CloudTenant>;
}

/**
    * VccFailoverStartCreateRequest.
    */
export class VccFailoverStartCreateRequest {
        constructor(vccFailoverStartCreateRequest: VccFailoverStartCreateRequest);
        constructor(vccFailoverStartCreateRequestJson: VccFailoverStartCreateRequestJson);
        constructor(startDate: number | undefined);
        /**
            * Get start date.
            * @returns {number}
            */
        get startDate(): number | undefined;
        /**
            * Get the json representation of this class.
            * @returns {VccFailoverStartCreateRequestJson}
            */
        get json(): VccFailoverStartCreateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * VCC Failover Plan VM.
    */
export class VCCFailoverPlanVm {
        constructor(_json: VCCFailoverPlanVmJson);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get id.
            * @returns {string}
            */
        get id(): string;
        /**
            * Get the json representation of this class.
            * @returns {VCCFailoverPlanVmJson}
            */
        get json(): VCCFailoverPlanVmJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * VCC Failover Plan.
    */
export class VCCFailoverPlan extends Entity {
        constructor(_json: VCCFailoverPlanJson);
        /**
            * Gets a VCC Failover Plan by UUID.
            * @param {string} uuid
            * @returns {Promise<VCCFailoverPlan>} promise that resolves with the VCC Failover Plan
            */
        static getFailoverPlan(uuid: string): Promise<VCCFailoverPlan>;
        get entityType(): EntityType;
        /**
            * Get org uuid.
            * @returns {string}
            */
        get orgUuid(): string;
        /**
            * Get uid.
            * @returns {string}
            */
        get uid(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get last test.
            * @returns {number}
            */
        get lastTest(): number;
        /**
            * Get vcc tenant uid.
            * @returns {string}
            */
        get vccTenantUid(): string;
        /**
            * Get vcc tenant name.
            * @returns {string}
            */
        get vccTenantName(): string;
        /**
            * Get vms.
            * @returns {Array<VCCFailoverPlanVm>}
            */
        get vms(): Array<VCCFailoverPlanVm>;
        /**
            * Get status.
            * @returns {VccFailoverPlanStatus}
            */
        get status(): VccFailoverPlanStatus;
        /**
            * Get the json representation of this class.
            * @returns {VCCFailoverPlanJson}
            */
        get json(): VCCFailoverPlanJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
        /**
            * Refreshes the VCC Failover Plan data by retrieving it from the API again.
            * @returns {Promise<VCCFailoverPlan>} promise that resolves with this object
            */
        refresh(): Promise<VCCFailoverPlan>;
        /**
            * Invokes a failover test for this failover plan.
            * @returns {Promise<Task>} async task details
            */
        failoverTest(): Promise<Task>;
        /**
            * Invokes a live failover operation for this failover plan.
            * @returns {Promise<Task>} async task details
            */
        failoverStart(spec: VccFailoverStartCreateRequest): Promise<Task>;
        /**
            * Executes the undo action for a previous failover operation on this failover plan.
            * @returns {Promise<Task>} async task details
            */
        failoverUndo(): Promise<Task>;
}

/**
  * Interface for an Upgrade Tenant Contract Request
  */
export interface UpdateTenantContractRequestJson {
    additional_storage_in_gb: number;
}

/**
    *  Update Tenant Contract Request.
    */
export class UpdateTenantContractRequest {
        constructor(updateTenantContractRequest: UpdateTenantContractRequest);
        constructor(updateTenantContractRequestJson: UpdateTenantContractRequestJson);
        constructor(additionalStorageInGb: number);
        /**
            * Get additional storage in gb.
            * @returns {number}
            */
        get additionalStorageInGb(): number;
        /**
            * Get the json representation of this class.
            * @returns {UpdateTenantContractRequestJson}
            */
        get json(): UpdateTenantContractRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export type PerfIntervalType = 'HOUR' | 'DAY';

/**
  * Interface for Vcc Perf Sample Json properties.
  */
export interface VccPerfSampleJson {
    used_quota: number;
    quota: number;
    time: number;
}

/**
    * Vcc Perf Sample.
    */
export class VccPerfSample {
        constructor(_json: VccPerfSampleJson);
        /**
            * Gets the used quota for the Vcc Perf Sample
            * @returns {number}
            */
        get usedQuota(): number;
        /**
            * Gets the quota for the Vcc Perf Sample
            * @returns {number}
            */
        get quota(): number;
        /**
            * Gets the timestamp for the Vcc Perf Sample
            * @returns {number}
            */
        get timeStamp(): number;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {VccPerfSampleJson} the API __json__ object
            */
        get json(): VccPerfSampleJson;
}

/**
  * Interface for WanAccelerator JSON properties.
  */
export interface WanAcceleratorJson {
    name: string;
    description: string;
    out_of_date: boolean;
    version: string;
    capacity: number;
    traffic_port: number;
    connection_count: number;
    cache_path: string;
}

/**
    * Wan Accelerator.
    */
export class WanAccelerator {
        constructor(_json: WanAcceleratorJson);
        /**
            * Gets the name of the Wan Accelerator
            * @returns {string} name
            */
        get name(): string;
        /**
            * Gets the description of the Wan Accelerator
            * @returns {string} description
            */
        get description(): string;
        /**
            * Gets the is ouf of date of the Wan Accelerator
            * @returns {boolean} is out of date
            */
        get outOfDate(): boolean;
        /**
            * Gets the version of the Wan Accelerator
            * @returns {string} version
            */
        get version(): string;
        /**
            * Gets the capacity of the Wan Accelerator
            * @returns {number} capacity
            */
        get capacity(): number;
        /**
            * Gets the traffic port of the Wan Accelerator
            * @returns {number} port
            */
        get trafficPort(): number;
        /**
            * Gets the connection count of the Wan Accelerator
            * @returns {number} count
            */
        get connectionCount(): number;
        /**
            * Gets the cache path of the Wan Accelerator
            * @returns {string} cache path
            */
        get cachePath(): string;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {WanAcceleratorJson} the API __json__ object
            */
        get json(): WanAcceleratorJson;
}

/**
  * Enumeration of possible VM affinity rule types.
  */
export type AffinityRuleType = 'AFFINITY' | 'ANTI_AFFINITY';

/**
  * Storage Profile Bill API JSON.
  */
export interface StorageProfileBillJson {
    storage_profile_uuid: string;
    total_usage: number;
    total_cost: number;
    res_usage: number;
    res_cost: number;
    burst_usage: number;
    burst_cost: number;
    vm_usage: number;
    catalog_usage: number;
    zerto_journal_storage_usage: number;
    zerto_replicated_storage_usage: number;
}

export interface TemplateVmConfigJson {
    vm_template_uuid: string;
    name: string;
    computer_name: string;
    description: string;
    storage_profile_uuid: string;
    vnics: Array<VmVnicRequestJson>;
}

export interface VappResourceSummaryMapJson {
    summaries: {
        [key: string]: VappResourceSummaryJson;
    };
}

export interface VdcAddVappFromTemplateRequestJson {
    vapp_template_uuid: string;
    name: string;
    description: string;
    vms: Array<TemplateVmConfigJson>;
}

/**
  * Enumerates the possible vDC allocation options.
  * BURST = 'paygo'
  * RES_PLUS_BURST = 'allocation_pool'
  * RES = 'reservation_pool'
  */
export type VdcAllocationModel = 'paygo' | 'allocation_pool' | 'reservation_pool';

/**
    * Interface for vDC JSON properties.
    */
export interface VdcJson extends EntityJson {
        enabled: boolean;
        vcenter_moref: string;
        vcenter_name: string;
        description: string;
        vcloud_href: string;
        vcenter_instance_uuid: string;
        vcenter_href: string;
        allocation_model: VdcAllocationModel;
        reserved_cpu: number;
        reserved_mem: number;
        disk_limit: number;
        alloc_cpu: number;
        alloc_mem: number;
        max_hardware_version: string;
        network_quota: number;
        used_network_count: number;
        location_id: string;
        org_uuid: string;
        has_iaas_backups: boolean;
        has_integrated_backups: boolean;
        has_advanced_backups: boolean;
}
/**
    * Interface for a vDC JSON Summary properties.
    */
export interface VdcSummaryJson {
        reserved_cpu: number;
        reserved_mem: number;
        consumed_cpu: number;
        consumed_mem: number;
        consumed_disk: number;
        provisioned_disk: number;
        number_of_vms: number;
        number_of_vapps: number;
        allocation_cpu: number;
        allocation_memory: number;
        configured_memory: number;
        configured_disk: number;
        configured_cpu: number;
}

/**
  * vDC Storage Profile Summary JSON.
  */
export interface VdcStorageProfileSummaryJson {
    vdc_uuid: string;
    year: number;
    month: number;
    time: number;
    storage_profile_bills: Array<StorageProfileBillJson>;
}

export interface VmAffinityRuleCreateRequestJson {
    name: string;
    is_enabled: boolean;
    type: AffinityRuleType;
    vm_uuids: Array<string>;
    is_mandatory: boolean;
}

/**
  * VM Affinity Rule API JSON interface.
  */
export interface VmAffinityRuleJson {
    vm_uuids: Array<string>;
    enabled: boolean;
    name: string;
    uuid: string;
    type: AffinityRuleType;
    is_mandatory: boolean;
}

export interface VmAffinityRuleUpdateRequestJson {
    uuid: string;
    name: string;
    is_enabled: boolean;
    type: string;
    vm_uuids: Array<string>;
    is_mandatory: boolean;
}

export interface VmResourceSummaryMapJson {
    summaries: {
        [key: string]: VmResourceSummaryJson;
    };
}

/**
  * Distributed Firewall Json.
  */
export interface DistributedFirewallJson {
    rules: Array<DistributedFirewallRuleJson>;
    id: number;
    name: string;
    generation_number: number;
    timestamp: number;
    tcp_strict: boolean;
    stateless: boolean;
    use_sid: boolean;
    type: string;
}

/**
  * Distributed Firewall Layer 2 Object JSON (Ethernet).
  */
export type DistributedFirewallLayer2Json = DistributedFirewallJson;

export type DistributedFirewallLayer2RuleJson = DistributedFirewallRuleJson;

export type DistributedFirewallLayer2RuleUpdateRequestJson = DistributedFirewallRuleUpdateRequestJson;

export type DistributedFirewallLayer2UpdateRequestJson = DistributedFirewallUpdateRequestJson;

/**
  * Distributed Firewall Layer 3 Object Json (General).
  */
export type DistributedFirewallLayer3Json = DistributedFirewallJson;

export type DistributedFirewallLayer3RuleJson = DistributedFirewallRuleJson;

export type DistributedFirewallLayer3RuleUpdateRequestJson = DistributedFirewallRuleUpdateRequestJson;

export type DistributedFirewallLayer3UpdateRequestJson = DistributedFirewallUpdateRequestJson;

export interface DistributedFirewallObjectJson {
    type: string;
    name: string;
    properties: Array<DistributedFirewallObjectPropertyJson>;
}

export interface DistributedFirewallObjectListJson {
    current_page_parameters: ObjectPagingParamsJson;
    next_page_parameters: ObjectPagingParamsJson;
    total_records: number;
    last_page: boolean;
    data: Array<DistributedFirewallObjectJson>;
}

export interface DistributedFirewallObjectPropertyJson {
    name: string;
    value: string;
}

export interface DistributedFirewallObjectTypeJson {
    type: string;
    name: string;
}

export interface DistributedFirewallRestorePointDetailsJson {
    description: string;
    restore_point_time: number;
    data: DistributedFirewallJson;
}

export interface DistributedFirewallRestorePointJson {
    description: string;
    restore_point_time: number;
}

/**
  * Distributed Firewall Rule Applied To Response JSON.
  */
export interface DistributedFirewallRuleAppliedToJson {
    name: string;
    value: string;
    type: string;
    is_valid: boolean;
}

/**
  * Distributed Firewall Rule Destination JSON
  */
export interface DistributedFirewallRuleDestinationJson {
    name: string;
    value: string;
    type: string;
    is_valid: boolean;
}

export interface DistributedFirewallRuleJson {
    name: string;
    action: DistributedFirewallActionType;
    applied_to_list: Array<DistributedFirewallRuleAppliedToJson>;
    section_id: number;
    sources_excluded: boolean;
    sources: Array<DistributedFirewallRuleSourceJson>;
    destinations_excluded: boolean;
    destinations: Array<DistributedFirewallRuleDestinationJson>;
    service_objects: Array<DistributedFirewallRuleServiceObjectJson>;
    service_protocols: Array<DistributedFirewallRuleServiceProtocolJson>;
    direction: DistributedFirewallDirectionType;
    packet_type: DistributedFirewallPacketType;
    tag: string;
    id: number;
    disabled: boolean;
    logged: boolean;
}

export interface DistributedFirewallRuleServiceObjectJson {
    name: string;
    value: string;
    type: string;
    is_valid: boolean;
}

export interface DistributedFirewallRuleServiceProtocolJson {
    is_valid: boolean;
    source_port: number;
    destination_port: number;
    protocol: number;
    protocol_name: DistributedFirewallProtocolNameType;
}

export interface DistributedFirewallRuleServiceProtocolRequestJson {
    source_port: number;
    destination_port: number;
    protocol: number;
    protocol_name: DistributedFirewallProtocolNameType;
}

/**
  * Distributed Firewall Rule Source JSON.
  */
export interface DistributedFirewallRuleSourceJson {
    name: string;
    value: string;
    type: string;
    is_valid: boolean;
}

export interface DistributedFirewallRuleUpdateRequestJson {
    id: number;
    disabled: boolean;
    logged: boolean;
    name: string;
    action: DistributedFirewallActionType;
    applied_to_list: Array<DistributedFirewallValueTypeRequestJson>;
    sources_excluded: boolean;
    sources: Array<DistributedFirewallValueTypeRequestJson>;
    destinations_excluded: boolean;
    destinations: Array<DistributedFirewallValueTypeRequestJson>;
    service_objects: Array<DistributedFirewallValueTypeRequestJson>;
    service_protocols: Array<DistributedFirewallRuleServiceProtocolRequestJson>;
    direction: DistributedFirewallDirectionType;
    packet_type: DistributedFirewallPacketType;
}

export interface DistributedFirewallUpdateRequestJson {
    rules: Array<DistributedFirewallRuleUpdateRequestJson>;
    name: string;
    tcp_strict: boolean;
    stateless: boolean;
    use_sid: boolean;
}

export interface DistributedFirewallValueTypeRequestJson {
    value: string;
    type: string;
    name?: string;
    is_valid?: boolean;
}

export interface ObjectPagingParamsJson {
    page: number;
    page_size: number;
    filter: string;
}

export enum DistributedFirewallActionTypeEnum {
    ALLOW = "ALLOW",
    DENY = "DENY"
}
export type DistributedFirewallActionType = keyof typeof DistributedFirewallActionTypeEnum;

export enum DistributedFirewallDirectionTypeEnum {
    IN = "IN",
    OUT = "OUT",
    INOUT = "INOUT"
}
export type DistributedFirewallDirectionType = keyof typeof DistributedFirewallDirectionTypeEnum;

export class DistributedFirewallLayer2RestorePointDetails {
        constructor(_json: DistributedFirewallRestorePointDetailsJson);
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get restore point time.
            * @returns {number}
            */
        get restorePointTime(): number;
        /**
            * Get data.
            * @returns {DistributedFirewallLayer2}
            */
        get data(): DistributedFirewallLayer2;
        /**
            * Get the json representation of this class.
            * @returns {DistributedFirewallRestorePointDetailsJson}
            */
        get json(): DistributedFirewallRestorePointDetailsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class DistributedFirewallLayer2RuleUpdateRequest {
        constructor(distributedFirewallLayer3RuleUpdateRequest: DistributedFirewallLayer2RuleUpdateRequest);
        constructor(distributedFirewallLayer3RuleUpdateRequestJson: DistributedFirewallLayer2RuleUpdateRequestJson);
        /**
            * Get id.
            * @returns {number}
            */
        get id(): number;
        /**
            * Get disabled.
            * @returns {boolean}
            */
        get disabled(): boolean;
        /**
            * Get logged.
            * @returns {boolean}
            */
        get logged(): boolean;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get action.
            * @returns {DistributedFirewallActionType}
            */
        get action(): DistributedFirewallActionType;
        /**
            * Get applied to list.
            * @returns {Array<DistributedFirewallValueTypeRequest>}
            */
        get appliedToList(): Array<DistributedFirewallValueTypeRequest>;
        /**
            * Get sources excluded.
            * @returns {boolean}
            */
        get sourcesExcluded(): boolean;
        /**
            * Get sources.
            * @returns {Array<DistributedFirewallValueTypeRequest>}
            */
        get sources(): Array<DistributedFirewallValueTypeRequest>;
        /**
            * Get destinations excluded.
            * @returns {boolean}
            */
        get destinationsExcluded(): boolean;
        /**
            * Get destinations.
            * @returns {Array<DistributedFirewallValueTypeRequest>}
            */
        get destinations(): Array<DistributedFirewallValueTypeRequest>;
        /**
            * Get service objects.
            * @returns {Array<DistributedFirewallValueTypeRequest>}
            */
        get serviceObjects(): Array<DistributedFirewallValueTypeRequest>;
        /**
            * Get service protocols.
            * @returns {Array<DistributedFirewallRuleServiceProtocolRequest>}
            */
        get serviceProtocols(): Array<DistributedFirewallRuleServiceProtocolRequest>;
        /**
            * Get direction.
            * @returns {DistributedFirewallDirectionType}
            */
        get direction(): DistributedFirewallDirectionType;
        /**
            * Get packet type.
            * @returns {DistributedFirewallPacketType}
            */
        get packetType(): DistributedFirewallPacketType;
        /**
            * Get the json representation of this class.
            * @returns {DistributedFirewallLayer2RuleUpdateRequestJson}
            */
        get json(): DistributedFirewallLayer2RuleUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class DistributedFirewallLayer2Rule {
        constructor(_json: DistributedFirewallLayer2RuleJson);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get action.
            * @returns {DistributedFirewallActionType}
            */
        get action(): DistributedFirewallActionType;
        /**
            * Get applied to list.
            * @returns {Array<DistributedFirewallRuleAppliedTo>}
            */
        get appliedToList(): Array<DistributedFirewallRuleAppliedTo>;
        /**
            * Get section id.
            * @returns {number}
            */
        get sectionId(): number;
        /**
            * Get sources excluded.
            * @returns {boolean}
            */
        get sourcesExcluded(): boolean;
        /**
            * Get sources.
            * @returns {Array<DistributedFirewallRuleSource>}
            */
        get sources(): Array<DistributedFirewallRuleSource>;
        /**
            * Get destinations excluded.
            * @returns {boolean}
            */
        get destinationsExcluded(): boolean;
        /**
            * Get destinations.
            * @returns {Array<DistributedFirewallRuleDestination>}
            */
        get destinations(): Array<DistributedFirewallRuleDestination>;
        /**
            * Get service objects.
            * @returns {Array<DistributedFirewallRuleServiceObject>}
            */
        get serviceObjects(): Array<DistributedFirewallRuleServiceObject>;
        /**
            * Get service protocols.
            * @returns {Array<DistributedFirewallRuleServiceProtocol>}
            */
        get serviceProtocols(): Array<DistributedFirewallRuleServiceProtocol>;
        /**
            * Get direction.
            * @returns {DistributedFirewallDirectionType}
            */
        get direction(): DistributedFirewallDirectionType;
        /**
            * Get packet type.
            * @returns {DistributedFirewallPacketType}
            */
        get packetType(): DistributedFirewallPacketType;
        /**
            * Get tag.
            * @returns {string}
            */
        get tag(): string;
        /**
            * Get id.
            * @returns {number}
            */
        get id(): number;
        /**
            * Get disabled.
            * @returns {boolean}
            */
        get disabled(): boolean;
        /**
            * Get logged.
            * @returns {boolean}
            */
        get logged(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {DistributedFirewallLayer2RuleJson}
            */
        get json(): DistributedFirewallLayer2RuleJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class DistributedFirewallLayer2UpdateRequest {
        constructor(distributedFirewallLayer2UpdateRequest: DistributedFirewallLayer2UpdateRequest);
        constructor(distributedFirewallLayer2UpdateRequestJson: DistributedFirewallLayer2UpdateRequestJson);
        /**
            * Get rules.
            * @returns {Array<DistributedFirewallLayer3RuleUpdateRequest>}
            */
        get rules(): Array<DistributedFirewallLayer2RuleUpdateRequest>;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get tcp strict.
            * @returns {boolean}
            */
        get tcpStrict(): boolean;
        /**
            * Get stateless.
            * @returns {boolean}
            */
        get stateless(): boolean;
        /**
            * Get use sid.
            * @returns {boolean}
            */
        get useSid(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {DistributedFirewallLayer2UpdateRequestJson}
            */
        get json(): DistributedFirewallLayer2UpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
        /**
            * Create a DistributedFirewallLayer3UpdateRequest from a DistributedFirewallLayer3 Object.
            *
            * @param {DistributedFirewallLayer3} config Distributed Firewall Layer3 Object.
            * @returns {DistributedFirewallLayer3UpdateRequest} updateRequest The update request object.
            */
        static create(config: DistributedFirewallLayer2Json): DistributedFirewallLayer2UpdateRequest;
}

/**
    * Distributed Firewall Layer 2 Object (Ethernet).
    */
export class DistributedFirewallLayer2 {
        constructor(_json: DistributedFirewallLayer2Json);
        /**
            * Get rules.
            * @returns {Array<DistributedFirewallLayer2Rule>}
            */
        get rules(): Array<DistributedFirewallLayer2Rule>;
        /**
            * Get id.
            * @returns {number}
            */
        get id(): number;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get generation number.
            * @returns {number}
            */
        get generationNumber(): number;
        /**
            * Get timestamp.
            * @returns {number}
            */
        get timestamp(): number;
        /**
            * Get tcp strict.
            * @returns {boolean}
            */
        get tcpStrict(): boolean;
        /**
            * Get stateless.
            * @returns {boolean}
            */
        get stateless(): boolean;
        /**
            * Get use sid.
            * @returns {boolean}
            */
        get useSid(): boolean;
        /**
            * Get type.
            * @returns {string}
            */
        get type(): string;
        /**
            * Get the json representation of this class.
            * @returns {DistributedFirewallLayer2Json}
            */
        get json(): DistributedFirewallLayer2Json;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class DistributedFirewallLayer3RestorePointDetails {
        constructor(_json: DistributedFirewallRestorePointDetailsJson);
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get restore point time.
            * @returns {number}
            */
        get restorePointTime(): number;
        /**
            * Get data.
            * @returns {DistributedFirewallLayer3}
            */
        get data(): DistributedFirewallLayer3;
        /**
            * Get the json representation of this class.
            * @returns {DistributedFirewallRestorePointDetailsJson}
            */
        get json(): DistributedFirewallRestorePointDetailsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class DistributedFirewallLayer3RuleUpdateRequest {
        constructor(distributedFirewallLayer3RuleUpdateRequest: DistributedFirewallLayer3RuleUpdateRequest);
        constructor(distributedFirewallLayer3RuleUpdateRequestJson: DistributedFirewallLayer3RuleUpdateRequestJson);
        /**
            * Get id.
            * @returns {number}
            */
        get id(): number;
        /**
            * Get disabled.
            * @returns {boolean}
            */
        get disabled(): boolean;
        /**
            * Get logged.
            * @returns {boolean}
            */
        get logged(): boolean;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get action.
            * @returns {DistributedFirewallActionType}
            */
        get action(): DistributedFirewallActionType;
        /**
            * Get applied to list.
            * @returns {Array<DistributedFirewallValueTypeRequest>}
            */
        get appliedToList(): Array<DistributedFirewallValueTypeRequest>;
        /**
            * Get sources excluded.
            * @returns {boolean}
            */
        get sourcesExcluded(): boolean;
        /**
            * Get sources.
            * @returns {Array<DistributedFirewallValueTypeRequest>}
            */
        get sources(): Array<DistributedFirewallValueTypeRequest>;
        /**
            * Get destinations excluded.
            * @returns {boolean}
            */
        get destinationsExcluded(): boolean;
        /**
            * Get destinations.
            * @returns {Array<DistributedFirewallValueTypeRequest>}
            */
        get destinations(): Array<DistributedFirewallValueTypeRequest>;
        /**
            * Get service objects.
            * @returns {Array<DistributedFirewallValueTypeRequest>}
            */
        get serviceObjects(): Array<DistributedFirewallValueTypeRequest>;
        /**
            * Get service protocols.
            * @returns {Array<DistributedFirewallRuleServiceProtocolRequest>}
            */
        get serviceProtocols(): Array<DistributedFirewallRuleServiceProtocolRequest>;
        /**
            * Get direction.
            * @returns {DistributedFirewallDirectionType}
            */
        get direction(): DistributedFirewallDirectionType;
        /**
            * Get packet type.
            * @returns {DistributedFirewallPacketType}
            */
        get packetType(): DistributedFirewallPacketType;
        /**
            * Get the json representation of this class.
            * @returns {DistributedFirewallLayer3RuleUpdateRequestJson}
            */
        get json(): DistributedFirewallLayer3RuleUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class DistributedFirewallLayer3Rule {
        constructor(_json: DistributedFirewallLayer3RuleJson);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get action.
            * @returns {DistributedFirewallActionType}
            */
        get action(): DistributedFirewallActionType;
        /**
            * Get applied to list.
            * @returns {Array<DistributedFirewallRuleAppliedTo>}
            */
        get appliedToList(): Array<DistributedFirewallRuleAppliedTo>;
        /**
            * Get section id.
            * @returns {number}
            */
        get sectionId(): number;
        /**
            * Get sources excluded.
            * @returns {boolean}
            */
        get sourcesExcluded(): boolean;
        /**
            * Get sources.
            * @returns {Array<DistributedFirewallRuleSource>}
            */
        get sources(): Array<DistributedFirewallRuleSource>;
        /**
            * Get destinations excluded.
            * @returns {boolean}
            */
        get destinationsExcluded(): boolean;
        /**
            * Get destinations.
            * @returns {Array<DistributedFirewallRuleDestination>}
            */
        get destinations(): Array<DistributedFirewallRuleDestination>;
        /**
            * Get service objects.
            * @returns {Array<DistributedFirewallRuleServiceObject>}
            */
        get serviceObjects(): Array<DistributedFirewallRuleServiceObject>;
        /**
            * Get service protocols.
            * @returns {Array<DistributedFirewallRuleServiceProtocol>}
            */
        get serviceProtocols(): Array<DistributedFirewallRuleServiceProtocol>;
        /**
            * Get direction.
            * @returns {DistributedFirewallDirectionType}
            */
        get direction(): DistributedFirewallDirectionType;
        /**
            * Get packet type.
            * @returns {DistributedFirewallPacketType}
            */
        get packetType(): DistributedFirewallPacketType;
        /**
            * Get tag.
            * @returns {string}
            */
        get tag(): string;
        /**
            * Get id.
            * @returns {number}
            */
        get id(): number;
        /**
            * Get disabled.
            * @returns {boolean}
            */
        get disabled(): boolean;
        /**
            * Get logged.
            * @returns {boolean}
            */
        get logged(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {DistributedFirewallLayer3RuleJson}
            */
        get json(): DistributedFirewallLayer3RuleJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class DistributedFirewallLayer3UpdateRequest {
        constructor(distributedFirewallLayer3UpdateRequest: DistributedFirewallLayer3UpdateRequest);
        constructor(distributedFirewallLayer3UpdateRequestJson: DistributedFirewallLayer3UpdateRequestJson);
        /**
            * Get rules.
            * @returns {Array<DistributedFirewallLayer3RuleUpdateRequest>}
            */
        get rules(): Array<DistributedFirewallLayer3RuleUpdateRequest>;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get tcp strict.
            * @returns {boolean}
            */
        get tcpStrict(): boolean;
        /**
            * Get stateless.
            * @returns {boolean}
            */
        get stateless(): boolean;
        /**
            * Get use sid.
            * @returns {boolean}
            */
        get useSid(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {DistributedFirewallLayer3UpdateRequestJson}
            */
        get json(): DistributedFirewallLayer3UpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
        /**
            * Create a DistributedFirewallLayer3UpdateRequest from a DistributedFirewallLayer3 Object.
            *
            * @param {DistributedFirewallLayer3} config Distributed Firewall Layer3 Object.
            * @returns {DistributedFirewallLayer3UpdateRequest} updateRequest The update request object.
            */
        static create(config: DistributedFirewallLayer3Json): DistributedFirewallLayer3UpdateRequest;
}

/**
    * Distributed Firewall Layer 3 Object (General).
    */
export class DistributedFirewallLayer3 {
        constructor(_json: DistributedFirewallLayer3Json);
        /**
            * Get rules.
            * @returns {Array<DistributedFirewallLayer3Rule>}
            */
        get rules(): Array<DistributedFirewallLayer3Rule>;
        /**
            * Get id.
            * @returns {number}
            */
        get id(): number;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get generation number.
            * @returns {number}
            */
        get generationNumber(): number;
        /**
            * Get timestamp.
            * @returns {number}
            */
        get timestamp(): number;
        /**
            * Get tcp strict.
            * @returns {boolean}
            */
        get tcpStrict(): boolean;
        /**
            * Get stateless.
            * @returns {boolean}
            */
        get stateless(): boolean;
        /**
            * Get use sid.
            * @returns {boolean}
            */
        get useSid(): boolean;
        /**
            * Get type.
            * @returns {string}
            */
        get type(): string;
        /**
            * Get the json representation of this class.
            * @returns {DistributedFirewallLayer3Json}
            */
        get json(): DistributedFirewallLayer3Json;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class DistributedFirewallObjectList {
        constructor(_json: DistributedFirewallObjectListJson);
        /**
            * Get current page parameters.
            * @returns {ObjectPagingParams}
            */
        get currentPageParameters(): ObjectPagingParams;
        /**
            * Get next page parameters.
            * @returns {ObjectPagingParams}
            */
        get nextPageParameters(): ObjectPagingParams;
        /**
            * Get total records.
            * @returns {number}
            */
        get totalRecords(): number;
        /**
            * Get last page.
            * @returns {boolean}
            */
        get lastPage(): boolean;
        /**
            * Get data.
            * @returns {Array<DistributedFirewallObject>}
            */
        get data(): Array<DistributedFirewallObject>;
        /**
            * Get the json representation of this class.
            * @returns {DistributedFirewallObjectListJson}
            */
        get json(): DistributedFirewallObjectListJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class DistributedFirewallObjectProperty {
        constructor(_json: DistributedFirewallObjectPropertyJson);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get value.
            * @returns {string}
            */
        get value(): string;
        /**
            * Get the json representation of this class.
            * @returns {DistributedFirewallObjectPropertyJson}
            */
        get json(): DistributedFirewallObjectPropertyJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class DistributedFirewallObjectType {
        constructor(_json: DistributedFirewallObjectTypeJson);
        /**
            * Get type.
            * @returns {string}
            */
        get type(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get the json representation of this class.
            * @returns {DistributedFirewallObjectTypeJson}
            */
        get json(): DistributedFirewallObjectTypeJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class DistributedFirewallObject {
        constructor(_json: DistributedFirewallObjectJson);
        /**
            * Get type.
            * @returns {string}
            */
        get type(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get properties.
            * @returns {Array<DistributedFirewallObjectProperty>}
            */
        get properties(): Array<DistributedFirewallObjectProperty>;
        /**
            * Get the json representation of this class.
            * @returns {DistributedFirewallObjectJson}
            */
        get json(): DistributedFirewallObjectJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export enum DistributedFirewallPacketTypeEnum {
    ANY = "ANY",
    IPV_4 = "IPV_4",
    IPV_6 = "IPV_6"
}
export type DistributedFirewallPacketType = keyof typeof DistributedFirewallPacketTypeEnum;

export enum DistributedFirewallProtocolNameTypeEnum {
    TCP = "TCP",
    UDP = "UDP",
    ICMP = "ICMP"
}
export type DistributedFirewallProtocolNameType = keyof typeof DistributedFirewallProtocolNameTypeEnum;

export class DistributedFirewallRestorePoint {
        constructor(_json: DistributedFirewallRestorePointJson);
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get restore point time.
            * @returns {number}
            */
        get restorePointTime(): number;
        /**
            * Get the json representation of this class.
            * @returns {DistributedFirewallRestorePointJson}
            */
        get json(): DistributedFirewallRestorePointJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Distributed Firewall Rule Applied To Response.
    */
export class DistributedFirewallRuleAppliedTo {
        constructor(_json: DistributedFirewallRuleAppliedToJson);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get value.
            * @returns {string}
            */
        get value(): string;
        /**
            * Get type.
            * @returns {string}
            */
        get type(): string;
        /**
            * Get is valid.
            * @returns {boolean}
            */
        get isValid(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {DistributedFirewallRuleAppliedToJson}
            */
        get json(): DistributedFirewallRuleAppliedToJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Distributed Firewall Rule Destination.
    */
export class DistributedFirewallRuleDestination {
        constructor(_json: DistributedFirewallRuleDestinationJson);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get value.
            * @returns {string}
            */
        get value(): string;
        /**
            * Get type.
            * @returns {string}
            */
        get type(): string;
        /**
            * Get is valid.
            * @returns {boolean}
            */
        get isValid(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {DistributedFirewallRuleDestinationJson}
            */
        get json(): DistributedFirewallRuleDestinationJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class DistributedFirewallRuleServiceObject {
        constructor(_json: DistributedFirewallRuleServiceObjectJson);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get value.
            * @returns {string}
            */
        get value(): string;
        /**
            * Get type.
            * @returns {string}
            */
        get type(): string;
        /**
            * Get is valid.
            * @returns {boolean}
            */
        get isValid(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {DistributedFirewallRuleServiceObjectJson}
            */
        get json(): DistributedFirewallRuleServiceObjectJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class DistributedFirewallRuleServiceProtocolRequest {
        constructor(distributedFirewallRuleServiceProtocolRequest: DistributedFirewallRuleServiceProtocolRequest);
        constructor(distributedFirewallRuleServiceProtocolRequestJson: DistributedFirewallRuleServiceProtocolRequestJson);
        constructor(sourcePort: number, destinationPort: number, protocol: number, protocolName: DistributedFirewallProtocolNameType);
        /**
            * Get source port.
            * @returns {number}
            */
        get sourcePort(): number;
        /**
            * Get destination port.
            * @returns {number}
            */
        get destinationPort(): number;
        /**
            * Get protocol.
            * @returns {number}
            */
        get protocol(): number;
        /**
            * Get protocol name.
            * @returns {DistributedFirewallProtocolNameType}
            */
        get protocolName(): DistributedFirewallProtocolNameType;
        /**
            * Get the json representation of this class.
            * @returns {DistributedFirewallRuleServiceProtocolRequestJson}
            */
        get json(): DistributedFirewallRuleServiceProtocolRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class DistributedFirewallRuleServiceProtocol {
        constructor(_json: DistributedFirewallRuleServiceProtocolJson);
        /**
            * Get is valid.
            * @returns {boolean}
            */
        get isValid(): boolean;
        /**
            * Get source port.
            * @returns {number}
            */
        get sourcePort(): number;
        /**
            * Get destination port.
            * @returns {number}
            */
        get destinationPort(): number;
        /**
            * Get protocol.
            * @returns {number}
            */
        get protocol(): number;
        /**
            * Get protocol name.
            * @returns {DistributedFirewallProtocolNameType}
            */
        get protocolName(): DistributedFirewallProtocolNameType;
        /**
            * Get the json representation of this class.
            * @returns {DistributedFirewallRuleServiceProtocolJson}
            */
        get json(): DistributedFirewallRuleServiceProtocolJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Distributed Firewall Rule Source.
    */
export class DistributedFirewallRuleSource {
        constructor(_json: DistributedFirewallRuleSourceJson);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get value.
            * @returns {string}
            */
        get value(): string;
        /**
            * Get type.
            * @returns {string}
            */
        get type(): string;
        /**
            * Get is valid.
            * @returns {boolean}
            */
        get isValid(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {DistributedFirewallRuleSourceJson}
            */
        get json(): DistributedFirewallRuleSourceJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class DistributedFirewallValueTypeRequest {
        constructor(distributedFirewallRuleAppliedToRequest: DistributedFirewallValueTypeRequest);
        constructor(distributedFirewallRuleAppliedToRequestJson: DistributedFirewallValueTypeRequestJson);
        constructor(value: string, type: string, name: string, isValid: boolean);
        /**
            * Get value.
            * @returns {string}
            */
        get value(): string;
        /**
            * Get type.
            * @returns {string}
            */
        get type(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string | undefined;
        /**
            * Get isValid.
            * @returns {boolean}
            */
        get isValid(): boolean | undefined;
        /**
            * Get the json representation of this class.
            * @returns {DistributedFirewallValueTypeRequestJson}
            */
        get json(): DistributedFirewallValueTypeRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class ObjectPagingParams {
        constructor(_json: ObjectPagingParamsJson);
        /**
            * Get page.
            * @returns {number}
            */
        get page(): number;
        /**
            * Get page size.
            * @returns {number}
            */
        get pageSize(): number;
        /**
            * Get filter.
            * @returns {string}
            */
        get filter(): string;
        /**
            * Get the json representation of this class.
            * @returns {ObjectPagingParamsJson}
            */
        get json(): ObjectPagingParamsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
  * Application Group JSON
  */
export interface ApplicationGroupJson {
    object_id: string;
    name: string;
    inheritance_allowed: boolean;
    members: Array<ApplicationGroupMemberJson>;
}

/**
  * Application Group List JSON
  */
export interface ApplicationGroupListJson {
    data: Array<ApplicationGroupJson>;
}

/**
  * Application Group Member JSON
  */
export interface ApplicationGroupMemberJson {
    object_id: string;
    name: string;
    inheritance_allowed: boolean;
}

/**
  * Application JSON
  */
export interface ApplicationJson {
    object_id: string;
    name: string;
    description: string;
    scope: string;
    inheritance_allowed: boolean;
    element: ElementJson;
}

/**
  * Application List JSON
  */
export interface ApplicationListJson {
    data: Array<ApplicationJson>;
}

/**
  * Criteria JSON
  */
export interface CriteriaJson {
    operator: SecurityGroupOperatorType;
    key: SecurityGroupKeyType;
    criteria: SecurityGroupCriteriaType;
    value: string;
    is_valid: boolean;
}

/**
  * Dynamic Member JSON
  */
export interface DynamicMemberJson {
    operator: SecurityGroupOperatorType;
    criteria: Array<CriteriaJson>;
}

/**
  * Element JSON
  */
export interface ElementJson {
    application_protocol: string;
    value: string;
    source_port: string;
}

/**
  * IP Set Create Request JSON
  */
export interface IpSetCreateRequestJson {
    description: string;
    name: string;
    value: string;
    inheritance_allowed: boolean;
}

/**
  * IP Set JSON
  */
export interface IpSetJson {
    object_id: string;
    description: string;
    name: string;
    value: string;
    inheritance_allowed: boolean;
    revision: number;
}

/**
  * IP Set List JSON
  */
export interface IpSetListJson {
    data: Array<IpSetJson>;
}

/**
  * IP Set Update Request JSON
  */
export interface IpSetUpdateRequestJson {
    object_id: string;
    description: string;
    name: string;
    value: string;
    inheritance_allowed: boolean;
    revision: number;
}

/**
  * MAC Set Create Request JSON
  */
export interface MacSetCreateRequestJson {
    description: string;
    name: string;
    value: string;
    inheritance_allowed: boolean;
}

/**
  * MAC Set JSON
  */
export interface MacSetJson {
    object_id: string;
    description: string;
    name: string;
    value: string;
    inheritance_allowed: boolean;
    revision: number;
}

/**
  * MAC Set List JSON
  */
export interface MacSetListJson {
    data: Array<MacSetJson>;
}

/**
  * MAC Set Update Request JSON
  */
export interface MacSetUpdateRequestJson {
    object_id: string;
    description: string;
    name: string;
    value: string;
    inheritance_allowed: boolean;
    revision: number;
}

/**
  * Security Group Create Request JSON
  */
export interface SecurityGroupCreateRequestJson {
    name: string;
    description: string;
    scope: string;
    is_temporal: boolean;
    inheritance_allowed: boolean;
    included_member: Array<SecurityGroupMemberJson>;
    excluded_member: Array<SecurityGroupMemberJson>;
    dynamic_member: Array<DynamicMemberJson>;
}

/**
  * Enumeration of security group criteria types.
  */
export enum SecurityGroupCriteriaType {
    CONTAINS = "CONTAINS",
    SIMILAR_TO = "SIMILAR_TO",
    STARTS_WITH = "STARTS_WITH",
    ENDS_WITH = "ENDS_WITH"
}

/**
  * Security Group JSON
  */
export interface SecurityGroupJson {
    object_id: string;
    name: string;
    description: string;
    scope: string;
    is_temporal: boolean;
    inheritance_allowed: boolean;
    included_member: Array<SecurityGroupMemberJson>;
    excluded_member: Array<SecurityGroupMemberJson>;
    dynamic_member: Array<DynamicMemberJson>;
}

/**
  * Enumeration of security group key types.
  */
export enum SecurityGroupKeyType {
    VM_SECURITY_TAG = "VM_SECURITY_TAG",
    VM_GUEST_OS_FULL_NAME = "VM_GUEST_OS_FULL_NAME",
    VM_NAME = "VM_NAME",
    VM_GUEST_HOST_NAME = "VM_GUEST_HOST_NAME"
}

/**
  * Security Group Member JSON
  */
export interface SecurityGroupMemberJson {
    object_id: string;
    type: string;
    name: string;
    is_temporal: boolean;
}

/**
  * Security Group Member Option JSON
  */
export interface SecurityGroupMemberOptionJson {
    type: string;
    name: string;
    properties: Array<SecurityGroupMemberOptionPropertyJson>;
}

/**
  * Security Group Member Option List JSON
  */
export interface SecurityGroupMemberOptionListJson {
    current_page_parameters: SecurityGroupMemberOptionPagingParamsJson;
    next_page_parameters: SecurityGroupMemberOptionPagingParamsJson;
    total_records: number;
    last_page: boolean;
    data: Array<SecurityGroupMemberOptionJson>;
}

/**
  * Security Group Member Option Paging Params JSON
  */
export interface SecurityGroupMemberOptionPagingParamsJson {
    page: number;
    page_size: number;
    filter?: string;
}

/**
  * Security Group Member Option Property JSON
  */
export interface SecurityGroupMemberOptionPropertyJson {
    name: string;
    value: string;
}

/**
  * Security Group Member Option Type JSON
  */
export interface SecurityGroupMemberOptionTypeJson {
    type: string;
    name: string;
}

/**
  * Security Group Member Option Type List JSON
  */
export interface SecurityGroupMemberOptionTypeListJson {
    data: Array<SecurityGroupMemberOptionTypeJson>;
}

/**
  * Enumeration of security group operator types.
  */
export enum SecurityGroupOperatorType {
    AND = "AND",
    OR = "OR"
}

/**
  * Security Group Update Request JSON
  */
export interface SecurityGroupUpdateRequestJson {
    object_id: string;
    name: string;
    description: string;
    scope: string;
    is_temporal: boolean;
    inheritance_allowed: boolean;
    included_member: Array<SecurityGroupMemberJson>;
    excluded_member: Array<SecurityGroupMemberJson>;
    dynamic_member: Array<DynamicMemberJson>;
}

/**
  * Security Groups JSON
  */
export interface SecurityGroupsJson {
    data: Array<SecurityGroupJson>;
}

/**
    * Application Group List
    */
export class ApplicationGroupList {
        constructor(_json: ApplicationGroupListJson);
        /**
            * Get data.
            * @returns {Array<ApplicationGroupJson>}
            */
        get data(): Array<ApplicationGroupJson>;
        /**
            * Get the json representation of this class.
            * @returns {ApplicationGroupListJson}
            */
        get json(): ApplicationGroupListJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Application Group Member
    */
export class ApplicationGroupMember {
        constructor(_json: ApplicationGroupMemberJson);
        /**
            * Get object id.
            * @returns {string}
            */
        get objectId(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get inheritance allowed.
            * @returns {boolean}
            */
        get inheritanceAllowed(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {ApplicationGroupMemberJson}
            */
        get json(): ApplicationGroupMemberJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Application Group
    */
export class ApplicationGroup {
        constructor(_json: ApplicationGroupJson);
        /**
            * Get object id.
            * @returns {string}
            */
        get objectId(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get inheritance allowed.
            * @returns {boolean}
            */
        get inheritanceAllowed(): boolean;
        /**
            * Get members.
            * @returns {Array<ApplicationGroupMember>}
            */
        get members(): Array<ApplicationGroupMember>;
        /**
            * Get the json representation of this class.
            * @returns {ApplicationGroupJson}
            */
        get json(): ApplicationGroupJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Application List
    */
export class ApplicationList {
        constructor(_json: ApplicationListJson);
        /**
            * Get data.
            * @returns {Array<ApplicationJson>}
            */
        get data(): Array<ApplicationJson>;
        /**
            * Get the json representation of this class.
            * @returns {ApplicationListJson}
            */
        get json(): ApplicationListJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Application
    */
export class Application {
        constructor(_json: ApplicationJson);
        /**
            * Get object id.
            * @returns {string}
            */
        get objectId(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string | undefined}
            */
        get description(): string | undefined;
        /**
            * Get scope.
            * @returns {string}
            */
        get scope(): string;
        /**
            * Get inheritance allowed.
            * @returns {boolean}
            */
        get inheritanceAllowed(): boolean;
        /**
            * Get element.
            * @returns {ElementJson}
            */
        get element(): ElementJson;
        /**
            * Get the json representation of this class.
            * @returns {ApplicationJson}
            */
        get json(): ApplicationJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Criteria.
    */
export class Criteria {
        constructor(_json: CriteriaJson);
        /**
            * Get operator.
            * @returns {SecurityGroupOperatorType}
            */
        get operator(): SecurityGroupOperatorType;
        /**
            * Get key.
            * @returns {SecurityGroupKeyType}
            */
        get key(): SecurityGroupKeyType;
        /**
            * Get criteria.
            * @returns {SecurityGroupCriteriaType}
            */
        get criteria(): SecurityGroupCriteriaType;
        /**
            * Get value.
            * @returns {string}
            */
        get value(): string;
        /**
            * Get is valid.
            * @returns {boolean}
            */
        get isValid(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {CriteriaJson}
            */
        get json(): CriteriaJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Dynamic Member.
    */
export class DynamicMember {
        constructor(_json: DynamicMemberJson);
        /**
            * Get operator.
            * @returns {SecurityGroupOperatorType}
            */
        get operator(): SecurityGroupOperatorType;
        /**
            * Get criteria.
            * @returns {Array<CriteriaJson>}
            */
        get criteria(): Array<CriteriaJson>;
        /**
            * Get the json representation of this class.
            * @returns {DynamicMemberJson}
            */
        get json(): DynamicMemberJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Element
    */
export class Element {
        constructor(_json: ElementJson);
        /**
            * Get application protocol.
            * @returns {string | undefined}
            */
        get applicationProtocol(): string | undefined;
        /**
            * Get value.
            * @returns {string | undefined}
            */
        get value(): string | undefined;
        /**
            * Get source port.
            * @returns {string | undefined}
            */
        get sourcePort(): string | undefined;
        /**
            * Get the json representation of this class.
            * @returns {ElementJson}
            */
        get json(): ElementJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * IP Set Create Request
    */
export class IpSetCreateRequest {
        constructor(ipSetCreateRequest: IpSetCreateRequest);
        constructor(ipSetCreateRequestJson: IpSetCreateRequestJson);
        constructor(description: string, name: string, value: string, inheritanceAllowed: boolean);
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get value.
            * @returns {string}
            */
        get value(): string;
        /**
            * Get inheritance allowed.
            * @returns {boolean}
            */
        get inheritanceAllowed(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {IpSetCreateRequestJson}
            */
        get json(): IpSetCreateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * IP Set List
    */
export class IpSetList {
        constructor(_json: IpSetListJson);
        /**
            * Get data.
            * @returns {Array<IpSetJson>}
            */
        get data(): Array<IpSetJson>;
        /**
            * Get the json representation of this class.
            * @returns {IpSetListJson}
            */
        get json(): IpSetListJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * IP Set Update Request
    */
export class IpSetUpdateRequest {
        constructor(ipSetUpdateRequest: IpSetUpdateRequest);
        constructor(ipSetUpdateRequestJson: IpSetUpdateRequestJson);
        constructor(objectId: string, description: string, name: string, value: string, inheritanceAllowed: boolean, revision: number);
        /**
            * Get object id.
            * @returns {string}
            */
        get objectId(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get value.
            * @returns {string}
            */
        get value(): string;
        /**
            * Get inheritance allowed.
            * @returns {boolean}
            */
        get inheritanceAllowed(): boolean;
        /**
            * Get revision.
            * @returns {number}
            */
        get revision(): number;
        /**
            * Get the json representation of this class.
            * @returns {IpSetUpdateRequestJson}
            */
        get json(): IpSetUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * IP Set
    */
export class IpSet {
        constructor(_json: IpSetJson);
        /**
            * Get object id.
            * @returns {string}
            */
        get objectId(): string;
        /**
            * Get description.
            * @returns {string | undefined}
            */
        get description(): string | undefined;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get value.
            * @returns {string}
            */
        get value(): string;
        /**
            * Get inheritance allowed.
            * @returns {boolean}
            */
        get inheritanceAllowed(): boolean;
        /**
            * Get revision.
            * @returns {number}
            */
        get revision(): number;
        /**
            * Get the json representation of this class.
            * @returns {IpSetJson}
            */
        get json(): IpSetJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * MAC Set Create Request
    */
export class MacSetCreateRequest {
        constructor(macSetCreateRequest: MacSetCreateRequest);
        constructor(macSetCreateRequestJson: MacSetCreateRequestJson);
        constructor(description: string, name: string, value: string, inheritanceAllowed: boolean);
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get value.
            * @returns {string}
            */
        get value(): string;
        /**
            * Get inheritance allowed.
            * @returns {boolean}
            */
        get inheritanceAllowed(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {MacSetCreateRequestJson}
            */
        get json(): MacSetCreateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * MAC Set List
    */
export class MacSetList {
        constructor(_json: MacSetListJson);
        /**
            * Get data.
            * @returns {Array<MacSetJson>}
            */
        get data(): Array<MacSetJson>;
        /**
            * Get the json representation of this class.
            * @returns {MacSetListJson}
            */
        get json(): MacSetListJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * MAC Set Update Request
    */
export class MacSetUpdateRequest {
        constructor(macSetUpdateRequest: MacSetUpdateRequest);
        constructor(macSetUpdateRequestJson: MacSetUpdateRequestJson);
        constructor(objectId: string, description: string, name: string, value: string, inheritanceAllowed: boolean, revision: number);
        /**
            * Get object id.
            * @returns {string}
            */
        get objectId(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get value.
            * @returns {string}
            */
        get value(): string;
        /**
            * Get inheritance allowed.
            * @returns {boolean}
            */
        get inheritanceAllowed(): boolean;
        /**
            * Get revision.
            * @returns {number}
            */
        get revision(): number;
        /**
            * Get the json representation of this class.
            * @returns {MacSetUpdateRequestJson}
            */
        get json(): MacSetUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * MAC Set
    */
export class MacSet {
        constructor(_json: MacSetJson);
        /**
            * Get object id.
            * @returns {string}
            */
        get objectId(): string;
        /**
            * Get description.
            * @returns {string | undefined}
            */
        get description(): string | undefined;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get value.
            * @returns {string}
            */
        get value(): string;
        /**
            * Get inheritance allowed.
            * @returns {boolean}
            */
        get inheritanceAllowed(): boolean;
        /**
            * Get revision.
            * @returns {number}
            */
        get revision(): number;
        /**
            * Get the json representation of this class.
            * @returns {MacSetJson}
            */
        get json(): MacSetJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Security Group Create Request.
    */
export class SecurityGroupCreateRequest {
        constructor(securityGroupCreateRequest: SecurityGroupCreateRequest);
        constructor(securityGroupCreateRequestJson: SecurityGroupCreateRequestJson);
        constructor(name: string, description: string, scope: string, isTemporal: boolean, inheritanceAllowed: boolean, includedMember: Array<SecurityGroupMemberJson>, excludedMember: Array<SecurityGroupMemberJson>, dynamicMember: Array<DynamicMemberJson>);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get scope.
            * @returns {string}
            */
        get scope(): string;
        /**
            * Get is temporal.
            * @returns {boolean}
            */
        get isTemporal(): boolean;
        /**
            * Get inheritance allowed.
            * @returns {boolean}
            */
        get inheritanceAllowed(): boolean;
        /**
            * Get included member.
            * @returns {Array<SecurityGroupMember>}
            */
        get includedMember(): Array<SecurityGroupMember>;
        /**
            * Get excluded member.
            * @returns {Array<SecurityGroupMember>}
            */
        get excludedMember(): Array<SecurityGroupMember>;
        /**
            * Get dynamic member.
            * @returns {Array<DynamicMember>}
            */
        get dynamicMember(): Array<DynamicMember>;
        /**
            * Get the json representation of this class.
            * @returns {SecurityGroupCreateRequestJson}
            */
        get json(): SecurityGroupCreateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Security Group Member Option List
    */
export class SecurityGroupMemberOptionList {
        constructor(_json: SecurityGroupMemberOptionListJson);
        /**
            * Get current page parameters.
            * @returns {SecurityGroupMemberOptionPagingParams}
            */
        get currentPageParameters(): SecurityGroupMemberOptionPagingParams;
        /**
            * Get next page parameters.
            * @returns {SecurityGroupMemberOptionPagingParams | null}
            */
        get nextPageParameters(): SecurityGroupMemberOptionPagingParams | null;
        /**
            * Get total records.
            * @returns {number}
            */
        get totalRecords(): number;
        /**
            * Get last page.
            * @returns {boolean}
            */
        get lastPage(): boolean;
        /**
            * Get data.
            * @returns {Array<SecurityGroupMemberOption>
            */
        get data(): Array<SecurityGroupMemberOption>;
        /**
            * Get the json representation of this class.
            * @returns {SecurityGroupMemberOptionListJson}
            */
        get json(): SecurityGroupMemberOptionListJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Security Group Member Option Paging Params.
    */
export class SecurityGroupMemberOptionPagingParams {
        constructor(_json: SecurityGroupMemberOptionPagingParamsJson);
        /**
            * Get page.
            * @returns {number}
            */
        get page(): number;
        /**
            * Get page size.
            * @returns {number}
            */
        get pageSize(): number;
        /**
            * Get filter.
            * @returns {string | undefined}
            */
        get filter(): string | undefined;
        /**
            * Get the json representation of this class.
            * @returns {SecurityGroupMemberOptionPagingParamsJson}
            */
        get json(): SecurityGroupMemberOptionPagingParamsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Security Group Member Option Property.
    */
export class SecurityGroupMemberOptionProperty {
        constructor(_json: SecurityGroupMemberOptionPropertyJson);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get value.
            * @returns {string}
            */
        get value(): string;
        /**
            * Get the json representation of this class.
            * @returns {SecurityGroupMemberOptionPropertyJson}
            */
        get json(): SecurityGroupMemberOptionPropertyJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Security Group Member Option Type List.
    */
export class SecurityGroupMemberOptionTypeList {
        constructor(_json: SecurityGroupMemberOptionTypeListJson);
        /**
            * Get data.
            * @returns {Array<SecurityGroupMemberOptionType>}
            */
        get data(): Array<SecurityGroupMemberOptionType>;
        /**
            * Get the json representation of this class.
            * @returns {SecurityGroupMemberOptionTypeListJson}
            */
        get json(): SecurityGroupMemberOptionTypeListJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Security Group Member Option Type.
    */
export class SecurityGroupMemberOptionType {
        constructor(_json: SecurityGroupMemberOptionTypeJson);
        /**
            * Get type.
            * @returns {string}
            */
        get type(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get the json representation of this class.
            * @returns {SecurityGroupMemberOptionTypeJson}
            */
        get json(): SecurityGroupMemberOptionTypeJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Security Group Member Option
    */
export class SecurityGroupMemberOption {
        constructor(_json: SecurityGroupMemberOptionJson);
        /**
            * Get type.
            * @returns {string}
            */
        get type(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get properties.
            * @returns {Array<SecurityGroupMemberOptionProperty>}
            */
        get properties(): Array<SecurityGroupMemberOptionProperty>;
        /**
            * Get the json representation of this class.
            * @returns {SecurityGroupMemberOptionJson}
            */
        get json(): SecurityGroupMemberOptionJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Security Group Update Request.
    */
export class SecurityGroupUpdateRequest {
        constructor(securityGroupUpdateRequest: SecurityGroupUpdateRequest);
        constructor(securityGroupUpdateRequestJson: SecurityGroupUpdateRequestJson);
        constructor(objectId: string, name: string, description: string, scope: string, isTemporal: boolean, inheritanceAllowed: boolean, includedMember: Array<SecurityGroupMemberJson>, excludedMember: Array<SecurityGroupMemberJson>, dynamicMember: Array<DynamicMemberJson>);
        /**
            * Get object id.
            * @returns {string}
            */
        get objectId(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get scope.
            * @returns {string}
            */
        get scope(): string;
        /**
            * Get is temporal.
            * @returns {boolean}
            */
        get isTemporal(): boolean;
        /**
            * Get inheritance allowed.
            * @returns {boolean}
            */
        get inheritanceAllowed(): boolean;
        /**
            * Get included member.
            * @returns {Array<SecurityGroupMember>}
            */
        get includedMember(): Array<SecurityGroupMember>;
        /**
            * Get excluded member.
            * @returns {Array<SecurityGroupMember>}
            */
        get excludedMember(): Array<SecurityGroupMember>;
        /**
            * Get dynamic member.
            * @returns {Array<DynamicMember>}
            */
        get dynamicMember(): Array<DynamicMember>;
        /**
            * Get the json representation of this class.
            * @returns {SecurityGroupUpdateRequestJson}
            */
        get json(): SecurityGroupUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Security Group.
    */
export class SecurityGroup {
        constructor(_json: SecurityGroupJson);
        /**
            * Get object id.
            * @returns {string}
            */
        get objectId(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get scope.
            * @returns {string}
            */
        get scope(): string;
        /**
            * Get is temporal.
            * @returns {boolean}
            */
        get isTemporal(): boolean;
        /**
            * Get inheritance allowed.
            * @returns {boolean}
            */
        get inheritanceAllowed(): boolean;
        /**
            * Get included member.
            * @returns {Array<SecurityGroupMember>}
            */
        get includedMember(): Array<SecurityGroupMember>;
        /**
            * Get excluded member.
            * @returns {Array<SecurityGroupMember>}
            */
        get excludedMember(): Array<SecurityGroupMember>;
        /**
            * Get dynamic member.
            * @returns {Array<DynamicMember>}
            */
        get dynamicMember(): Array<DynamicMember>;
        /**
            * Get the json representation of this class.
            * @returns {SecurityGroupJson}
            */
        get json(): SecurityGroupJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Security Groups.
    */
export class SecurityGroups {
        constructor(_json: SecurityGroupsJson);
        /**
            * Get data.
            * @returns {Array<SecurityGroup>}
            */
        get data(): Array<SecurityGroup>;
        /**
            * Get the json representation of this class.
            * @returns {SecurityGroupsJson}
            */
        get json(): SecurityGroupsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Security Group Member.
    */
export class SecurityGroupMember {
        constructor(_json: SecurityGroupMemberJson);
        /**
            * Get object id.
            * @returns {string}
            */
        get objectId(): string;
        /**
            * Get type.
            * @returns {string}
            */
        get type(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get is temporal.
            * @returns {boolean}
            */
        get isTemporal(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {SecurityGroupMemberJson}
            */
        get json(): SecurityGroupMemberJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
  * Security Tag Create Request JSON
  */
export interface SecurityTagCreateRequestJson {
    name: string;
    description: string;
    assigned_vm_ids: Array<string>;
}

/**
  * Security Tag JSON
  */
export interface SecurityTagJson {
    object_id: string;
    name: string;
    description: string;
    is_temporal: boolean;
    vm_count: number;
}

/**
  * Security Tag Object JSON
  */
export interface SecurityTagObjectJson {
    type: string;
    name: string;
    properties: Array<SecurityTagObjectPropertyJson>;
}

/**
  * Security Tag Object List JSON
  */
export interface SecurityTagObjectListJson {
    current_page_parameters: SecurityTagObjectPagingParamsJson;
    next_page_parameters: SecurityTagObjectPagingParamsJson;
    total_records: number;
    last_page: boolean;
    data: Array<SecurityTagObjectJson>;
}

/**
  * Security Tag Object Paging Params JSON
  */
export interface SecurityTagObjectPagingParamsJson {
    page: number;
    page_size: number;
    filter?: string;
}

/**
  * Security Tag Object Property JSON
  */
export interface SecurityTagObjectPropertyJson {
    name: string;
    value: string;
}

/**
  * Security Tag Object Type JSON
  */
export interface SecurityTagObjectTypeJson {
    type: string;
    name: string;
}

/**
  * Security Tag Object Type List JSON
  */
export interface SecurityTagObjectTypeListJson {
    data: Array<SecurityTagObjectTypeJson>;
}

/**
  * Security Tag Update Request JSON
  */
export interface SecurityTagUpdateRequestJson {
    update_vms: boolean;
    object_id: string;
    name: string;
    description: string;
    assigned_vm_ids: Array<string>;
}

/**
  * Virtual Machine assigned to the Security Tag JSON
  */
export interface SecurityTagVmJson {
    object_id: string;
    name: string;
    scope: string;
}

/**
  * Security Tag with Assigned VMs JSON
  */
export interface SecurityTagWithAssignedVMsJson {
    assigned_vms: Array<SecurityTagVmJson>;
    object_id: string;
    name: string;
    description: string;
    is_temporal: boolean;
    vm_count: number;
}

/**
  * Security Tags JSON
  */
export interface SecurityTagsJson {
    data: Array<SecurityTagJson>;
}

/**
    * Security Tag Create Request.
    */
export class SecurityTagCreateRequest {
        constructor(securityTagCreateRequest: SecurityTagCreateRequest);
        constructor(securityTagCreateRequestJson: SecurityTagCreateRequestJson);
        constructor(name: string, description: string, assignedVmIds: Array<string>);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get assigned vm ids.
            * @returns {Array<string>}
            */
        get assignedVmIds(): Array<string>;
        /**
            * Get the json representation of this class.
            * @returns {SecurityTagCreateRequestJson}
            */
        get json(): SecurityTagCreateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Security Group Tag Object List.
    */
export class SecurityTagObjectList {
        constructor(_json: SecurityTagObjectListJson);
        /**
            * Get current page parameters.
            * @returns {SecurityTagObjectPagingParams}
            */
        get currentPageParameters(): SecurityTagObjectPagingParams;
        /**
            * Get next page parameters.
            * @returns {SecurityTagObjectPagingParams | null}
            */
        get nextPageParameters(): SecurityTagObjectPagingParams | null;
        /**
            * Get total records.
            * @returns {number}
            */
        get totalRecords(): number;
        /**
            * Get last page.
            * @returns {boolean}
            */
        get lastPage(): boolean;
        /**
            * Get data.
            * @returns {Array<SecurityTagObject>}
            */
        get data(): Array<SecurityTagObject>;
        /**
            * Get the json representation of this class.
            * @returns {SecurityTagObjectListJson}
            */
        get json(): SecurityTagObjectListJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Security Tag Object Paging Params.
    */
export class SecurityTagObjectPagingParams {
        constructor(_json: SecurityTagObjectPagingParamsJson);
        /**
            * Get page.
            * @returns {number}
            */
        get page(): number;
        /**
            * Get page size.
            * @returns {number}
            */
        get pageSize(): number;
        /**
            * Get filter.
            * @returns {string | undefined}
            */
        get filter(): string | undefined;
        /**
            * Get the json representation of this class.
            * @returns {SecurityTagObjectPagingParamsJson}
            */
        get json(): SecurityTagObjectPagingParamsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Security Tag Object Property.
    */
export class SecurityTagObjectProperty {
        constructor(_json: SecurityTagObjectPropertyJson);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get value.
            * @returns {string}
            */
        get value(): string;
        /**
            * Get the json representation of this class.
            * @returns {SecurityTagObjectPropertyJson}
            */
        get json(): SecurityTagObjectPropertyJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Security Tag Object Type List.
    */
export class SecurityTagObjectTypeList {
        constructor(_json: SecurityTagObjectTypeListJson);
        /**
            * Get data.
            * @returns {Array<SecurityTagObjectType>}
            */
        get data(): Array<SecurityTagObjectType>;
        /**
            * Get the json representation of this class.
            * @returns {SecurityTagObjectTypeListJson}
            */
        get json(): SecurityTagObjectTypeListJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Security Tag Object Type.
    */
export class SecurityTagObjectType {
        constructor(_json: SecurityTagObjectTypeJson);
        /**
            * Get type.
            * @returns {string}
            */
        get type(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get the json representation of this class.
            * @returns {SecurityTagObjectTypeJson}
            */
        get json(): SecurityTagObjectTypeJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Security Tag Object.
    */
export class SecurityTagObject {
        constructor(_json: SecurityTagObjectJson);
        /**
            * Get type.
            * @returns {string}
            */
        get type(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get properties.
            * @returns {Array<SecurityTagObjectProperty>}
            */
        get properties(): Array<SecurityTagObjectProperty>;
        /**
            * Get the json representation of this class.
            * @returns {SecurityTagObjectJson}
            */
        get json(): SecurityTagObjectJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Security Tag Update Request.
    */
export class SecurityTagUpdateRequest {
        constructor(securityTagUpdateRequest: SecurityTagUpdateRequest);
        constructor(securityTagUpdateRequestJson: SecurityTagUpdateRequestJson);
        constructor(updateVms: boolean, objectId: string, name: string, description: string, assignedVmIds: Array<string>);
        /**
            * Get update vms.
            * @returns {boolean}
            */
        get updateVms(): boolean;
        /**
            * Get object id.
            * @returns {string}
            */
        get objectId(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get assigned vm ids.
            * @returns {Array<string>}
            */
        get assignedVmIds(): Array<string>;
        /**
            * Get the json representation of this class.
            * @returns {SecurityTagUpdateRequestJson}
            */
        get json(): SecurityTagUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Virtual Machine assigned to the Security Tag.
    */
export class SecurityTagVm {
        constructor(_json: SecurityTagVmJson);
        /**
            * Get object id.
            * @returns {string}
            */
        get objectId(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get scope.
            * @returns {string}
            */
        get scope(): string;
        /**
            * Get the json representation of this class.
            * @returns {SecurityTagVmJson}
            */
        get json(): SecurityTagVmJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Security Tag with Assigned VMs.
    */
export class SecurityTagWithAssignedVMs {
        constructor(_json: SecurityTagWithAssignedVMsJson);
        /**
            * Get assigned vms.
            * @returns {Array<SecurityTagVm>}
            */
        get assignedVms(): Array<SecurityTagVm>;
        /**
            * Get object id.
            * @returns {string}
            */
        get objectId(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get is temporal.
            * @returns {boolean}
            */
        get isTemporal(): boolean;
        /**
            * Get vm count.
            * @returns {number}
            */
        get vmCount(): number;
        /**
            * Get the json representation of this class.
            * @returns {SecurityTagWithAssignedVMsJson}
            */
        get json(): SecurityTagWithAssignedVMsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Security Tag.
    */
export class SecurityTag {
        constructor(_json: SecurityTagJson);
        /**
            * Get object id.
            * @returns {string}
            */
        get objectId(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get is temporal.
            * @returns {boolean}
            */
        get isTemporal(): boolean;
        /**
            * Get vm count.
            * @returns {number}
            */
        get vmCount(): number;
        /**
            * Get the json representation of this class.
            * @returns {SecurityTagJson}
            */
        get json(): SecurityTagJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Security Tags.
    */
export class SecurityTags {
        constructor(_json: SecurityTagsJson);
        /**
            * Get data.
            * @returns {Array<SecurityTag>}
            */
        get data(): Array<SecurityTag>;
        /**
            * Get the json representation of this class.
            * @returns {SecurityTagsJson}
            */
        get json(): SecurityTagsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class TemplateVmConfig {
        constructor(_json: TemplateVmConfigJson);
        /**
            * Get vm template uuid.
            * @returns {string}
            */
        get vmTemplateUuid(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get computer name.
            * @returns {string}
            */
        get computerName(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get storage profile uuid.
            * @returns {string}
            */
        get storageProfileUuid(): string;
        /**
            * Get vnics.
            * @returns {Array<VmVnicRequestJson>}
            */
        get vnics(): Array<VmVnicRequestJson>;
        /**
            * Get the json representation of this class.
            * @returns {TemplateVmConfigJson}
            */
        get json(): TemplateVmConfigJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * vApp Resource Summary Map.
    */
export class VappResourceSummaryMap {
        constructor(_json: VappResourceSummaryMapJson);
        /**
            * Get summaries.
            * @returns {{ [key: string]: VappResourceSummary }}
            */
        get summaries(): {
                [key: string]: VappResourceSummary;
        };
        /**
            * Get the json representation of this class.
            * @returns {VappResourceSummaryMapJson}
            */
        get json(): VappResourceSummaryMapJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Vdc add vapp from template request.
    */
export class VdcAddVappFromTemplateRequest {
        constructor(vdcAddVappFromTemplateRequest: VdcAddVappFromTemplateRequest);
        constructor(vdcAddVappFromTemplateRequestJson: VdcAddVappFromTemplateRequestJson);
        constructor(vappTemplateUuid: string, name: string, description: string, vms: Array<TemplateVmConfigJson>);
        /**
            * Get vapp template uuid.
            * @returns {string}
            */
        get vappTemplateUuid(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get vms.
            * @returns {Array<TemplateVmConfig>}
            */
        get vms(): Array<TemplateVmConfig>;
        /**
            * Get the json representation of this class.
            * @returns {VdcAddVappFromTemplateRequestJson}
            */
        get json(): VdcAddVappFromTemplateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Storage Profile Bill.
    */
export class StorageProfileBill {
        constructor(_json: StorageProfileBillJson);
        /**
            * Get storage profile uuid.
            * @returns {string}
            */
        get storageProfileUuid(): string;
        /**
            * Get total usage.
            * @returns {number}
            */
        get totalUsage(): number;
        /**
            * Get total cost.
            * @returns {number}
            */
        get totalCost(): number;
        /**
            * Get res usage.
            * @returns {number}
            */
        get resUsage(): number;
        /**
            * Get res cost.
            * @returns {number}
            */
        get resCost(): number;
        /**
            * Get burst usage.
            * @returns {number}
            */
        get burstUsage(): number;
        /**
            * Get burst cost.
            * @returns {number}
            */
        get burstCost(): number;
        /**
            * Get vm usage.
            * @returns {number}
            */
        get vmUsage(): number;
        /**
            * Get catalog usage.
            * @returns {number}
            */
        get catalogUsage(): number;
        /**
            * Get Zerto journal storage usage.
            */
        get zertoJournalStorageUsage(): number;
        /**
            * Get Zerto replicated storage usage.
            * @returns {number} 0 if not a Zerto environ
            */
        get zertoReplicatedStorageUsage(): number;
        /**
            * Get the json representation of this class.
            * @returns {StorageProfileBillJson}
            */
        get json(): StorageProfileBillJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * vDC Storage Profile Summary.
    */
export class VdcStorageProfileSummary {
        constructor(_json: VdcStorageProfileSummaryJson);
        /**
            * Get vdc uuid.
            * @returns {string}
            */
        get vdcUuid(): string;
        /**
            * Get year.
            * @returns {number}
            */
        get year(): number;
        /**
            * Get month.
            * @returns {number}
            */
        get month(): number;
        /**
            * Get time.
            * @returns {number}
            */
        get time(): number;
        /**
            * Get storage profile bills.
            * @returns {Array<StorageProfileBill>}
            */
        get storageProfileBills(): Array<StorageProfileBill>;
        /**
            * Get the json representation of this class.
            * @returns {VdcStorageProfileSummaryJson}
            */
        get json(): VdcStorageProfileSummaryJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * vDC Summary.
    */
export class VdcSummary {
        constructor(_json: VdcSummaryJson);
        /**
            * Gets the number of vApps for the vDC
            * @returns {number}
            */
        get numberOfVapps(): number;
        /**
            * Gets the number of VMs for the vDC
            * @returns {number}
            */
        get numberOfVms(): number;
        /**
            * Gets the allocated cpu for the vDC
            * @returns {number}
            */
        get allocationCpu(): number;
        /**
            * Gets the allocated memory for the vDC
            * @returns {number}
            */
        get allocationMemory(): number;
        /**
            * Gets the configured cpu for the vDC
            * @returns {number}
            */
        get configuredCpu(): number;
        /**
            * Gets the configured memory for the vDC
            * @returns {number}
            */
        get configuredMemory(): number;
        /**
            * Gets the configured disk for the vDC
            * @returns {number}
            */
        get configuredDisk(): number;
        /**
            * Gets the reserved cpu for the vDC
            * @returns {number}
            */
        get reservedCpu(): number;
        /**
            * Gets the reserved memory for the vDC
            * @returns {number}
            */
        get reservedMem(): number;
        /**
            * Gets the consumed cpu for the vDC
            * @returns {number}
            */
        get consumedCpu(): number;
        /**
            * Gets the consumed memory for the vDC
            * @returns {number}
            */
        get consumedMem(): number;
        /**
            * Gets the consumed disk for the vDC
            * @returns {number}
            */
        get consumedDisk(): number;
        /**
            * Gets the provisioned disk for the vDC
            * @returns {number}
            */
        get provisionedDisk(): number;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {VdcSummaryJson} the JSON representation
            */
        get json(): VdcSummaryJson;
}

/**
    * Virtual Data Center.
    */
export class Vdc extends Entity implements EntityWithPerfSamples {
        apiPrefix: string;
        getPerfCounters: () => Promise<Array<PerfCounter>>;
        getPerfSamples: (request: PerfSamplesRequest) => Promise<PerfSamplesSeries>;
        constructor(_json: VdcJson);
        /**
            * Gets a vDC by UUID.
            * @param uuid vDC UUID
            * @returns {Promise<Vdc>} promise that resolves with the vDC
            */
        static getVdc(uuid: string): Promise<Vdc>;
        get entityType(): EntityType;
        /**
            * Indicates whether the vDC is enabled.
            * @returns {boolean} value
            */
        get enabled(): boolean;
        /**
            * Gets the vCenter HREF.
            * @returns {string} vCenter HREF
            */
        get vcenterMoref(): string;
        /**
            * Gets the vCenter name.
            * @returns {string} vCenter name
            */
        get vcenterName(): string;
        /**
            * Gets the description.
            * @returns {string} description
            */
        get description(): string;
        /**
            * Gets the vCloud HREF
            * @returns {string} vCloud HREF
            */
        get vcloudHref(): string;
        /**
            * Gets the vCenter instance UUID.
            * @returns {string} vCenter instance UUID
            */
        get vcenterInstanceUuid(): string;
        /**
            * Gets the vCenter HREF
            * @returns {string} vCenter HREF
            */
        get vcenterHref(): string;
        /**
            * Gets the vDC allocation __json__
            * It can either be 'paygo', 'allocation_pool' or 'reservation_pool'.
            *
            * BURST = 'paygo'
            * RES_PLUS_BURST = 'allocation_pool'
            * RES = 'reservation_pool'
            *
            * @returns {VdcAllocationModel} allocation __json__ identifier
            */
        get allocationModel(): VdcAllocationModel;
        /**
            * Gets the amount of reserved CPU
            * @returns {number} reserved cpu
            */
        get reservedCpu(): number;
        /**
            * Gets the amount of reserved memory.
            * @returns {number} reserved memory
            */
        get reservedMemory(): number;
        /**
            * Gets the disk limit within the vDc.
            * @returns {number} disk limit
            */
        get diskLimit(): number;
        /**
            * Gets the amount of CPU allocated
            * @returns {number} allocated CPU
            */
        get allocatedCpu(): number;
        /**
            * Gets the amount of memory allocated
            * @returns {number} allocated memory
            */
        get allocatedMemory(): number;
        /**
            * Gets the maximum hardware version of the vDC.
            * @returns {string} max hardware version
            */
        get maxHardwareVersion(): string;
        /**
            * Gets the network quota.
            * @returns {number} network quota
            */
        get networkQuota(): number;
        /**
            * Gets the number of networks that exist within this vDC.
            * @returns {number} used network count
            */
        get usedNetworkCount(): number;
        /**
            * Gets the datacenter location identifier.
            * @returns {string} location ID
            */
        get locationId(): string;
        /**
            * Gets the UUID of the organization that the vDC is associated with.
            * @returns {string} Org UUID
            */
        get orgUuid(): string;
        /**
            * Indicates whether the vDC has IaaS backups (either integrated or advanced).
            * @returns {boolean}
            */
        get hasIaasBackups(): boolean;
        /**
            * Whether the vDC has the integrated backups offering.
            * @returns {boolean}
            */
        get hasIntegratedBackups(): boolean;
        /**
            * Whether the vDC has the advanced backups offering.
            * @returns {boolean}
            */
        get hasAdvancedBackups(): boolean;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {VdcJson} the API __json__ object
            */
        get json(): VdcJson;
        /**
            * Refreshes the vDC data by retrieving it from the API again.
            * @returns {Promise<Vdc>}
            */
        refresh(): Promise<Vdc>;
        /**
            * Gets the vDCs child vApps.
            * @returns {Promise<Vapp[]>} promise that resolves with an array of child vApps
            */
        getVapps(): Promise<Array<Vapp>>;
        /**
            * Gets the vDCs child VMs.
            * @returns {Promise<Vm[]>} promise that resolves with an array of child VMs
            */
        getVms(): Promise<Array<Vm>>;
        /**
            * Create a scratch vApp into the vDC.
            * @param {BuildVappRequestJson} buildVappRequest
            * @returns {Promise<Task>} task promise
            */
        buildVapp(buildVappRequest: BuildVappRequestJson): Promise<Task>;
        /**
            * Gets the vDCs Summary.
            * @returns {Promise<VdcSummary>} promise that resolved with a vDC summary
            */
        getSummary(): Promise<VdcSummary>;
        /**
            * Add a vApp from template to vDC.
            * @param {VdcAddVappFromTemplateRequest} vdcAddVappFromTemplateRequest
            * @returns {Promise<Task>} task promise
            */
        addVappFromTemplate(vdcAddVappFromTemplateRequest: VdcAddVappFromTemplateRequest): Promise<Task>;
        /**
            * Get media for the vDC.
            * @returns {Promise<Array<Media>>} promise that is resolved with a list of media
            */
        getMedias(): Promise<Array<Media>>;
        /**
            * Gets the vDC metadata.
            * @returns {Promise<Metadata<MetadataType>[]>}
            */
        getMetadata(): Promise<Array<Metadata<MetadataType>>>;
        /**
            * Get the VM inventory reports available for download for the given vDC.
            * @param {string} the report format to filter on
            * @returns {Promise<Array<ReportHeader>>} promise Promise that resolves with a list of report headers
            */
        getVmInventoryReports(format?: ReportFormat): Promise<Array<ReportHeader>>;
        /**
            * Updates the vDC metadata.
            * @param {Array<Metadata<MetadataType>>} metadata the new array of metadata
            * @returns {Promise<Task>} task promise
            */
        updateMetadata(metadata: Array<Metadata<MetadataType>>): Promise<Task>;
        /**
            * Deletes a metadata entry for vDC.
            * @param {string} metadataKey the key of the metadata entry to delete
            * @returns {Promise<Task>} task promise
            */
        deleteMetadata(metadataKey: string): Promise<Task>;
        /**
            * Get the edges for the vDC.
            * @returns {Promise<Edge>} promise that resolves with a list of edges
            */
        getEdges(): Promise<Array<Edge>>;
        /**
            * Gets all org-vdc networks within this vDC.
            * @returns {Promise<Array<InternalNetwork>>} a promise that resolves with the list of org-vdc networks.
            */
        getOrgVdcNetworks(): Promise<Array<InternalNetwork>>;
        /**
            * Creates a new org-vdc network in this vDC.
            * @param {OrgVdcNetworkCreateRequest} network the specification for the new network
            * @returns {Promise<Task>} a promise that resolves with a task
            */
        createOrgVdcNetwork(network: OrgVdcNetworkCreateRequest): Promise<Task>;
        /**
            * Get all storage profiles for the vDC.
            * @param {boolean} includeDisabled whether to also return disabled storage profiles
            * @returns {Promise<Array<StorageProfile>>} a promise that resolves with the list of storage profiles
            */
        getStorageProfiles(includeDisabled?: boolean): Promise<Array<StorageProfile>>;
        /**
            * Gets the current billing information
            * @returns {Promise<BillingSummary>} a promise that resolves with the current billing information
            */
        getCurrentBilling(): Promise<BillingSummary>;
        /**
            * Get billing for a specified billing period. If the billing period is not specified, the current billing period is
            * used.
            * @param {number} year the year
            * @param {number} month the month in range 0-11
            * @returns {Promise<Bill>} a promise that resolves with the bill
            */
        getBilling(year?: number, month?: number): Promise<Bill>;
        /**
            * Get bills for all child vapps for the specified billing period. If the billing period is not specified, the current
            * billing period is used.
            * @param {number} month the month in range 0-11
            * @param {number} year the year
            * @returns {Promise<Array<Bill>>} a promise that resolves with the list of vapp bills
            */
        getVappBills(month?: number, year?: number): Promise<Array<Bill>>;
        /**
            * Get bills for all child VMs for the specified billing period. If the billing period is not specified, the current
            * billing period is used.
            * @param {number} month the month in range 0-11
            * @param {number} year the year
            * @returns {Promise<Array<Bill>>} a promise that resolves with the list of VM bills
            */
        getVmBills(month?: number, year?: number): Promise<Array<Bill>>;
        /**
            * Gets the storage profile summary for this vDC and the specified billing period.
            * @param {number} year the year
            * @param {number} month the month in range 1-12.
            * @returns {Promise<VdcStorageProfileSummary>} a promise that resolves with the storage profile summary
            */
        getStorageProfileSummary(year?: number, month?: number): Promise<VdcStorageProfileSummary>;
        /**
            * Gets the cost over invoice period samples for the vDC and specified billing period.
            * @param {number} year the year
            * @param {number} month the month in range 1-12
            * @param {Array<string>} additionalFields any additional bill fields that should be included in the results
            * @returns {Promise<BillingSampleSerie>} a promise that resolves with the sample series
            */
        getCostOverInvoicePeriodSerie(year?: number, month?: number, additionalFields?: Array<string>): Promise<BillingSampleSerie>;
        /**
            * Generate the vm inventory report for a given vDC.
            * @param {boolean} emailOnCompletion Whether to email the report upon successful generation
            * @param {string} email email address to send the report to if emailOnCompletion is true,
            * defaults to the user's profile email if not specified
            * @returns {Promise<Task>} promise Promise that resolves with a Task
            */
        generateVmInventoryReport(emailOnCompletion?: boolean, email?: string): Promise<Task>;
        /**
            * Gets all child vApp resource summaries.
            * @returns {Promise<VappResourceSummaryMap>} a promise that resolves with a map of vApp resource summaries, keyed by
            * UUID.
            */
        getVappResourceSummaries(): Promise<VappResourceSummaryMap>;
        /**
            * Gets resource summaries for all child VMs.
            * @returns {Promise<VmResourceSummaryMap>} a promise that resolves with a map of VM resource summaries, keyed by
            * UUID.
            */
        getVmResourceSummaries(): Promise<VmResourceSummaryMap>;
        /**
            * Retrieve a CSV report email with all event history for a given vDC.
            * @returns {Promise<void>} there is no response object.
            */
        emailEventHistory(email: string): Promise<void>;
        /**
            * Create Vm affinity rule.
            * @param {VmAffinityRuleCreateRequest} request
            * @returns {Promise<Task>}
            */
        createVmAffinityRule(request: VmAffinityRuleCreateRequest): Promise<Task>;
        /**
            * Update VM affinity rule.
            * @param {VmAffinityRuleUpdateRequest} vmAffinityRuleUpdateRequest
            * @returns {Promise<Task>}
            */
        updateVmAffinityRule(vmAffinityRuleUpdateRequest: VmAffinityRuleUpdateRequest): Promise<Task>;
        /**
            * Delete VM affinity rule.
            * @param {string} ruleUuid
            * @returns {Promise<Task>}
            */
        deleteVmAffinityRule(ruleUuid: string): Promise<Task>;
        /**
            * Get VM affinity rule list.
            * @returns {Promise<Array<VmAffinityRule>>}
            */
        getVmAffinityRules(): Promise<Array<VmAffinityRule>>;
        /**
            * Get IP set.
            * @param {string} ipSetId
            * @returns {Promise<IpSet>}
            */
        getIpSet(ipsetId: string): Promise<IpSet>;
        /**
            * Get IP set list.
            * @returns {Promise<Array<IpSet>>}
            */
        getIpSets(): Promise<Array<IpSet>>;
        /**
            * Create IP set.
            * @params {IpSetCreateRequest} ipSetCreateRequest
            * @returns {Promise<IpSet>}
            */
        createIpSet(ipSetCreateRequest: IpSetCreateRequest): Promise<IpSet>;
        /**
            * Update IP set.
            * @params {string} ipsetId
            * @params {IpSetUpdateRequest} ipSetUpdateRequest
            * @returns {Promise<IpSet>}
            */
        updateIpSet(ipsetId: string, ipSetUpdateRequest: IpSetUpdateRequest): Promise<IpSet>;
        /**
            * Delete IP set.
            * @params {string} ipsetId
            * @returns {Promise<Task>}
            */
        deleteIpSet(ipsetId: string): Promise<Task>;
        /**
            * Get MAC set.
            * @params {string} macsetUuid
            * @returns {Promise<MacSet>}
            */
        getMacSet(macsetUuid: string): Promise<MacSet>;
        /**
            * Get MAC set list.
            * @returns {Promise<Array<MacSet>>}
            */
        getMacSets(): Promise<Array<MacSet>>;
        /**
            * Create MAC set.
            * @params {MacSetCreateRequest} macSetCreateRequest
            * @returns {Promise<MacSet>}
            */
        createMacSet(macSetCreateRequest: MacSetCreateRequest): Promise<MacSet>;
        /**
            * Update MAC set.
            * @params {string} macsetUuid
            * @params {MacSetUpdateRequest} macSetUpdateRequest
            * @returns {Promise<MacSet>}
            */
        updateMacSet(macsetUuid: string, macSetUpdateRequest: MacSetUpdateRequest): Promise<MacSet>;
        /**
            * Delete MAC set.
            * @params {string} macsetUuid
            * @returns {Promise<Task>}
            */
        deleteMacSet(macsetUuid: string): Promise<Task>;
        /**
            * Get application.
            * @params {string} applicationId
            * @returns {Promise<Application>}
            */
        getApplication(applicationId: string): Promise<Application>;
        /**
            * Get application list.
            * @returns {Promise<Array<Application>>}
            */
        getApplications(): Promise<Array<Application>>;
        /**
            * Get application group.
            * @params {string} applicationId
            * @returns {Promise<ApplicationGroup>}
            */
        getApplicationGroup(applicationId: string): Promise<ApplicationGroup>;
        /**
            * Get application group list.
            * @returns {Promise<Array<ApplicationGroup>>}
            */
        getApplicationGroups(): Promise<Array<ApplicationGroup>>;
        /**
            * Get a list of security groups for a given vDC.
            * @returns {Promise<Array<SecurityGroup>>}
            */
        getSecurityGroups(): Promise<Array<SecurityGroup>>;
        /**
            * Get the specified security group for a given vDC.
            * @params {string} securitygroupId
            * @returns {Promise<SecurityGroup>}
            */
        getSecurityGroup(securitygroupId: string): Promise<SecurityGroup>;
        /**
            * Create a new security group for a given vDC.
            * @params {SecurityGroupCreateRequest} createRequest
            * @returns {Promise<SecurityGroup>}
            */
        createSecurityGroup(createRequest: SecurityGroupCreateRequest): Promise<SecurityGroup>;
        /**
            * Update a specified security group for a given vDC.
            * @params {string} securitygroupId
            * @params {SecurityGroupUpdateRequest} updateRequest
            * @returns {Promise<SecurityGroup>}
            */
        updateSecurityGroup(securitygroupId: string, updateRequest: SecurityGroupUpdateRequest): Promise<SecurityGroup>;
        /**
            * Delete a specified security group for a given vDC.
            * @params {string} securitygroupId
            * @returns {Promise<Task>}
            */
        deleteSecurityGroup(securitygroupId: string): Promise<Task>;
        /**
            * Get the list of security group member option types.
            * @returns {Promise<Array<SecurityGroupMemberOptionType>>}
            */
        getSecurityGroupMemberOptionTypes(): Promise<Array<SecurityGroupMemberOptionType>>;
        /**
            * Get the security group member options of the specified type.
            * If the specified page number is larger than number of actual pages, the response will return as an empty list.
            * @param {string | SecurityGroupMemberOptionType} type Type.
            * Valid types can be retrieved from the getSecurityGroupMemberOptionTypes() endpoint
            * @param {number | SecurityGroupMemberOptionPagingParams} pageOrPagingParams The page number or paging params.
            * The index of the first page is 1. (Default: 1)
            * @param {number} pageSize The page size (Optional). (Default 25)
            * @param {string} filter The term to be searched by (Optional).
            * @returns {Promise<SecurityGroupMemberOptionTypeList>}
            */
        getSecurityGroupMemberOptions(type: string | SecurityGroupMemberOptionType, pageOrPagingParams: number | SecurityGroupMemberOptionPagingParams, pageSize?: number, filter?: string): Promise<SecurityGroupMemberOptionList>;
        /**
            * Get a list of security tags for a given vDC.
            * @returns {Promise<Array<SecurityTag>>}
            */
        getSecurityTags(): Promise<Array<SecurityTag>>;
        /**
            * Get the specified security tag for a given vDC.
            * @params {string} securitytagId
            * @returns {Promise<SecurityTagWithAssignedVMs>}
            */
        getSecurityTag(securitytagId: string): Promise<SecurityTagWithAssignedVMs>;
        /**
            * Create a new security tag for a given vDC.
            * @params {SecurityTagCreateRequest} createRequest
            * @returns {Promise<SecurityTagWithAssignedVMs>}
            */
        createSecurityTag(createRequest: SecurityTagCreateRequest): Promise<SecurityTagWithAssignedVMs>;
        /**
            * Update a specified security tag for a given vDC.
            * @params {string} securitytagId
            * @params {SecurityTagUpdateRequest} updateRequest
            * @returns {Promise<SecurityTagWithAssignedVMs>}
            */
        updateSecurityTag(securitytagId: string, updateRequest: SecurityTagUpdateRequest): Promise<SecurityTagWithAssignedVMs>;
        /**
            * Delete a specified security tag for a given vDC.
            * @params {string} securitytagId
            * @returns {Promise<Task>}
            */
        deleteSecurityTag(securitytagId: string): Promise<Task>;
        /**
            * Get the list of security tag object types.
            * @returns {Promise<Array<SecurityTagObjectType>>}
            */
        getSecurityTagObjectTypes(): Promise<Array<SecurityTagObjectType>>;
        /**
            * Get the security tag objects of the specified type.
            * If the specified page number is larger than number of actual pages, the response will return as an empty list.
            * @param {string | SecurityTagObjectType} type Type.
            * Valid types can be retrieved from the getSecur:ityTagObjectTypes() endpoint
            * @param {number | SecurityTagObjectPagingParams} pageOrPagingParams The page number or paging params.
            * The index of the first page is 1. (Default: 1)
            * @param {number} pageSize The page size (Optional). (Default 25)
            * @param {string} filter The term to be searched by (Optional).
            * @returns {Promise<SecurityTagObjectList>}
            */
        getSecurityTagObjects(type: string | SecurityTagObjectType, pageOrPagingParams: number | SecurityTagObjectPagingParams, pageSize?: number, filter?: string): Promise<SecurityTagObjectList>;
        /**
            * Enable the distributed firewall on an Org vDC.
            * @returns {Promise<unknown>}
            */
        enableDistributedFirewall(): Promise<unknown>;
        /**
            * Get the distributed firewall at layer 3 (general) for a given vDC.
            * @returns {Promise<DistributedFirewallLayer3>}
            */
        getDistributedFirewallGeneral(): Promise<DistributedFirewallLayer3>;
        /**
            * Update the distributed firewall at layer 3 (general) for a given vDC.
            *
            * @param {string} eTag the eTag value. specifying an eTag value allows a client to ensure that the distributed
            * firewall has not been updated since it last read the configuration.
            * If the specified eTag value does not match the current etag value, the request will fail.
            * Use the response from getDistributedFirewallLayer3 to retrieve the current generationNumber needed to modify the
            * configuration (e.g. 1583956143338)
            * @param {Promise<DistributedFirewallLayer3>} updateRequest update request
            * @return {Promise<DistributedFirewallLayer3>}
            */
        updateDistributedFirewallGeneral(updateRequest: DistributedFirewallLayer3UpdateRequest, eTag?: number): Promise<DistributedFirewallLayer3>;
        /**
            * Get the list of distributed firewall layer 3 (general) source object types.
            */
        getDistributedFirewallGeneralSourceObjectTypes(): Promise<Array<DistributedFirewallObjectType>>;
        /**
            * Get the list of source objects for distributed firewall layer 3 (general).
            */
        getDistributedFirewallGeneralSourceObjects(type: string, filters?: ObjectPagingParams | ObjectPagingParamsJson): Promise<DistributedFirewallObjectList>;
        /**
            * Get the list of distributed firewall layer 3 (general) destination object types.
            */
        getDistributedFirewallGeneralDestinationObjectTypes(): Promise<Array<DistributedFirewallObjectType>>;
        /**
            * Get the list of destination objects for distributed firewall layer 3 (general).
            */
        getDistributedFirewallGeneralDestinationObjects(type: string, filters?: ObjectPagingParams | ObjectPagingParamsJson): Promise<DistributedFirewallObjectList>;
        /**
            * Get the list of distributed firewall layer 3 (general) applied to object types.
            */
        getDistributedFirewallGeneralAppliedToObjectTypes(): Promise<Array<DistributedFirewallObjectType>>;
        /**
            * Get the list of applied to objects for distributed firewall layer 3 (general).
            */
        getDistributedFirewallGeneralAppliedToObjects(type: string, filters?: ObjectPagingParams | ObjectPagingParamsJson): Promise<DistributedFirewallObjectList>;
        /**
            * Get the distributed firewall at layer 2 (Ethernet) for a given vDC.
            * @returns {Promise<DistributedFirewallLayer2>}
            */
        getDistributedFirewallEthernet(): Promise<DistributedFirewallLayer2>;
        /**
            * Update the distributed firewall at layer 2 (ethernet) for a given vDC.
            *
            * @param {string} eTag the eTag value. specifying an eTag value allows a client to ensure that the distributed
            * firewall has not been updated since it last read the configuration.
            * If the specified eTag value does not match the current etag value, the request will fail.
            * Use the response from getDistributedFirewallLayer3 to retrieve the current generationNumber needed to modify the
            * configuration (e.g. 1583956143338)
            * @param {Promise<DistributedFirewallLayer2>} updateRequest update request
            * @return {Promise<DistributedFirewallLayer2>}
            */
        updateDistributedFirewallEthernet(updateRequest: DistributedFirewallLayer2UpdateRequest, eTag?: number): Promise<DistributedFirewallLayer2>;
        /**
            * Get the list of distributed firewall layer 2 (ethernet) source object types.
            */
        getDistributedFirewallEthernetSourceObjectTypes(): Promise<Array<DistributedFirewallObjectType>>;
        /**
            * Get the list of source objects for distributed firewall layer 2 (ethernet).
            */
        getDistributedFirewallEthernetSourceObjects(type: string, filters?: ObjectPagingParams | ObjectPagingParamsJson): Promise<DistributedFirewallObjectList>;
        /**
            * Get the list of distributed firewall layer 2 (ethernet) destination object types.
            */
        getDistributedFirewallEthernetDestinationObjectTypes(): Promise<Array<DistributedFirewallObjectType>>;
        /**
            * Get the list of destination objects for distributed firewall layer 2 (ethernet).
            */
        getDistributedFirewallEthernetDestinationObjects(type: string, filters?: ObjectPagingParams | ObjectPagingParamsJson): Promise<DistributedFirewallObjectList>;
        /**
            * Get the list of distributed firewall layer 2 (ethernet) applied to object types.
            */
        getDistributedFirewallEthernetAppliedToObjectTypes(): Promise<Array<DistributedFirewallObjectType>>;
        /**
            * Get the list of applied to objects for distributed firewall layer 2 (ethernet).
            */
        getDistributedFirewallEthernetAppliedToObjects(type: string, filters?: ObjectPagingParams | ObjectPagingParamsJson): Promise<DistributedFirewallObjectList>;
        /**
            * Create a distributed firewall layer2 (ethernet) restore point for a vDC's distributed firewall.
            *
            * @param {string} description distributed firewall layer2 restore point description
            * @return distributed firewall layer 2 restore point
            */
        createDistributedFirewallEthernetRestorePoint(description: string): Promise<DistributedFirewallLayer2RestorePointDetails>;
        /**
            * Get the distributed firewall layer2 (ethernet) restore points for a vDC.
            * @return {Promise<Array<DistributedFirewallRestorePoint>>} restorePoints Distributed firewall restore points
            */
        getDistributedFirewallEthernetRestorePoints(): Promise<Array<DistributedFirewallRestorePoint>>;
        /**
            * Get a distributed firewall layer2 restore point for a vDC at a given time.
            * Restore point time is epoch time in milliseconds.
            *
            * @param {number} restorePointTime restore point time
            * @return distributed firewall restore point
            */
        getDistributedFirewallEthernetRestorePoint(restorePointTime: number): Promise<DistributedFirewallLayer2RestorePointDetails>;
        /**
            * Delete a distributed firewall layer2 (general) restore point.
            * Restore point time is epoch time in milliseconds.
            *
            * @param {number} restorePointTime Restore point time
            */
        deleteDistributedFirewallEthernetRestorePoint(restorePointTime: number): Promise<unknown>;
        /**
            * Restore a vDC's distributed firewall layer2 (ethernet) configuration to a specified restore point.
            *
            * @param {number} restorePointTime The restore point time
            * @return distributed firewall
            */
        restoreDistributedFirewallEthernet(restorePointTime: number): Promise<DistributedFirewallLayer2>;
        /**
            * Create a distributed firewall layer3 (general) restore point for a vDC's distributed firewall.
            *
            * @param {string} description distributed firewall layer3 restore point description
            * @return distributed firewall layer 3 restore point
            */
        createDistributedFirewallGeneralRestorePoint(description: string): Promise<DistributedFirewallLayer3RestorePointDetails>;
        /**
            * Get the distributed firewall layer3 (general) restore points for a vDC.
            * @return {Promise<Array<DistributedFirewallRestorePoint>>} restorePoints Distributed firewall restore points
            */
        getDistributedFirewallGeneralRestorePoints(): Promise<Array<DistributedFirewallRestorePoint>>;
        /**
            * Get a distributed firewall layer3 (general) restore point for a vDC at a given time.
            * Restore point time is epoch time in milliseconds.
            *
            * @param {number} restorePointTime restore point time
            * @return distributed firewall restore point
            */
        getDistributedFirewallGeneralRestorePoint(restorePointTime: number): Promise<DistributedFirewallLayer3RestorePointDetails>;
        /**
            * Delete a distributed firewall layer3 (general) restore point.
            * Restore point time is epoch time in milliseconds.
            *
            * @param {number} restorePointTime Restore point time
            */
        deleteDistributedFirewallGeneralRestorePoint(restorePointTime: number): Promise<unknown>;
        /**
            * Restore a vDC's distributed firewall layer3 (general) configuration to a specified restore point.
            *
            * @param {number} restorePointTime The restore point time
            * @return distributed firewall
            */
        restoreDistributedFirewallGeneral(restorePointTime: number): Promise<DistributedFirewallLayer3>;
        /**
            * Gets the vDC's integrated backup status.
            * @returns {Promise<VdcIntegratedBackupStatusDetail>}
            */
        getIntegratedBackupStatus(): Promise<VdcIntegratedBackupStatusDetail>;
        /**
            * List the existing backup groups that are configured in a specified virtual
            * datacenter.
            *
            * @param {boolean} includeDeleted Whether to include deleted backup groups. Default is false. (Optional)
            * @param {boolean} includeSummaryStats Default is false. (Optional)
            * @param {boolean} includeLastRun Default is false. (Optional)
            * @param {boolean} includeBackupPolicy Default is false. (Optional)
            * @returns {Promise<Array<BackupGroup>>}
            */
        listBackupGroups(includeDeleted?: boolean, includeSummaryStats?: boolean, includeLastRun?: boolean, includeBackupPolicy?: boolean): Promise<Array<BackupGroup>>;
        /**
            * Gets backup group summary stats for the vDC.
            * Stat time-range defaults to the past 24 hours.
            * Both startTimeMillis and endTimeMillis params are required if one is used.
            *
            * @param {number} startTimeMillis Default is 24 hours ago. (Optional)
            * @param {number} endTimeMillis Default is now. (Optional)
            * @returns {Promise<VdcBackupSummaryStats>}
            */
        getBackupGroupSummaryStats(startTimeMillis?: number, endTimeMillis?: number): Promise<VdcBackupSummaryStats>;
        /**
            * Create a new backup group.
            *
            * @params {BackupGroupUpdateRequest} creationRequest the creation request body
            * @return {Promise<BackupGroup>}
            */
        createBackupGroup(creationRequest: BackupGroupUpdateRequest): Promise<BackupGroup>;
        /**
            * List the existing backup policies that are configured in a vDC.
            *
            * @param {boolean} includeOrgPolicies
            * @return {Promise<Array<BackupPolicy>>}
            */
        listBackupPolicies(includeOrgPolicies?: boolean): Promise<Array<BackupPolicy>>;
        /**
            * Get details of an individual vDC-scoped backup policy.
            *
            * @param {string} backupPolicyUid
            * @return {Promise<BackupPolicy>}
            */
        getBackupPolicy(backupPolicyUid: string): Promise<BackupPolicy>;
        /**
            * Create a new vdc-scoped backup policy.
            *
            * @param {BackupPolicyUpdateRequest} creationRequest
            * @return {Promise<BackupPolicy>}
            */
        createBackupPolicy(creationRequest: BackupPolicyUpdateRequest): Promise<BackupPolicy>;
        /**
            * Update a backup policy.
            *
            * @param {string} backupPolicyUid
            * @param {BackupPolicyUpdateRequest} updateRequest
            * @return {Promise<BackupPolicy>}
            */
        updateBackupPolicy(backupPolicyUid: string, updateRequest: BackupPolicyUpdateRequest): Promise<BackupPolicy>;
        /**
            * Delete a backup policy.
            *
            * @param {string} backupPolicyUid
            * @return {Promise<unknown>}
            */
        deleteBackupPolicy(backupPolicyUid: string): Promise<unknown>;
        /**
            * List backup runs for the specified vDC.
            * Limit defaults to 10 and query time range defaults to last 24 hours.
            *
            * @param {number} startTimeMillis Default is 24 hours ago. (Optional)
            * @param {number} endTimeMillis Default is now. (Optional)
            * @param {number} limit Default is 10. (Optional)
            * @return {Promise<Array<BackupGroupRun>>}
            */
        listBackupGroupRuns(startTimeMillis?: number, endTimeMillis?: number, limit?: number): Promise<Array<BackupGroupRun>>;
        /**
            * Gets the vDC's backup status.
            * @return {Promise<VdcBackupStatus>}
            */
        getBackupStatus(): Promise<VdcBackupStatus>;
        /**
            * Searches for recoverable VM snapshots within the vDC.
            *
            * @param {number} startTimeMillis Earliest backup time for which file results should be included. (Optional)
            * @param {number} endTimeMillis Latest backup time for which file results should be included. (Optional)
            * @param {string} search The search string. Wildcards supported with '*'. (Optional)
            * @param {Array<string>} backupGroupUids A set of backup groups that should be used to limit search results.
            * (only results that are associated with specified backup groups will be included). (Optional)
            * @return {Promise<Array<VmBackupSnapshot>>} a list of recoverable VM snapshots
            */
        searchRecoverableVMs(startTimeMillis?: number, endTimeMillis?: number, search?: string, backupGroupUids?: Array<string>): Promise<Array<VmBackupSnapshot>>;
        /**
            * Restores one or more VM backups within the vDC.
            *
            * @param {RestoreVmBackupsInVdcParams} params restoration parameters
            * @return {Promise<Task>} the restore task, used to track the asynchronous operation
            */
        restoreVMBackupsInVdc(params: RestoreVmBackupsInVdcParams): Promise<Task>;
        /**
            * Gets info about the backup cluster and remote replicas that are available
            * to the vDC.
            *
            * @return {Promise<VdcBackupClusterInfo>} information about the local backup cluster and
            * available remote clusters
            */
        getVdcBackupClusterInfo(): Promise<VdcBackupClusterInfo>;
        /**
            * Searches for recoverable backup files and folders within the vDC.
            *
            * @param {SearchVdcRecoverableFilesAndFoldersFilters} filters query filters (Optional)
            * @return {Promise<Array<RecoverableFileSearchResult>>} a list of recoverable files and folders
            */
        searchRecoverableFilesAndFolders(filters?: SearchVdcRecoverableFilesAndFoldersFilters): Promise<Array<RecoverableFileSearchResult>>;
        /**
            * Lists detailed task information for advanced backup restore tasks in a
            * specified vDC.
            * This will always return any currently running tasks in addition to
            * those that meet any optional filters.
            * Both startTimeMillis and endTimeMillis params are required if one is used.
            *
            * @param {number} startTimeMillis (Optional)
            * @param {number} endTimeMillis (Optional)
            * @return {Promise<Array<BackupRestoreTask>>} listing of advanced backup restore task details
            */
        listBackupRestoreTasks(startTimeMillis?: number, endTimeMillis?: number): Promise<Array<BackupRestoreTask>>;
        /**
            * Gets detailed recovery task information for a specific advanced backup
            * restore task.
            *
            * @param {string} taskUid the restore task details to retrieve
            * @return {Promise<BackupRestoreTaskDetail>} advanced backup restore task details
            */
        getBackupRestoreTask(taskUid: string): Promise<BackupRestoreTaskDetail>;
        /**
            * Gets the list of storage metrics that are available for the vDC.
            *
            * @return {Promise<Array<VdcBackupStorageMetric>>} the list of storage metrics names
            */
        getBackupStorageMetrics(): Promise<Array<VdcBackupStorageMetric>>;
        /**
            * Gets a series of vDC backup storage samples for a specified storage metric.
            *
            * @param metric  the storage metric name
            * @param {number} startTimeMillis start of the series (Optional)
            * @param {number} endTimeMillis end of the series (Optional)
            * @return the sample series
            */
        getBackupStorageSamples(metric: VdcBackupStorageMetric, startTimeMillis?: number, endTimeMillis?: number): Promise<VdcBackupStorageSampleSeries>;
        /**
            * Lists bills for IaaS backup in the specified time range.
            * Both start and end time query params default to the current month.
            *
            * @param {string} start Specifies the start of the range as a year-month in the
            * ISO-8601 calendar system, such as 2007-12. (Optional)
            * @param {string} end Specifies the end of the range as a year-month in the
            * ISO-8601 calendar system, such as 2007-12. (Optional)
            * @return {Promise<Array<IaasBackupBill>>} the list of bills
            */
        listIaasBackupBills(start?: string, end?: string): Promise<Array<IaasBackupBill>>;
        /**
            * Lists IaaS backup subscriptions that were active in the specified time range.
            *
            * @param {number} startTimeMillis the start time in epoch millis
            * @param {number} endTimeMillis the end time in epoch millis
            * @return {Promise<Array<IaasBackupSubscription>>} list of subscriptions
            */
        listIaasBackupSubscriptions(startTimeMillis: number, endTimeMillis: number): Promise<Array<IaasBackupSubscription>>;
        /**
            * Get zerto continuity performance samples series
            */
        getZertoPerfSamples(request: PerfSamplesRequest): Promise<PerfSamplesSeries>;
}

export class VmAffinityRuleCreateRequest {
        constructor(vmAffinityRuleCreateRequest: VmAffinityRuleCreateRequest);
        constructor(vmAffinityRuleCreateRequestJson: VmAffinityRuleCreateRequestJson);
        constructor(name: string, isEnabled: boolean, type: AffinityRuleType, vmUuids: Array<string>, isMandatory: boolean);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get is enabled.
            * @returns {boolean}
            */
        get isEnabled(): boolean;
        /**
            * Get type.
            * @returns {AffinityRuleType}
            */
        get type(): AffinityRuleType;
        /**
            * Get vm uuids.
            * @returns {Array<string>}
            */
        get vmUuids(): Array<string>;
        /**
            * Get is mandatory.
            * @returns {boolean}
            */
        get isMandatory(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {VmAffinityRuleCreateRequestJson}
            */
        get json(): VmAffinityRuleCreateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VmAffinityRuleUpdateRequest {
        constructor(vmAffinityRuleUpdateRequest: VmAffinityRuleUpdateRequest);
        constructor(vmAffinityRuleUpdateRequestJson: VmAffinityRuleUpdateRequestJson);
        constructor(uuid: string, name: string, isEnabled: boolean, type: string, vmUuids: Array<string>, isMandatory: boolean);
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get is enabled.
            * @returns {boolean}
            */
        get isEnabled(): boolean;
        /**
            * Get type.
            * @returns {string}
            */
        get type(): string;
        /**
            * Get vm uuids.
            * @returns {Array<string>}
            */
        get vmUuids(): Array<string>;
        /**
            * Get is mandatory.
            * @returns {boolean}
            */
        get isMandatory(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {VmAffinityRuleUpdateRequestJson}
            */
        get json(): VmAffinityRuleUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * VM  Affinity Rule.
    */
export class VmAffinityRule {
        constructor(_json: VmAffinityRuleJson);
        /**
            * Get vm uuids.
            * @returns {Array<string>}
            */
        get vmUuids(): Array<string>;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get type.
            * @returns {AffinityRuleType}
            */
        get type(): AffinityRuleType;
        /**
            * Get isMandatory.
            * @returns {boolean}
            */
        get isMandatory(): boolean;
        /**
            * Get Vm list
            * @returns {Promise<Array<Vm>>}
            */
        getVms(): Promise<Array<Vm>>;
        /**
            * Get the json representation of this class.
            * @returns {VmAffinityRuleJson}
            */
        get json(): VmAffinityRuleJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * VM Resource Summary Map.
    */
export class VmResourceSummaryMap {
        constructor(_json: VmResourceSummaryMapJson);
        /**
            * Get summaries.
            * @returns {{ [key: string]: VmResourceSummary }}
            */
        get summaries(): {
                [key: string]: VmResourceSummary;
        };
        /**
            * Get the json representation of this class.
            * @returns {VmResourceSummaryMapJson}
            */
        get json(): VmResourceSummaryMapJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export interface VdiAutomationDeploymentJson {
    uuid: string;
    org_uuid: string;
    automation_group_uuid: string;
    state: VdiDeploymentState;
    deployment_user: DeploymentUserJson;
    configuration: AutomationGroupConfigJson;
    deployment_details: DeploymentDetailsJson;
    failure_message: string | undefined;
}
export interface DeploymentDetailsJson {
    internal_ip: string;
    public_rdp_port: string;
    vm_uuid: string;
    vapp_uuid: string;
    guest_admin_password: string;
    computer_name: string;
}
export interface DeploymentUserJson {
    user_uuid: string;
    user_email: string;
    user_full_name: string;
}
export interface AutomationGroupConfigJson {
    vm_template_uuid: string;
    deployment_vdc_uuid: string;
    org_vdc_network_uuid: string;
    domain_to_join: string;
    edge_uuid: string;
    public_rdp_ip: string;
    network_connection_type: NetworkConnectionType;
    join_domain_enabled: boolean;
    guest_password_reset_required: boolean;
}

export interface VdiAutomationDeploymentRequestJson {
    domain_user_name?: string;
    domain_user_password?: string;
}

export interface VdiAutomationGroupDeploymentSummaryJson {
    automation_group_uuid: string;
    automation_group_name: string;
    number_of_pending_deploys: number;
    number_of_ready_deployments: number;
    number_of_pending_undeploys: number;
    number_of_failed_deploys: number;
}

export interface VdiAutomationGroupJson {
    uuid: string;
    name: string;
    description: string;
    edge_uuid: string;
    public_ip: string;
    vapp_template_uuid: string;
    vm_template_uuid: string;
    deployment_vdc_uuid: string;
    org_vdc_network_uuid: string;
    domain_to_join: string;
    team_uuid: string;
    network_connection_type: NetworkConnectionType;
    join_domain_enabled: boolean;
    guest_password_reset_required: boolean;
    storage_profile_uuid?: string;
}

export interface VdiAutomationGroupUpdateRequestJson {
    name: string;
    description: string;
    vapp_template_uuid: string;
    vm_template_uuid: string;
    deployment_vdc_uuid: string;
    org_vdc_network_uuid: string;
    domain_to_join: string;
    team_uuid: string;
    edge_uuid: string;
    public_ip: string;
    network_connection_type: NetworkConnectionType;
    join_domain_enabled: boolean;
    guest_password_reset_required: boolean;
    storage_profile_uuid?: string;
}

export interface VdiOrgDeploymentSummaryJson {
    number_of_pending_deploys_in_org: number;
    number_of_ready_deployments_in_org: number;
    number_of_pending_undeploys_in_org: number;
    number_of_failed_deploys_in_org: number;
    data: Array<VdiAutomationGroupDeploymentSummaryJson>;
}

export interface VdiTeamJson {
    uuid: string;
    name: string;
    members: Array<string>;
}

export interface VdiTeamUpdateRequestJson {
    name: string;
    members: Array<string>;
}

export interface VdiUserJson {
    uuid: string;
    name: string;
    email: string;
}

export interface VdiUserUpdateRequestJson {
    email: string;
    name: string;
}

export type NetworkConnectionType = 'DHCP' | 'STATIC_IP_POOL';

/**
    * VDI Automation Deployment Request.
    */
export class VdiAutomationDeploymentRequest {
        constructor(vdiAutomationDeploymentRequest: VdiAutomationDeploymentRequest);
        constructor(vdiAutomationDeploymentRequestJson: VdiAutomationDeploymentRequestJson);
        constructor(domainUserName: string, domainUserPassword: string);
        /**
            * Get domain user name.
            * @returns {string}
            */
        get domainUserName(): string | undefined;
        /**
            * Get domain user password.
            * @returns {string}
            */
        get domainUserPassword(): string | undefined;
        /**
            * Get the json representation of this class.
            * @returns {VdiAutomationDeploymentRequestJson}
            */
        get json(): VdiAutomationDeploymentRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * VDI Automation Deployment.
    */
export class VdiAutomationDeployment {
        constructor(_json: VdiAutomationDeploymentJson);
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get org uuid.
            * @returns {string}
            */
        get orgUuid(): string;
        /**
            * Get automation group uuid.
            * @returns {string}
            */
        get automationGroupUuid(): string;
        /**
            * Get state.
            * @returns {VdiDeploymentState}
            */
        get state(): VdiDeploymentState;
        /**
            * Get deployment user.
            * @returns {DeploymentUser}
            */
        get deploymentUser(): DeploymentUser;
        /**
            * Get configuration.
            * @returns {AutomationGroupConfig}
            */
        get configuration(): AutomationGroupConfig;
        /**
            * Get deployment details.
            * @returns {DeploymentDetails}
            */
        get deploymentDetails(): DeploymentDetails;
        /**
            * Gets the failure message field.
            * @returns {string | undefined}
            */
        get failureMessage(): string | undefined;
        /**
            * Get the json representation of this class.
            * @returns {VdiAutomationDeploymentJson}
            */
        get json(): VdiAutomationDeploymentJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}
/**
    * Deployment Details.
    */
export class DeploymentDetails {
        constructor(_json: DeploymentDetailsJson);
        /**
            * Get internal ip.
            * @returns {string}
            */
        get internalIp(): string;
        /**
            * Get public rdp port.
            * @returns {string}
            */
        get publicRdpPort(): string;
        /**
            * Get vm uuid.
            * @returns {string}
            */
        get vmUuid(): string;
        /**
            * Get vapp uuid.
            * @returns {string}
            */
        get vappUuid(): string;
        /**
            * Get guest admin password.
            * @returns {string}
            */
        get guestAdminPassword(): string;
        /**
            * Get computer name.
            * @returns {string}
            */
        get computerName(): string;
        /**
            * Get the json representation of this class.
            * @returns {DeploymentDetailsJson}
            */
        get json(): DeploymentDetailsJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}
/**
    * Deployment User.
    */
export class DeploymentUser {
        constructor(_json: DeploymentUserJson);
        /**
            * Get user uuid.
            * @returns {string}
            */
        get userUuid(): string;
        /**
            * Get user email.
            * @returns {string}
            */
        get userEmail(): string;
        /**
            * Get user full name.
            * @returns {string}
            */
        get userFullName(): string;
        /**
            * Get the json representation of this class.
            * @returns {DeploymentUser}
            */
        get json(): DeploymentUserJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}
/**
    * Deployment Automation Group Config.
    */
export class AutomationGroupConfig {
        constructor(_json: AutomationGroupConfigJson);
        /**
            * Get vm template uuid.
            * @returns {string}
            */
        get vmTemplateUuid(): string;
        /**
            * Get deployment vdc uuid.
            * @returns {string}
            */
        get deploymentVdcUuid(): string;
        /**
            * Get org vdc network uuid.
            * @returns {string}
            */
        get orgVdcNetworkUuid(): string;
        /**
            * Get domain to join.
            * @returns {string}
            */
        get domainToJoin(): string;
        /**
            * Get edge uuid.
            * @returns {string}
            */
        get edgeUuid(): string;
        /**
            * Get public rdp ip.
            * @returns {string}
            */
        get publicRdpIp(): string;
        /**
            * Get network connection type.
            * @returns {NetworkConnectionType}
            */
        get networkConnectionType(): NetworkConnectionType;
        /**
            * Get join domain enabled.
            * @returns {boolean}
            */
        get joinDomainEnabled(): boolean;
        /**
            * Get guest password reset required.
            * @returns {boolean}
            */
        get guestPasswordResetRequired(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {AutomationGroupConfigJson}
            */
        get json(): AutomationGroupConfigJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * VDI Automation Group Deployment Summary.
    */
export class VdiAutomationGroupDeploymentSummary {
        constructor(_json: VdiAutomationGroupDeploymentSummaryJson);
        /**
            * Get automation group uuid.
            * @returns {string}
            */
        get automationGroupUuid(): string;
        /**
            * Get automation group name.
            * @returns {string}
            */
        get automationGroupName(): string;
        /**
            * Get number of pending deploys.
            * @returns {number}
            */
        get numberOfPendingDeploys(): number;
        /**
            * Get number of ready deployments.
            * @returns {number}
            */
        get numberOfReadyDeployments(): number;
        /**
            * Get number of pending undeploys.
            * @returns {number}
            */
        get numberOfPendingUndeploys(): number;
        /**
            * Get number of failed deploys.
            * @returns {number}
            */
        get numberOfFailedDeploys(): number;
        /**
            * Get the json representation of this class.
            * @returns {VdiAutomationGroupDeploymentSummaryJson}
            */
        get json(): VdiAutomationGroupDeploymentSummaryJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * VDI Automation Group Update Request.
    */
export class VdiAutomationGroupUpdateRequest {
        constructor(vdiAutomationGroupUpdateRequest: VdiAutomationGroupUpdateRequest);
        constructor(vdiAutomationGroupUpdateRequestJson: VdiAutomationGroupUpdateRequestJson);
        constructor(name: string, description: string, vappTemplateUuid: string, vmTemplateUuid: string, deploymentVdcUuid: string, orgVdcNetworkUuid: string, domainToJoin: string, teamUuid: string, edgeUuid: string, publicIp: string, networkConnectionType: NetworkConnectionType, joinDomainEnabled: boolean, guestPasswordResetRequired: boolean, storageProfileUuuid?: string);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get vapp template uuid.
            * @returns {string}
            */
        get vappTemplateUuid(): string;
        /**
            * Get vm template uuid.
            * @returns {string}
            */
        get vmTemplateUuid(): string;
        /**
            * Get deployment vdc uuid.
            * @returns {string}
            */
        get deploymentVdcUuid(): string;
        /**
            * Get org vdc network uuid.
            * @returns {string}
            */
        get orgVdcNetworkUuid(): string;
        /**
            * Get domain to join.
            * @returns {string}
            */
        get domainToJoin(): string;
        /**
            * Get team uuid.
            * @returns {string}
            */
        get teamUuid(): string;
        /**
            * Get edge uuid.
            * @returns {string}
            */
        get edgeUuid(): string;
        /**
            * Get public ip.
            * @returns {string}
            */
        get publicIp(): string;
        /**
            * Get network connection type.
            * @returns {NetworkConnectionType}
            */
        get networkConnectionType(): NetworkConnectionType;
        /**
            * Get join domain enabled.
            * @returns {boolean}
            */
        get joinDomainEnabled(): boolean;
        /**
            * Get guest password reset required.
            * @returns {boolean}
            */
        get guestPasswordResetRequired(): boolean;
        /**
            * Get storage profile uuid.
            * @returns {string}
            */
        get storageProfileUuid(): string | undefined;
        /**
            * Get the json representation of this class.
            * @returns {VdiAutomationGroupUpdateRequestJson}
            */
        get json(): VdiAutomationGroupUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * VDI Automation Group.
    */
export class VdiAutomationGroup {
        constructor(_json: VdiAutomationGroupJson);
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get edge uuid.
            * @returns {string}
            */
        get edgeUuid(): string;
        /**
            * Get public ip.
            * @returns {string}
            */
        get publicIp(): string;
        /**
            * Get vapp template uuid.
            * @returns {string}
            */
        get vappTemplateUuid(): string;
        /**
            * Get vm template uuid.
            * @returns {string}
            */
        get vmTemplateUuid(): string;
        /**
            * Get deployment vdc uuid.
            * @returns {string}
            */
        get deploymentVdcUuid(): string;
        /**
            * Get org vdc network uuid.
            * @returns {string}
            */
        get orgVdcNetworkUuid(): string;
        /**
            * Get domain to join.
            * @returns {string}
            */
        get domainToJoin(): string;
        /**
            * Get team uuid.
            * @returns {string}
            */
        get teamUuid(): string;
        /**
            * Get network connection type.
            * @returns {NetworkConnectionType}
            */
        get networkConnectionType(): NetworkConnectionType;
        /**
            * Get join domain enabled.
            * @returns {boolean}
            */
        get joinDomainEnabled(): boolean;
        /**
            * Get guest password reset required.
            * @returns {boolean}
            */
        get guestPasswordResetRequired(): boolean;
        /**
            * Get the storage profile uuid.
            * @returns {string}
            */
        get storageProfileUuid(): string | undefined;
        /**
            * Get the json representation of this class.
            * @returns {VdiAutomationGroupJson}
            */
        get json(): VdiAutomationGroupJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export type VdiDeploymentState = 'QUEUED_FOR_DEPLOYMENT' | 'DEPLOYING' | 'BOOTING' | 'CONFIGURING_RDP_ACCESS' | 'SENDING_USER_ACCESS_NOTIFICATION' | 'READY' | 'QUEUED_FOR_UNDEPLOYMENT' | 'SENDING_USER_UNDEPLOY_NOTIFICATION' | 'REMOVING_RDP_ACCESS' | 'POWERING_DOWN' | 'UNDEPLOYING' | 'FAILED';

/**
    * VDI Org Deployment Summary.
    */
export class VdiOrgDeploymentSummary {
        constructor(_json: VdiOrgDeploymentSummaryJson);
        /**
            * Get number of pending deploys in org.
            * @returns {number}
            */
        get numberOfPendingDeploysInOrg(): number;
        /**
            * Get number of ready deployments in org.
            * @returns {number}
            */
        get numberOfReadyDeploymentsInOrg(): number;
        /**
            * Get number of pending undeploys in org.
            * @returns {number}
            */
        get numberOfPendingUndeploysInOrg(): number;
        /**
            * Get number of failed deploys in org.
            * @returns {number}
            */
        get numberOfFailedDeploysInOrg(): number;
        /**
            * Get data.
            * @returns {Array<VdiAutomationGroupDeploymentSummaryJson>}
            */
        get data(): Array<VdiAutomationGroupDeploymentSummary>;
        /**
            * Get the json representation of this class.
            * @returns {VdiOrgDeploymentSummaryJson}
            */
        get json(): VdiOrgDeploymentSummaryJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * VDI Team Create/Update Request.
    */
export class VdiTeamUpdateRequest {
        constructor(vdiTeamUpdateRequest: VdiTeamUpdateRequest);
        constructor(vdiTeamUpdateRequestJson: VdiTeamUpdateRequestJson);
        constructor(name: string, members: Array<string>);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get members.
            * @returns {Array<string>}
            */
        get members(): Array<string>;
        /**
            * Get the json representation of this class.
            * @returns {VdiTeamUpdateRequestJson}
            */
        get json(): VdiTeamUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * VDI Team.
    */
export class VdiTeam {
        constructor(_json: VdiTeamJson);
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get members.
            * @returns {Array<string>}
            */
        get members(): Array<string>;
        /**
            * Get the json representation of this class.
            * @returns {VdiTeamJson}
            */
        get json(): VdiTeamJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * VDI User Create/Update Request.
    */
export class VdiUserUpdateRequest {
        constructor(vdiUserUpdateRequest: VdiUserUpdateRequest);
        constructor(vdiUserUpdateRequestJson: VdiUserUpdateRequestJson);
        constructor(email: string, name: string);
        /**
            * Get email.
            * @returns {string}
            */
        get email(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get the json representation of this class.
            * @returns {VdiUserUpdateRequestJson}
            */
        get json(): VdiUserUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * VDI User.
    */
export class VdiUser {
        constructor(_json: VdiUserJson);
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get email.
            * @returns {string}
            */
        get email(): string;
        /**
            * Get the json representation of this class.
            * @returns {VdiUserJson}
            */
        get json(): VdiUserJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
  * Enumeration of possible VM operating system identifiers.
  */
export type OperatingSystem = 'asianux3_64Guest' | 'asianux3Guest' | 'asianux4_64Guest' | 'asianux4Guest' | 'asianux5_64Guest' | 'centos64Guest' | 'centosGuest' | 'coreos64Guest' | 'darwin10_64Guest' | 'darwin10Guest' | 'darwin11_64Guest' | 'darwin11Guest' | 'darwin12_64Guest' | 'darwin13_64Guest' | 'darwin14_64Guest' | 'darwin64Guest' | 'darwinGuest' | 'debian4_64Guest' | 'debian4Guest' | 'debian5_64Guest' | 'debian5Guest' | 'debian6_64Guest' | 'debian6Guest' | 'debian7_64Guest' | 'debian7Guest' | 'debian8_64Guest' | 'debian8Guest' | 'dosGuest' | 'eComStation2Guest' | 'eComStationGuest' | 'fedora64Guest' | 'fedoraGuest' | 'freebsd64Guest' | 'freebsdGuest' | 'genericLinuxGuest' | 'mandrakeGuest' | 'mandriva64Guest' | 'mandrivaGuest' | 'netware4Guest' | 'netware5Guest' | 'netware6Guest' | 'nld9Guest' | 'oesGuest' | 'openServer5Guest' | 'openServer6Guest' | 'opensuse64Guest' | 'opensuseGuest' | 'oracleLinux64Guest' | 'oracleLinuxGuest' | 'os2Guest' | 'other24xLinux64Guest' | 'other24xLinuxGuest' | 'other26xLinux64Guest' | 'other26xLinuxGuest' | 'other3xLinux64Guest' | 'other3xLinuxGuest' | 'otherGuest' | 'otherGuest64' | 'otherLinux64Guest' | 'otherLinuxGuest' | 'redhatGuest' | 'rhel2Guest' | 'rhel3_64Guest' | 'rhel3Guest' | 'rhel4_64Guest' | 'rhel4Guest' | 'rhel5_64Guest' | 'rhel5Guest' | 'rhel6_64Guest' | 'rhel6Guest' | 'rhel7_64Guest' | 'rhel7Guest' | 'sjdsGuest' | 'sles10_64Guest' | 'sles10Guest' | 'sles11_64Guest' | 'sles11Guest' | 'sles12_64Guest' | 'sles12Guest' | 'sles64Guest' | 'slesGuest' | 'solaris10_64Guest' | 'solaris10Guest' | 'solaris11_64Guest' | 'solaris6Guest' | 'solaris7Guest' | 'solaris8Guest' | 'solaris9Guest' | 'suse64Guest' | 'suseGuest' | 'turboLinux64Guest' | 'turboLinuxGuest' | 'ubuntu64Guest' | 'ubuntuGuest' | 'unixWare7Guest' | 'vmkernel5Guest' | 'vmkernel6Guest' | 'vmkernelGuest' | 'win2000AdvServGuest' | 'win2000ProGuest' | 'win2000ServGuest' | 'win31Guest' | 'win95Guest' | 'win98Guest' | 'windows7_64Guest' | 'windows7Guest' | 'windows7Server64Guest' | 'windows8_64Guest' | 'windows8Guest' | 'windows8Server64Guest' | 'windows9_64Guest' | 'windows9Guest' | 'windows9Server64Guest' | 'windowsHyperVGuest' | 'winLonghorn64Guest' | 'winLonghornGuest' | 'winMeGuest' | 'winNetBusinessGuest' | 'winNetDatacenter64Guest' | 'winNetDatacenterGuest' | 'winNetEnterprise64Guest' | 'winNetEnterpriseGuest' | 'winNetStandard64Guest' | 'winNetStandardGuest' | 'winNetWebGuest' | 'winNTGuest' | 'winVista64Guest' | 'winVistaGuest' | 'winXPHomeGuest' | 'winXPPro64Guest' | 'winXPProGuest';

/**
  * Enumeration of possible Tools upgrade policy from the API.
  */
export type ToolsUpgradePolicy = 'MANUAL' | 'UPGRADE_AT_POWER_CYCLE';

/**
  * Specification for an addVapp VM request.
  */
export interface VmCreateRequestJson {
    name: string;
    description: string;
    ip_address_mode: IpAddressingModeType;
    network_uuid: string;
    vapp_template_uuid: string;
    vm_template_uuid: string;
    ip_address: string;
    storage_profile_uuid: string;
}

/**
    * Interface for VM properties.
    */
export interface VmJson extends EntityJson {
        allocation_model: VdcAllocationModel;
        cores_per_socket: number;
        cpus_number: number;
        created_date: number | null;
        deployed: boolean;
        description: string;
        hardware_version: string;
        inserted_media_name: string;
        location_id: string;
        media_inserted: boolean;
        memory_size: number;
        org_uuid: string;
        os: OperatingSystem;
        status: VmStatus;
        storage_profiles: Array<string>;
        vapp_uuid: string;
        vcenter_href: string;
        vcenter_instance_uuid: string;
        vcenter_moref: string;
        vcenter_name: string;
        vcloud_href: string;
        vdc_uuid: string;
        vim_datastore_ref: string;
        vm_local_id: string;
        nested_hypervisor_enabled: boolean;
        is_protected: boolean;
}
/**
    * Specification for VM snapshot creation request.
    */
export interface VmCreateSnapshotRequestJson {
        memory: boolean;
        quiesce: boolean;
        name: string;
        description: string;
}
/**
    * Specification for VM description update request.
    */
export interface VmUpdateDescriptionRequestJson {
        description: string;
}
/**
    * Specification for VM name update request.
    */
export interface VmUpdateNameRequestJson {
        name: string;
}
/**
    * Specification for VM backup restore request.
    */
export interface VmRestoreBackupRequestJson {
        time: number;
}
/**
    * Specification for VM media insertion request.
    */
export interface VmInsertMediaRequestJson {
        media: string;
}
/**
    * Specification for VM storage profile relocation request.
    */
export interface VmRelocationRequestJson {
        storage_profile: string;
}
/**
    * Specification for a VM disk request.
    */
export interface VmDiskRequestJson {
        name: string;
        disk_type: DiskType;
        size: number;
}
/**
    * Specification for a VM vnic request.
    */
export interface VmVnicRequestJson {
        primary_vnic: boolean;
        ip_address: string;
        ip_assignment: IpAddressingModeType;
        network_uuid: string;
        network_adapter_type: AdapterType;
}
/**
    * Specification for a Build VM request.
    */
export interface BuildVmRequestJson {
        name: string;
        description: string;
        vm_template_uuid: string | null;
        vapp_template_uuid: string | null;
        disks: Array<VmDiskRequestJson> | null;
        ram: number | null;
        number_of_cpus: number | null;
        cpu_cores_per_socket: number | null;
        hardware_version: number | null;
        operating_system_version: string | null;
        boot_delay: number | null;
        expose_cpu_virtualization: boolean;
        media_uuid: string | null;
        computer_name: string;
        storage_profile_uuid: string;
        vnics: Array<VmVnicRequestJson>;
}
/**
    * Specification for VM backup restore into vApp request.
    */
export interface VmRestoreBackupIntoVAppRequestJson {
        time: number;
        vapp_uuid: string;
}
/**
    * VM cpu count update request JSON
    */
export interface VmCpuCountUpdateRequestJson {
        cpus_number: number;
        cores_per_socket?: number;
}
/**
    * VM memory size update request JSON
    */
export interface VmMemorySizeUpdateRequestJson {
        memory_size: number;
}
/**
    * VM virtual disk request JSON
    */
export interface VirtualDiskRequestJson {
        name?: string;
        size: number;
        type?: DiskType;
        storage_profile_uuid?: string;
}
/**
    * VM reconfigure request JSON
    */
export interface VmReconfigureRequestJson {
        name?: string;
        description?: string;
        cpu_spec?: VmCpuCountUpdateRequestJson;
        memory_spec?: VmMemorySizeUpdateRequestJson;
        disk_spec?: Array<VirtualDiskRequestJson>;
        guest_customization_section?: GuestCustomizationUpdateRequestJson;
        nested_hypervisor_enabled?: boolean;
}
/**
    * Vm Copy Move Vm Vnic Request JSON
    */
export interface VmCopyMoveVmVnicRequestJson {
        index: number;
        network_name: string;
        is_primary: boolean;
        ip_address: string;
        ip_addressing_mode: IpAddressingModeType;
}
/**
    * Vm Copy Move Request JSON
    */
export interface VmCopyMoveRequestJson {
        vapp_uuid: string;
        name?: string;
        storage_profile?: string;
        vnics?: Array<VmCopyMoveVmVnicRequestJson>;
}

/**
  * Enumeration of the available power operations for a VM.
  */
export type VmPowerOperation = 'poweron' | 'poweroff' | 'suspend' | 'shutdown' | 'reset' | 'reboot';

export interface VmResourceSummaryJson {
    reserved_cpu: number;
    reserved_mem: number;
    consumed_cpu: number;
    consumed_mem: number;
    consumed_disk: number;
    provisioned_disk: number;
    configured_disk: number;
}

/**
  * Enumeration of possible VM statuses from the API.
  */
export type VmStatus = 'FAILED_CREATION' | 'INCONSISTENT_STATE' | 'POWERED_OFF' | 'POWERED_ON' | 'SUSPENDED' | 'UNKNOWN' | 'UNRECOGNIZED' | 'UNRESOLVED' | 'WAITING_FOR_INPUT' | 'MIXED';

/**
    * Backup restore point JSON representation.
    */
export interface BackupRestorePointJson {
        name: string;
        time: number;
        type: BackupRestorePointType;
        job_name: string;
}
/**
    * Enumeration of possible Backup Restore Point types
    */
export type BackupRestorePointType = 'LOCAL' | 'COPY';

/**
    * VM Backup Restore Point.
    */
export class BackupRestorePoint {
        constructor(_json: BackupRestorePointJson);
        /**
            * Gets the name of the restore point.
            * @returns {string} the name
            */
        get name(): string;
        /**
            * Gets the timestamp of the backup restore point.
            * @returns {Date} date of the restore point
            */
        get timestamp(): Date;
        /**
            * Gets the Type for the restore point.
            * @returns {BackupRestorePointType}
            */
        get type(): BackupRestorePointType;
        /**
            * Gets the Job Name for the restore point.
            * @returns {string}
            */
        get jobName(): string;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {BackupRestorePointJson} the JSON representation
            */
        get json(): BackupRestorePointJson;
}

/**
  * VM Boot options JSON
  */
export interface BootOptionsJson {
    boot_delay: number;
    is_enter_bios: boolean;
}

/**
    * VM Boot Options
    */
export class BootOptions {
        constructor(options: BootOptions);
        constructor(optionsJson: BootOptionsJson);
        constructor(bootDelay: number, isEnterBios: boolean);
        /**
            * Returns boot delay
            * @returns {number}
            */
        get bootDelay(): number;
        /**
            * Returns true if "is enter bios" option is set to true
            * @returns {boolean}
            */
        get isEnterBios(): boolean;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {BootOptionsJson} the JSON representation
            */
        get json(): BootOptionsJson;
}

/**
  * VM capabilities JSON
  */
export interface CapabilitiesJson {
    cpu_hot_add_enabled: boolean;
    memory_hot_add_enabled: boolean;
}

/**
  * VM capabilities update request JSON
  */
export interface VmCapabilityUpdateRequestJson {
    cpu_hot_add_enabled: boolean;
    memory_hot_add_enabled: boolean;
}

/**
    * VM Capabilities update request.
    */
export class VmCapabilityUpdateRequest {
        constructor(_json: VmCapabilityUpdateRequestJson);
        /**
            * Get cpu hot add enabled.
            * @returns {boolean}
            */
        get cpuHotAddEnabled(): boolean;
        /**
            * Set cpu hot add enabled.
            * @param {boolean} enabled
            */
        set cpuHotAddEnabled(enabled: boolean);
        /**
            * Get memory hot add enabled.
            * @returns {boolean}
            */
        get memoryHotAddEnabled(): boolean;
        /**
            * Set memory hot add enabled.
            * @param {boolean} enabled
            */
        set memoryHotAddEnabled(enabled: boolean);
        /**
            * Get the json representation of this class.
            * @returns {VmCapabilityUpdateRequestJson}
            */
        get json(): VmCapabilityUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * VM Capabilities
    */
export class Capabilities {
        protected _json: CapabilitiesJson;
        constructor(options: Capabilities);
        constructor(optionsJson: CapabilitiesJson);
        constructor(cpuHotAddEnabled: boolean, memoryHotAddEnabled: boolean);
        /**
            * Returns true if CPU hot add is enabled
            * @returns {boolean}
            */
        get cpuHotAddEnabled(): boolean;
        /**
            * Returns true if Memory hot add is enabled
            * @returns {boolean}
            */
        get memoryHotAddEnabled(): boolean;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {BootOptionsJson} the JSON representation
            */
        get json(): CapabilitiesJson;
}

/**
  * VM Guest customization JSON
  */
export interface GuestCustomizationJson {
    enabled: boolean;
    change_sid: boolean;
    virtual_machine_id: string;
    join_domain: boolean;
    use_org_settings: boolean;
    domain_name: string;
    domain_user_name: string;
    domain_user_password: string;
    machine_object_ou: string;
    admin_password_enabled: boolean;
    admin_password_auto: boolean;
    admin_password: string;
    admin_auto_logon_enabled: boolean;
    admin_auto_logon_count: number;
    reset_password_required: boolean;
    computer_name: string;
    required: boolean;
}

/**
  * VM Guest customization update request JSON
  */
export interface GuestCustomizationUpdateRequestJson {
    enabled: boolean;
    change_sid: boolean;
    virtual_machine_id: string;
    join_domain: boolean;
    use_org_settings: boolean;
    domain_name: string;
    domain_user_name: string;
    domain_user_password: string;
    machine_object_ou: string;
    admin_password_enabled: boolean;
    admin_password_auto: boolean;
    admin_password: string;
    admin_auto_logon_enabled: boolean;
    admin_auto_logon_count: number;
    reset_password_required: boolean;
    computer_name: string;
    required: boolean;
}

export class GuestCustomizationUpdateRequest {
        constructor(_json: GuestCustomizationUpdateRequestJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Set enabled
            * @returns {boolean}
            */
        set enabled(enabled: boolean);
        /**
            * Get change sid.
            * @returns {boolean}
            */
        get changeSid(): boolean;
        /**
            * Set change sid.
            * @param {boolean} chgangeSid
            */
        set changeSid(chgangeSid: boolean);
        /**
            * Get virtual machine id.
            * @returns {string}
            */
        get virtualMachineId(): string;
        /**
            * Set virtual machine id.
            * @param {string} vmId
            */
        set virtualMachineId(vmId: string);
        /**
            * Get join domain.
            * @returns {boolean}
            */
        get joinDomain(): boolean;
        /**
            * Set join domain.
            * @param {boolean} joinDomain
            */
        set joinDomain(joinDomain: boolean);
        /**
            * Get use org settings.
            * @returns {boolean}
            */
        get useOrgSettings(): boolean;
        /**
            * Set use org settings.
            * @param {boolean} useOrgSettings
            */
        set useOrgSettings(useOrgSettings: boolean);
        /**
            * Get domain name.
            * @returns {string}
            */
        get domainName(): string;
        /**
            * Set domain name.
            * @param {string} name
            */
        set domainName(name: string);
        /**
            * Get domain user name.
            * @returns {string}
            */
        get domainUserName(): string;
        /**
            * Set domain user name.
            * @param {string} name
            */
        set domainUserName(name: string);
        /**
            * Get domain user password.
            * @returns {string}
            */
        get domainUserPassword(): string;
        /**
            * Set domain user password.
            * @param {string} pwd
            */
        set domainUserPassword(pwd: string);
        /**
            * Get machine object ou.
            * @returns {string}
            */
        get machineObjectOu(): string;
        /**
            * Set machine object ou.
            * @param {string} machineObjectOu
            */
        set machineObjectOu(machineObjectOu: string);
        /**
            * Get admin password enabled.
            * @returns {boolean}
            */
        get adminPasswordEnabled(): boolean;
        /**
            * Set admin password enabled.
            * @param {boolean} enabled
            */
        set adminPasswordEnabled(enabled: boolean);
        /**
            * Get admin password auto.
            * @returns {boolean}
            */
        get adminPasswordAuto(): boolean;
        /**
            * Set admin password auto.
            * @param {boolean} auto
            */
        set adminPasswordAuto(auto: boolean);
        /**
            * Get admin password.
            * @returns {string}
            */
        get adminPassword(): string;
        /**
            * Set admin password.
            * @param {string} pwd
            */
        set adminPassword(pwd: string);
        /**
            * Get admin auto logon enabled.
            * @returns {boolean}
            */
        get adminAutoLogonEnabled(): boolean;
        /**
            * Set admin auto logon enabled.
            * @param {boolean} enabled
            */
        set adminAutoLogonEnabled(enabled: boolean);
        /**
            * Get admin auto logon count.
            * @returns {number}
            */
        get adminAutoLogonCount(): number;
        /**
            * Set admin auto logon count.
            * @param {number} count
            */
        set adminAutoLogonCount(count: number);
        /**
            * Get reset password required.
            * @returns {boolean}
            */
        get resetPasswordRequired(): boolean;
        /**
            * Set reset password required.
            * @param {boolean} required
            */
        set resetPasswordRequired(required: boolean);
        /**
            * Get computer name.
            * @returns {string}
            */
        get computerName(): string;
        /**
            * Set computer name.
            * @param {string} name
            */
        set computerName(name: string);
        /**
            * Get required.
            * @returns {boolean}
            */
        get required(): boolean;
        /**
            * Set required.
            * @param {boolean} required
            */
        set required(required: boolean);
        /**
            * Get the json representation of this class.
            * @returns {GuestCustomizationUpdateRequestJson}
            */
        get json(): GuestCustomizationUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * VM Guest Customization
    */
export class GuestCustomization {
        protected _json: GuestCustomizationJson;
        constructor(guestCustomization: GuestCustomization);
        constructor(guestCustomizationJson: GuestCustomizationJson);
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get change sid.
            * @returns {boolean}
            */
        get changeSid(): boolean;
        /**
            * Get virtual machine id.
            * @returns {string}
            */
        get virtualMachineId(): string;
        /**
            * Get join domain.
            * @returns {boolean}
            */
        get joinDomain(): boolean;
        /**
            * Get use org settings.
            * @returns {boolean}
            */
        get useOrgSettings(): boolean;
        /**
            * Get domain name.
            * @returns {string}
            */
        get domainName(): string;
        /**
            * Get domain user name.
            * @returns {string}
            */
        get domainUserName(): string;
        /**
            * Get domain user password.
            * @returns {string}
            */
        get domainUserPassword(): string;
        /**
            * Get machine object ou.
            * @returns {string}
            */
        get machineObjectOu(): string;
        /**
            * Get admin password enabled.
            * @returns {boolean}
            */
        get adminPasswordEnabled(): boolean;
        /**
            * Get admin password auto.
            * @returns {boolean}
            */
        get adminPasswordAuto(): boolean;
        /**
            * Get admin password.
            * @returns {string}
            */
        get adminPassword(): string;
        /**
            * Get admin auto logon enabled.
            * @returns {boolean}
            */
        get adminAutoLogonEnabled(): boolean;
        /**
            * Get admin auto logon count.
            * @returns {number}
            */
        get adminAutoLogonCount(): number;
        /**
            * Get reset password required.
            * @returns {boolean}
            */
        get resetPasswordRequired(): boolean;
        /**
            * Get computer name.
            * @returns {string}
            */
        get computerName(): string;
        /**
            * Get required.
            * @returns {boolean}
            */
        get required(): boolean;
        /**
            * Get the json representation of this class.
            * @returns {GuestCustomizationJson}
            */
        get json(): GuestCustomizationJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * VM Guest Tools JSON
    */
export interface GuestToolsJson {
        status: ToolsVersionStatus;
        running_status: ToolsRunningStatus;
        version: string;
}
/**
    * Guest Tools Version Status enum
    */
export enum ToolsVersionStatus {
        BLACKLISTED = "guestToolsBlacklisted",
        CURRENT = "guestToolsCurrent",
        NEED_UPGRADE = "guestToolsNeedUpgrade",
        NOT_INSTALLED = "guestToolsNotInstalled",
        SUPPORTED_NEW = "guestToolsSupportedNew",
        SUPPORTED_OLD = "guestToolsSupportedOld",
        TOO_NEW = "guestToolsTooNew",
        TOO_OLD = "guestToolsTooOld",
        UNMANAGED = "guestToolsUnmanaged"
}
/**
    * Guest Tools Running Status enum
    */
export enum ToolsRunningStatus {
        EXECUTING_SCRIPTS = "guestToolsExecutingScripts",
        NOT_RUNNING = "guestToolsNotRunning",
        RUNNING = "guestToolsRunning"
}

/**
    * VM Guest Tools
    */
export class GuestTools {
        constructor(guestTools: GuestTools);
        constructor(guestToolsJson: GuestToolsJson);
        /**
            * Returns guest tools status
            * @returns {ToolsVersionStatus}
            */
        get status(): ToolsVersionStatus;
        /**
            * Returns guest tools running status
            * @returns {ToolsRunningStatus}
            */
        get runningStatus(): ToolsRunningStatus;
        /**
            * Returns guest tools version
            * @returns {string}
            */
        get version(): string;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {BootOptionsJson} the JSON representation
            */
        get json(): GuestToolsJson;
}

/**
  * Interface for mks screen ticket JSON representation.
  */
export interface MksScreenTicketJson {
    vmx: string;
    ticket: string;
    host: string;
    port: string;
}

/**
  * Interface for screen ticket JSON representation.
  */
export interface ScreenTicketJson {
    vm_id: string;
    ticket: string;
    host: string;
    ssl_thumbprint: string;
}

/**
    * VM MKS Screen Ticket.
    */
export class MksScreenTicket {
        constructor(_json: MksScreenTicketJson);
        /**
            * Gets the VMX attribute.
            * @returns {string} vmx
            */
        get vmx(): string;
        /**
            * Gets the ticket.
            * @returns {string}
            */
        get ticket(): string;
        /**
            * Gets the host.
            * @returns {string}
            */
        get host(): string;
        /**
            * Gets the port.
            * @returns {string}
            */
        get port(): string;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {MksScreenTicketJson} the JSON representation
            */
        get json(): MksScreenTicketJson;
}

/**
    * VM Screen Ticket.
    */
export class ScreenTicket {
        constructor(_json: ScreenTicketJson);
        /**
            * Gets the VM ID attribute.
            * @returns {string} VM ID
            */
        get vmId(): string;
        /**
            * Gets the ticket.
            * @returns {string}
            */
        get ticket(): string;
        /**
            * Gets the host.
            * @returns {string}
            */
        get host(): string;
        /**
            * Gets the SSL thumbprint.
            * @returns {string}
            */
        get sslThumbprint(): string;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {ScreenTicketJson} the JSON representation
            */
        get json(): ScreenTicketJson;
}

/**
  * VM summary JSON
  */
export interface VmSummaryJson {
    reserved_cpu: number;
    reserved_mem: number;
    consumed_cpu: number;
    consumed_mem: number;
    consumed_disk: number;
    provisioned_disk: number;
    configured_disk: number;
}

/**
    * VM Summary
    */
export class VmSummary {
        constructor(options: VmSummary);
        constructor(optionsJson: VmSummaryJson);
        /**
            * Returns reserved CPU.
            * @returns {number}
            */
        get reservedCpu(): number;
        /**
            * Returns reserved memory.
            * @returns {number}
            */
        get reservedMemory(): number;
        /**
            * Returns consumed CPU.
            * @returns {number}
            */
        get consumedCpu(): number;
        /**
            * Returns consumed memory.
            * @returns {number}
            */
        get consumedMemory(): number;
        /**
            * Returns consumed disk.
            * @returns {number}
            */
        get consumedDisk(): number;
        /**
            * Returns provisioned disk.
            * @returns {number}
            */
        get provisionedDisk(): number;
        /**
            * Returns configured disk.
            * @returns {number}
            */
        get configuredDisk(): number;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {BootOptionsJson} the JSON representation
            */
        get json(): VmSummaryJson;
}

/**
  * Interface for virtual disk properties JSON representation.
  */
export interface VirtualDiskJson {
    name: string;
    size: number;
    type: DiskType;
}

/**
    * Virtual Disk.
    */
export class VirtualDisk {
        constructor(_apiDisk: VirtualDiskJson);
        /**
            * Gets the name of the virtual disk.
            * @returns {string} the name
            */
        get name(): string;
        /**
            * Gets the size of the virtual disk in MB.
            * @returns {number} size in MB
            */
        get size(): number;
        /**
            * Gets the Virtual Hard Disk type.
            * @returns {DiskType} the type
            */
        get type(): DiskType;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {VirtualDiskJson} the API virtual disk object
            */
        get json(): VirtualDiskJson;
}

export class VmCopyMoveRequest {
        constructor(vmCopyMoveRequest: VmCopyMoveRequest);
        constructor(vmCopyMoveRequestJson: VmCopyMoveRequestJson);
        constructor(vappUuid: string, name: string, storageProfile: string, vnics: Array<VmCopyMoveVmVnicRequestJson>);
        /**
            * Get vapp uuid.
            * @returns {string}
            */
        get vappUuid(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string | undefined;
        /**
            * Get storage profile.
            * @returns {string}
            */
        get storageProfile(): string | undefined;
        /**
            * Get vnics.
            * @returns {Array<VmCopyMoveVmVnicRequest>}
            */
        get vnics(): Array<VmCopyMoveVmVnicRequest> | undefined;
        /**
            * Get the json representation of this class.
            * @returns {VmCopyMoveRequestJson}
            */
        get json(): VmCopyMoveRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VmCopyMoveVmVnicRequest {
        constructor(vmCopyMoveVmVnicRequest: VmCopyMoveVmVnicRequest);
        constructor(vmCopyMoveVmVnicRequestJson: VmCopyMoveVmVnicRequestJson);
        constructor(index: number, networkName: string, isPrimary: boolean, ipAddress: string, ipAddressingMode: IpAddressingModeType);
        /**
            * Get index.
            * @returns {number}
            */
        get index(): number;
        /**
            * Get network name.
            * @returns {string}
            */
        get networkName(): string;
        /**
            * Get is primary.
            * @returns {boolean}
            */
        get isPrimary(): boolean;
        /**
            * Get ip address.
            * @returns {string}
            */
        get ipAddress(): string;
        /**
            * Get ip addressing mode.
            * @returns {IpAddressingModeType}
            */
        get ipAddressingMode(): IpAddressingModeType;
        /**
            * Get the json representation of this class.
            * @returns {VmCopyMoveVmVnicRequestJson}
            */
        get json(): VmCopyMoveVmVnicRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * VM Cpu Update Request.
    */
export class VmCpuCountUpdateRequest {
        constructor(_json: VmCpuCountUpdateRequestJson);
        /**
            * Get number of cpus.
            * @returns {number}
            */
        get numberOfCpus(): number;
        /**
            * Set number of cpus.
            * @param {number} count
            */
        set numberOfCpus(count: number);
        /**
            * Get cores per socket.
            * @returns {number}
            */
        get coresPerSocket(): number | undefined;
        /**
            * Set cores per socket.
            * @param {number} count
            */
        set coresPerSocket(count: number | undefined);
        /**
            * Get the json representation of this class.
            * @returns {VmCpuCountUpdateRequestJson}
            */
        get json(): VmCpuCountUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Vm create request.
    */
export class VmCreateRequest {
        constructor(vmCreateRequest: VmCreateRequest);
        constructor(vmCreateRequestJson: VmCreateRequestJson);
        constructor(name: string, description: string, ipAddressMode: IpAddressingModeType, networkUuid: string, vappTemplateUuid: string, vmTemplateUuid: string, ipAddress: string, storageProfileUuid: string);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get ip address mode.
            * @returns {IpAddressingMode}
            */
        get ipAddressMode(): IpAddressingModeType;
        /**
            * Get network uuid.
            * @returns {string}
            */
        get networkUuid(): string;
        /**
            * Get vapp template uuid.
            * @returns {string}
            */
        get vappTemplateUuid(): string;
        /**
            * Get vm template uuid.
            * @returns {string}
            */
        get vmTemplateUuid(): string;
        /**
            * Get ip address.
            * @returns {string}
            */
        get ipAddress(): string;
        /**
            * Get storage profile uuid.
            * @returns {string}
            */
        get storageProfileUuid(): string;
        /**
            * Get the json representation of this class.
            * @returns {VmCreateRequestJson}
            */
        get json(): VmCreateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VmMemorySizeUpdateRequest {
        constructor(vmMemorySizeUpdateRequest: VmMemorySizeUpdateRequest);
        constructor(vmMemorySizeUpdateRequestJson: VmMemorySizeUpdateRequestJson);
        constructor(memorySize: number);
        /**
            * Get memory size.
            * @returns {string}
            */
        get memorySize(): number;
        /**
            * Get the json representation of this class.
            * @returns {VmMemorySizeUpdateRequestJson}
            */
        get json(): VmMemorySizeUpdateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export interface VmNetworkJson {
    uuid: string;
    name: string;
    description: string;
    vapp_network: boolean;
    fence_mode: string;
    deleted: boolean;
    ip_ranges: Array<IpRangeJson>;
    gateway: string;
    netmask: string;
    dns1: string;
    dns2: string;
    dns_suffix: string;
    enabled: boolean;
    inherited: boolean;
    parent_network_name: string;
    parent_network_uuid: string;
    parent_entity_uuid: string;
    shared: boolean;
    edge_uuid: string;
    router_external_ip: string;
}

export class VmNetwork {
        constructor(_json: VmNetworkJson);
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string;
        /**
            * Get vapp network.
            * @returns {boolean}
            */
        get vappNetwork(): boolean;
        /**
            * Get fence mode.
            * @returns {string}
            */
        get fenceMode(): string;
        /**
            * Get deleted.
            * @returns {boolean}
            */
        get deleted(): boolean;
        /**
            * Get ip ranges.
            * @returns {Array<IpRange>}
            */
        get ipRanges(): Array<IpRange>;
        /**
            * Get gateway.
            * @returns {string}
            */
        get gateway(): string;
        /**
            * Get netmask.
            * @returns {string}
            */
        get netmask(): string;
        /**
            * Get dns1.
            * @returns {string}
            */
        get dns1(): string;
        /**
            * Get dns2.
            * @returns {string}
            */
        get dns2(): string;
        /**
            * Get dns suffix.
            * @returns {string}
            */
        get dnsSuffix(): string;
        /**
            * Get enabled.
            * @returns {boolean}
            */
        get enabled(): boolean;
        /**
            * Get inherited.
            * @returns {boolean}
            */
        get inherited(): boolean;
        /**
            * Get parent network name.
            * @returns {string}
            */
        get parentNetworkName(): string;
        /**
            * Get parent network uuid.
            * @returns {string}
            */
        get parentNetworkUuid(): string;
        /**
            * Get parent entity uuid.
            * @returns {string}
            */
        get parentEntityUuid(): string;
        /**
            * Get shared.
            * @returns {boolean}
            */
        get shared(): boolean;
        /**
            * Get edge uuid.
            * @returns {string}
            */
        get edgeUuid(): string;
        /**
            * Get router external ip.
            * @returns {string}
            */
        get routerExternalIp(): string;
        /**
            * Get the json representation of this class.
            * @returns {VmNetworkJson}
            */
        get json(): VmNetworkJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

export class VmReconfigureRequest {
        constructor(vmReconfigureRequest: VmReconfigureRequest);
        constructor(vmReconfigureRequestJson: VmReconfigureRequestJson);
        constructor(name: string, description: string, cpuSpec: VmCpuCountUpdateRequestJson, memorySpec: VmMemorySizeUpdateRequestJson, diskSpec: Array<VirtualDiskRequestJson>, guestCustomizationSection: GuestCustomizationUpdateRequestJson, nestedHypervisorEnabled: boolean);
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string | undefined;
        /**
            * Set name.
            * @param {string} name
            */
        set name(name: string | undefined);
        /**
            * Get description.
            * @returns {string}
            */
        get description(): string | undefined;
        /**
            * Set description.
            * @param {string} description
            */
        set description(description: string | undefined);
        /**
            * Get cpu spec.
            * @returns {VmCpuCountUpdateRequest}
            */
        get cpuSpec(): VmCpuCountUpdateRequest | undefined;
        /**
            * Set cpu spec.
            * @param {VmCpuCountUpdateRequest} cpuSpec
            */
        set cpuSpec(cpuSpec: VmCpuCountUpdateRequest | undefined);
        /**
            * Get memory spec.
            * @returns {VmMemorySizeUpdateRequest}
            */
        get memorySpec(): VmMemorySizeUpdateRequest | undefined;
        /**
            * Set memory spec.
            * @param {VmMemorySizeUpdateRequest} spec
            */
        set memorySpec(spec: VmMemorySizeUpdateRequest | undefined);
        /**
            * Get disk spec.
            * @returns {Array<VmDiskRequestJson>}
            */
        get diskSpec(): Array<VirtualDiskRequestJson> | undefined;
        /**
            * Set disk spec.
            * @param {Array<VmDiskRequestJson>} spec
            */
        set diskSpec(spec: Array<VirtualDiskRequestJson> | undefined);
        /**
            * Get guest customization section.
            * @returns {GuestCustomizationUpdateRequest}
            */
        get guestCustomizationSection(): GuestCustomizationUpdateRequest | undefined;
        /**
            * Set guest customization section.
            * @param {GuestCustomizationUpdateRequest} request
            */
        set guestCustomizationSection(request: GuestCustomizationUpdateRequest | undefined);
        /**
            * Get nested hypervisor enabled.
            * @returns {boolean}
            */
        get nestedHypervisorEnabled(): boolean | undefined;
        /**
            * Set nested hypervisor enabled.
            * @param {boolean} enabled
            */
        set nestedHypervisorEnabled(enabled: boolean | undefined);
        /**
            * Get the json representation of this class.
            * @returns {VmReconfigureRequestJson}
            */
        get json(): VmReconfigureRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * VM Resource Summary.
    */
export class VmResourceSummary {
        constructor(_json: VmResourceSummaryJson);
        /**
            * Get reserved cpu.
            * @returns {number}
            */
        get reservedCpu(): number;
        /**
            * Get reserved mem.
            * @returns {number}
            */
        get reservedMem(): number;
        /**
            * Get consumed cpu.
            * @returns {number}
            */
        get consumedCpu(): number;
        /**
            * Get consumed mem.
            * @returns {number}
            */
        get consumedMem(): number;
        /**
            * Get consumed disk.
            * @returns {number}
            */
        get consumedDisk(): number;
        /**
            * Get provisioned disk.
            * @returns {number}
            */
        get provisionedDisk(): number;
        /**
            * Get configured disk.
            * @returns {number}
            */
        get configuredDisk(): number;
        /**
            * Get the json representation of this class.
            * @returns {VmResourceSummaryJson}
            */
        get json(): VmResourceSummaryJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Virtual Machine.
    */
export class Vm extends Entity implements EntityWithPerfSamples {
        apiPrefix: string;
        getPerfCounters: () => Promise<Array<PerfCounter>>;
        getPerfSamples: (request: PerfSamplesRequest) => Promise<PerfSamplesSeries>;
        constructor(_apiVm: VmJson);
        /**
            * Gets a VM by UUID.
            * @param uuid VM UUID
            * @returns {Promise<Vm>} promise that resolves with the VM
            */
        static getVm(uuid: string): Promise<Vm>;
        get entityType(): EntityType;
        /**
            * Gets the VM's local ID.
            * @returns {string} the VM's local ID
            */
        get vmLocalId(): string;
        /**
            * Gets the VM's datastore reference.
            * @returns {string} datastore reference
            */
        get vimDatastoreRef(): string;
        /**
            * Gets the UUID of the vDC that the VM belongs to.
            * @returns {string} vDC UUID
            */
        get vdcUuid(): string;
        /**
            * Gets the HREF of the vCloud Director instance that this VM is associated with.
            * @returns {string} vCloud HREF
            */
        get vcloudHref(): string;
        /**
            * Gets the name of the vCenter server that the VM is associated with.
            * @returns {string} vCenter name
            */
        get vcenterName(): string;
        /**
            * Gets the VM'r vCenter reference.
            * @returns {string} vCenter reference
            */
        get vcenterMoRef(): string;
        /**
            * Gets the UUID of the vCenter instance that the VM is associated with.
            * @returns {string} vCenter UUID
            */
        get vcenterInstanceUuid(): string;
        /**
            * Gets the HREF of the vCenter instance that the VM is associated with.
            * @returns {string} vCenter HREF
            */
        get vcenterHref(): string;
        /**
            * Gets the UUID of the vApp that this VM belongs to.
            * @returns {string} vApp UUID
            */
        get vappUuid(): string;
        /**
            * Gets the list of storage profiles that are available to this VM.
            * @returns {Array<string>} list of storage profile UUIDs
            */
        get storageProfiles(): Array<string>;
        /**
            * Gets the power status of the VM.
            * @returns {VmPowerStatus} power status identifier
            */
        get powerStatus(): VmPowerStatus;
        /**
            * Gets the VM's operating system.
            * @returns {OperatingSystem} operating system
            */
        get operatingSystem(): OperatingSystem;
        /**
            * Gets the UUID of the Organization that the VM belongs to.
            * @returns {string} Org UUID
            */
        get orgUuid(): string;
        /**
            * Gets the datacenter location identifier for the VM.
            * @returns {string} datacenter location ID
            */
        get locationId(): string;
        /**
            * Gets the name of the media that is currently inserted in the VM.
            * @returns {string} the name of the inserted media or null if no media is currently inserted
            */
        get insertedMediaName(): string | null;
        /**
            * Indicates whether there is currently a media inserted in the VM.
            * @returns {boolean} value
            */
        get mediaInserted(): boolean;
        /**
            * Gets the VM's hardware version.
            * @returns {string} hardware version
            */
        get hardwareVersion(): string;
        /**
            * Gets the VM's description.
            * @returns {string} description
            */
        get description(): string;
        /**
            * Indicates whether the VM is deployed.
            * @returns {boolean} value
            */
        get deployed(): boolean;
        /**
            * Gets the date that the VM was created.
            * @returns {Date} creation date
            */
        get createdDate(): Date | null;
        /**
            * Gets the number of CPUs for the VM.
            * @returns {number} number of CPUs
            */
        get numberOfCpus(): number;
        /**
            * Gets the number of cores per CPU socket.
            * @returns {number} cores per CPU socket
            */
        get coresPerSocket(): number;
        /**
            * Gets the VM's configured memory in MB.
            * @returns {number} the VM's configured memory in MB.
            */
        get memorySize(): number;
        /**
            * Gets the VM's Vdc Allocation Model.
            * @returns {VdcAllocationModel} allocation model
            */
        get allocationModel(): VdcAllocationModel;
        /**
            * Gets the VM's nested hypervisor enabled property
            * @returns {boolean}
            */
        get isNestedHypervisorEnabled(): boolean;
        /**
            * Get the VM's protection status
            * @returns {boolean}
            */
        get isProtected(): boolean;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {VmJson} the API VM object
            */
        get json(): VmJson;
        /**
            * Deletes this VM.
            * @returns {Promise<Task>} task promise
            */
        delete(): Promise<Task>;
        /**
            * Create a new virtual disk for this VM.
            * @param {VirtualDiskJson} diskJson spec for the new disk
            * @returns {Promise<Task>} task promise
            */
        createVirtualDisk(diskJson: VirtualDiskJson): Promise<Task>;
        /**
            * Creates a new Vm in the vApp based on an existing Vm.
            * @param {VmCopyMoveRequest} copyMoveRequest Vm properties
            * @returns {Promise<Task>} task promise
            */
        copy(copyMoveRequest: VmCopyMoveRequest): Promise<Task>;
        /**
            * Creates a snapshot of the VM.
            * @param {SnapshotCreateRequest} request the snapshot creation request
            * @returns {Promise<Task>} task promise
            */
        createSnapshot(request: SnapshotCreateRequest): Promise<Task>;
        /**
            * Disable Nested Hypervisor
            * @returns {Promise<Task>}
            */
        disableNestedHypervisor(): Promise<Task>;
        /**
            * Ejects any media from the VM.
            * @returns {Promise<Task>} task promise
            */
        ejectMedia(): Promise<Task>;
        /**
            * Retrieve a CSV report email with all event history for a given Vm.
            * @returns {Promise<void>} there is no response object.
            */
        emailEventHistory(email: string): Promise<void>;
        /**
            * Enable Nested Hypervisor
            * @returns {Promise<Task>}
            */
        enableNestedHypervisor(): Promise<Task>;
        /**
            * Inserts a specified media into the VM.
            * @param {string} mediaUuid the UUID of the media to insert
            * @returns {Promise<Task>} task promise
            */
        insertMedia(mediaUuid: string): Promise<Task>;
        /**
            * Install VmWare Tools.
            * @returns {Promise<Task>} task promise
            */
        installVmWareTools(): Promise<Task>;
        /**
            * Moves an existing VM into the specified Vapp.
            * @param {VmCopyMoveRequest} spec Specification for newly moved vm
            * @returns {Promise<Task>} task Promise
            */
        moveVm(spec: VmCopyMoveRequest): Promise<Task>;
        /**
            * Powers off the VM.
            * @returns {Promise<Task>} task promise
            */
        powerOff(): Promise<Task>;
        /**
            * Powers on the VM.
            * @param {boolean} forceGuestCustomization whether to force guest customization
            * @returns {Promise<Task>} task promise
            */
        powerOn(forceGuestCustomization?: boolean): Promise<Task>;
        /**
            * Requests that the guest OS restart.
            * @returns {Promise<Task>} task promise
            */
        rebootGuestOs(): Promise<Task>;
        /**
            * Update the name and description of the VM as well as the guest customization section, the cpu, memory,
            * and disk specifications. Any sections left out of the VmReconfigureRequest will be left unchanged.
            * @param {VmReconfigureRequest} request
            * @returns {Promise<Task>}
            */
        reconfigure(request: VmReconfigureRequest): Promise<Task>;
        /**
            * Move the VM to a different storage profile.
            * @returns {Promise<Task>} task promise
            */
        relocate(storageProfileUuid: string): Promise<Task>;
        /**
            * Performs a hard reset power operation.
            * @returns {Promise<Task>} task promise
            */
        reset(): Promise<Task>;
        /**
            * Reset MAC Addresses
            * @returns {Promise<Task>}
            */
        resetMacAddresses(): Promise<Task>;
        /**
            * Restores a backup of the VM.
            * @param {Date} timestamp the timestamp of the restore point to be restored
            * @returns {Promise<Task>} task promise
            */
        restoreBackup(timestamp: Date): Promise<Task>;
        /**
            * Restore a backup of the VM into another vApp.
            * @param {Date} timestamp the timestamp of the restore point to be restored
            * @param {string} vappUuid the uuid of the vApp in which VM will be restored
            * @returns {Promise<Task>}
            */
        restoreBackupIntoVapp(timestamp: Date, vappUuid: string): Promise<Task>;
        /**
            * Restore the VMs snapshot.
            * @returns {Promise<Task>} task promise
            */
        restoreSnapshot(): Promise<Task>;
        /**
            * Shuts down the VMs guest operating system.
            * @returns {Promise<Task>} task promise
            */
        shutdownGuestOs(): Promise<Task>;
        /**
            * Suspends VM.
            * @returns {Promise<Task>} task promise
            */
        suspend(): Promise<Task>;
        /**
            * Update VM boot options
            * @returns {Promise<Task>}
            */
        updateBootOptions(bootDelay: number, enterBios: boolean): Promise<Task>;
        /**
            * Update VM capabilities
            * @param {CapabilitiesUpdateRequest} request VM capabilities update request
            * @returns {Promise<Task>}
            */
        updateCapabilities(request: VmCapabilityUpdateRequest): Promise<Task>;
        /**
            * Edit the number of CPUs.
            * @param request {VmCpuCountUpdateRequest} specifying new number of CPUs
            * @returns {Promise<Task>} task promise
            */
        updateCpuCount(request: VmCpuCountUpdateRequest): Promise<Task>;
        /**
            * Updates the VM's description.
            * @param description the new description
            * @returns {Promise<Task>} task promise
            */
        updateDescription(description: string): Promise<Task>;
        /**
            * Updates the VM's guest customization.
            * @param {GuestCustomizationUpdateRequest} request
            * @returns {Promise<Task>}
            */
        updateGuestCustomization(request: GuestCustomizationUpdateRequest): Promise<Task>;
        /**
            * Edit the memory size of the VM.
            * @param memorySizeMb {number} the new memory size in MB
            * @returns {Promise<Task>} task promise
            */
        updateMemorySize(memorySizeMb: number): Promise<Task>;
        /**
            * Updates the VM's name.
            * @param newName the new name
            * @returns {Promise<Task>} task promise
            */
        updateName(newName: string): Promise<Task>;
        /**
            * Updates the VM's tools upgrade policy.
            * @param {ToolsUpgradePolicy} policy The new policy
            * @returns {Promise<Task>} task promise
            */
        updateToolsUpgradePolicy(policy: ToolsUpgradePolicy): Promise<Task>;
        /**
            * Update a virtual disk that is attached to this VM.
            * @param {VirtualDiskJson} diskJson updated specification for the disk
            * @returns {Promise<Task>} task promise
            */
        updateVirtualDisk(diskJson: VirtualDiskJson): Promise<Task>;
        /**
            * Update the VM's virtual disks.
            * @param {Array<VirtualDiskJson>} disksJson array of specs for new disks
            * @returns {Promise<Task>} task promise
            */
        updateVirtualDisks(disksJson: Array<VirtualDiskJson>): Promise<Task>;
        /**
            * Update virtual network cards for a VM.
            * @param {Array<Vnic>} vnics
            * @returns {Promise<Task>}
            */
        updateVnics(vnics: Array<Vnic>): Promise<Task>;
        /**
            * Upgrade the VM's guest tools.
            * @returns {Promise<Task>} task promise
            */
        upgradeGuestTools(): Promise<Task>;
        /**
            * Gets the VMs available backup restore points.
            * @returns {Promise<BackupRestorePoint[]>} promise that resolves with the list of backup restore points
            */
        getBackupRestorePoints(): Promise<Array<BackupRestorePoint>>;
        /**
            * Gets the bill for the VM for the specified month and year. Month and year default to current month and year if left
            * unspecified.
            * @returns {Promise<Bill>} promise that resolves with the Bill
            */
        getBill(month?: number, year?: number): Promise<Bill>;
        /**
            * Gets the VMs boot options
            * @returns {Promise<BootOptions>} promise that resolves with the vm boot options
            */
        getBootOptions(): Promise<BootOptions>;
        /**
            * Gets the VM capabilities
            * @returns {Promise<Capabilities>} promise that resolves with the vm capabilities
            */
        getCapabilities(): Promise<Capabilities>;
        /**
            * Gets the VM recommended disk bus type
            * @returns {Promise<DiskType>} promise that resolves with the vm recommended disk bus type
            */
        getRecommendedDiskBusType(): Promise<DiskType>;
        /**
            * Gets the VM guest customization section includes properties of the guest operating system that can be modified
            * such as passwords, and domain names.
            * @param {boolean} omitPasswords Whether to omit passwords (default: false)
            * @returns {Promise<GuestCustomization>} promise that resolves with the vm guest customization object
            */
        getGuestCustomization(omitPasswords?: boolean): Promise<GuestCustomization>;
        /**
            * Gets the VM guest tools information
            * @returns {Promise<GuestCustomization>} promise that resolves with the vm guest tools
            */
        getGuestToolsInfo(): Promise<GuestTools>;
        /**
            * Returns true if VM has a snapshot
            * @returns {Promise<boolean>} promise that resolves with a boolean that indicates if VM has a snapshot
            */
        hasSnapshot(): Promise<boolean>;
        /**
            * Gets the VM summary
            * @returns {Promise<VmSummary>} promise that resolves with the vm guest tools
            */
        getSummary(): Promise<VmSummary>;
        /**
            * Gets the VM tools upgrade policy
            * @returns {Promise<ToolsUpgradePolicy>} promise that resolves with tools upgrade policy string
            */
        getToolUpgradePolicy(): Promise<ToolsUpgradePolicy>;
        /**
            * Delete a virtual disk.
            * @param {string} name the name of the disk to delete
            * @returns {Promise<Task>} task promise
            */
        deleteVirtualDisk(name: string): Promise<Task>;
        /**
            * Gets the VM's metadata.
            * @returns {Promise<Metadata<MetadataType>[]>}
            */
        getMetadata(): Promise<Array<Metadata<MetadataType>>>;
        /**
            * Updates the VM's metadata.
            * @param {Array<Metadata<MetadataType>>} metadata the new array of metadata
            * @returns {Promise<Task>} task promise
            */
        updateMetadata(metadata: Array<Metadata<MetadataType>>): Promise<Task>;
        /**
            * Deletes a metadata entry.
            * @param {string} metadataKey the key of the metadata entry to delete
            * @returns {Promise<Task>} task promise
            */
        deleteMetadata(metadataKey: string): Promise<Task>;
        /**
            * Gets the VMs MKS screen ticket for a remote console connection.
            * @returns {Promise<MksScreenTicket>} promise that resolves with the MKS screen ticket
            */
        getMksScreenTicket(): Promise<MksScreenTicket>;
        /**
            * Get the networks for current VM.
            * @returns {Promise<Array<VmNetwork>>}
            */
        getNetworks(): Promise<Array<VmNetwork>>;
        /**
            * Gets the VMs screen ticket for a remote console connection.
            * @returns {Promise<ScreenTicket>} promise that resolves with the screen ticket
            */
        getScreenTicket(): Promise<ScreenTicket>;
        /**
            * Gets the current screen JPEG thumbnail image.
            * @returns {Promise<JpegImage>} promise Promise that resolves with a JpegImage
            */
        getScreen(): Promise<JpegImage>;
        /**
            * Deletes the VMs snapshot.
            * @returns {Promise<Task>} task promise
            */
        deleteSnapshot(): Promise<Task>;
        /**
            * Gets the VMs snapshot details.
            * @returns {Promise<Snapshot>} promise that resolves with the current snapshot details
            * @throws {ApiError} as NotFoundError if the VM doesn't currently have a snapshot
            */
        getSnapshot(): Promise<Snapshot>;
        /**
            * Gets the VM's virtual disks.
            * @returns {Promise<VirtualDisk[]>} array of virtual disks
            */
        getVirtualDisks(): Promise<Array<VirtualDisk>>;
        /**
            * Updates the VM's virtual hardware to the latest version available.
            * @returns {Promise<Task>} task promise
            */
        updateVirtualHardwareVersion(): Promise<Task>;
        /**
            * Gets the list of VNICs for this VM.
            * @returns {Promise<Vnic[]>}
            */
        getVnics(): Promise<Array<Vnic>>;
        /**
            * Delete a VNIC from this VM.
            * @returns {Promise<Task>} a promise that resolves with the task
            */
        deleteVnic(vnicId: number): Promise<Task>;
        /**
            * Refreshes the VM data by retrieving it from the API again.
            * @returns {Promise<Vm>}
            */
        refresh(): Promise<Vm>;
        /**
            * Performs a power operation on the VM.
            * @param {VmPowerOperation} type the type of power operation to perform
            * @param {boolean} forceGuestCustomization whether to force guest customization (only applicable when powering on)
            * @returns {Promise<Task>} task promise
            */
        performPowerOperation(type: VmPowerOperation, forceGuestCustomization?: boolean): Promise<Task>;
        /**
            * Get the billing summary for a VM.
            * @returns {Promise<BillingSummary>} a promise that resolves with the current billing information
            */
        getCurrentBilling(): Promise<BillingSummary>;
        /**
            * Gets the VM's resource summary.
            * @returns {Promise<VmResourceSummary>} a promise that resolves with the resource summary information
            */
        getVmSummary(): Promise<VmResourceSummary>;
        /**
            * Get the VM's product sections
            * @returns {Promise<Array<ProductSection>>} a promise that resolves with the product sections of the VM
            */
        getProductSections(): Promise<Array<ProductSection>>;
        /**
            * Update the VM's product section properties
            * @param request {UpdateProductSectionRequest}
            * @returns {Promise<Task>}
            */
        updateProductSections(request: UpdateProductSectionRequest): Promise<Task>;
        /**
            * Gets the VM's available storage profiles.
            * @returns {Promise<Array<StorageProfile>>} a promise that resolves with the available storage profiles
            */
        getAvailableStorageProfiles(): Promise<Array<StorageProfile>>;
        /**
            * Gets the VM's integrated backup status.
            * @returns {Promise<VmIntegratedBackupStatusDetail>}
            */
        getIntegratedBackupStatus(): Promise<VmIntegratedBackupStatusDetail>;
        /**
            * Gets the VM's backup status.
            *
            * @return {Promise<VmBackupStatusDetail>}
            */
        getBackupStatus(): Promise<VmBackupStatusDetail>;
        /**
            * Restores a VM backup.
            *
            * @param {RestoreVmBackupParams} params restoration parameters
            * @return {Promise<Task>} the restore task, used to track the asynchronous operation
            */
        restoreVMBackup(params: RestoreVmBackupParams): Promise<Task>;
        /**
            * Searches for recoverable backup files and folders that are associated with
            * the VM.
            *
            * @param {SearchVmRecoverableFilesAndFoldersFilters} filters query filters (Optional)
            * @return {Promise<Array<RecoverableFileSearchResult>>} a list of recoverable files and folders
            */
        searchRecoverableFilesAndFolders(filters?: SearchVmRecoverableFilesAndFoldersFilters): Promise<Array<RecoverableFileSearchResult>>;
        /**
            * Lists all backup runs that are associated with the specified VM.
            *
            * @param {number} backupGroupUid Will return only runs for a specific backup group. (Optional)
            * @param {number} startTimeMillis Default is 24 hours ago. (Optional)
            * @param {number} endTimeMillis Default is now. (Optional)
            * @param {number} limit Default is 10. (Optional)
            * @return {Promise<Array<BackupGroupRun>>} a list of backup runs that are associated with the VM
            */
        listBackupGroupRuns(backupGroupUid?: string, startTimeMillis?: number, endTimeMillis?: number, limit?: number): Promise<Array<BackupGroupRun>>;
        /**
            * Lists all snapshots that are available for a specified file, in association
            * with a specific backup group.
            *
            * @param {string} backupGroupUid the UID of the backup group
            * @param {string} filename the name of the file
            * @return {Promise<Array<FileSnapshotInfo>>} list of all snapshots available for the file
            */
        listBackupFileSnapshots(backupGroupUid: string, filename: string): Promise<Array<FileSnapshotInfo>>;
        /**
            * Lists all volumes that are present on a VM backup snapshot.
            *
            * @param {string} backupRunUid the UID of the backup run
            * @param {number} attemptNumber the snapshot attempt number (Optional)
            * @return {Promise<Array<FilesystemVolume>>} list of vm backup volume snapshots
            */
        listBackupVolumeSnapshots(backupRunUid: string, attemptNumber: number): Promise<Array<FilesystemVolume>>;
        /**
            * Gets a directory listing for a VM backup snapshot.
            *
            * @param {string} backupRunUid the UID of the backup run that the snapshot is associated with
            * @param {string} volumeName the name of the volume
            * @param {string} directoryPath the full directory path to list
            * @param {ListBackupSnapshotFilesAndFoldersFilters} filters query filters (Optional)
            * @return {DirectoryListing} vm backup directory listing
            */
        listBackupDirectoryContents(backupRunUid: string, volumeName: string, directoryPath: string, filters?: ListBackupSnapshotFilesAndFoldersFilters): Promise<DirectoryListing>;
        /**
            * Generates a new downloadable bundle (ZIP archive) of a collection of
            * file snapshots.
            *
            * @param {GenerateBackupFileDownloadBundleParams} params the specification for which files to download
            * @return {Promise<Task>} asynchronous task that indicates eventual completion and
            * success/failure
            */
        generateBackupFileDownloadBundle(params: GenerateBackupFileDownloadBundleParams): Promise<Task>;
        /**
            * Gets a new downloadable bundle (ZIP archive) of a collection of file snapshots using a Task uuid
            *
            * @param taskUuid {string} the uuid of the Task that originally created the file bundle
            * @param downloadProgressCallback {function} optional progress callback if user wishes to receive progress events
            * for download
            * @return {Promise<Blob>} the download bundle in zip format
            */
        getBackupFileDownloadBundle(taskUuid: string, downloadProgressCallback?: (e: any) => void): Promise<Blob>;
        /**
            * Get an Advanced Backups download bundle link
            * @param taskUuid {string} the task uuid used to create bundle
            * @returns {Observable<string>}
            */
        getDownloadBundleLink(taskUuid: string): Observable<string>;
        /**
            * Get an Advanced Backups link to download an individual file from a specified backup run
            * @param backupRunUid {string} the UID of the backup run that created the snapshot
            * @param filename {string} the name of the file
            * @returns {Observable<string>} html link with a current auth token
            */
        getDownloadFileLink(backupRunUid: string, filename: string): Observable<string>;
}
/**
    * Enumeration of possible VM power statuses.
    */
export type VmPowerStatus = VmStatus | 'PARTIALLY_POWERED_OFF';

/**
    * Interface for VNIC properties.
    */
export interface VnicJson {
        adapter_type: string;
        ip_addressing_mode: VnicAddressMode;
        is_connected: boolean;
        deleted: boolean;
        ip_address: string;
        mac_address: string;
        network_name: string;
        is_primary: boolean;
        vnic_id: number;
}
/**
    * Enumeration of possible VNIC addressing modes.
    */
export type VnicAddressMode = 'DHCP' | 'MANUAL' | 'POOL' | 'NONE';

/**
    * Virtual Network Interface Card.
    */
export class Vnic {
        constructor(_apiVnic: VnicJson);
        /**
            * Gets the type of the adapter.
            * @returns {string} adapter type
            */
        get adapterType(): string;
        /**
            * Gets the address mode of the adapter.
            * @returns {string} address mode
            */
        get addressMode(): VnicAddressMode;
        /**
            * Indicates whether the VNIC is currently connected.
            * @returns {boolean} value
            */
        get isConnected(): boolean;
        /**
            * Indicates whether the VNIC is deleted.
            * @returns {boolean} value
            */
        get deleted(): boolean;
        /**
            * Gets the IP address that is assigned to the VNIC.
            * @returns {string} IP Address
            */
        get ipAddress(): string;
        /**
            * Gets the MAC address that is assigned to the VNIC.
            * @returns {string} MAC address
            */
        get macAddress(): string;
        /**
            * Gets the name of the network that the VNIC is connected to.
            * @returns {string} vApp network name
            */
        get connectedNetworkName(): string;
        /**
            * Indicates whether this is the VM's primary VNIC.
            * @returns {boolean} value
            */
        get primaryConnection(): boolean;
        /**
            * Gets the ID of the VNIC among other VNICs connected to the VM.
            * @returns {number} VNIC ID
            */
        get vnicId(): number;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {VnicJson} the API VNIC object
            */
        get json(): VnicJson;
}

/**
  * Expanded VPG JSON interface.
  */
export interface ExpandedVpgJson {
    service_profile: ServiceProfileJson;
    vms: Array<VpgVmJson>;
    org_uuid: string;
    location_id: string;
    service_profile_uuid: string;
    vpg_identifier: string;
    vpg_name: string;
    organization_name: string;
    actual_rpo: number;
    entities: VpgEntitiesJson;
    status: VpgStatus;
    sub_status: VpgSubStatus;
    priority: VpgPriority;
    vms_count: number;
    last_test: number;
    source_site: string;
    target_site: string;
    provisioned_storage_in_mb: number;
    used_storage_in_mb: number;
    iops: number;
    throughput_in_mb: number;
    service_profile_identifier: string;
    backup_enabled: boolean;
    recovery_site_identifier: string;
    protected_site_identifier: string;
    active_process_stage: ActiveProcessStage;
    recovery_journal_used_storage_in_mb: number;
    recovery_journal_provisioned_storage_in_mb: number;
    uuid: string;
    name: string;
    deleted: boolean;
    deleted_date: number;
    updated_date: number;
    company_id: string;
}

/**
  * Enumeration of possible Active Process Stage types.
  */
export type ActiveProcessStage = 'IN_TEST' | 'STARTING' | 'STOPPING' | 'NONE';

/**
  * Enumeration of possible environment types.
  */
export type EnvironmentType = 'VC_VPG' | 'VC_VAPP' | 'VCD_VAPP' | 'PUBLIC_CLOUD' | 'HYPERV';

/**
  * Enumeration of possible Vpg Priority types.
  */
export type VpgPriority = 'LOW' | 'MEDIUM' | 'HIGH';

/**
  * Enumeration of possible Vpg Status types.
  */
export type VpgStatus = 'INITIALIZING' | 'MEETING_SLA' | 'NOT_MEETING_SLA' | 'HISTORY_NOT_MEETING_SLA' | 'RPO_NOT_MEETING_SLA' | 'FAILING_OVER' | 'MOVING' | 'DELETING' | 'RECOVERED';

/**
  * Enumeration for Vpg Sub Entity Request types.
  */
export type VpgSubEntityRequest = 'VPG_VM' | 'SERVICE_PROFILE';

/**
  * Enumeration of possible Vpg Sub Status types.
  */
export type VpgSubStatus = 'NONE' | 'INITIAL_SYNC' | 'CREATING' | 'VOLUME_INITIAL_SYNC' | 'SYNC' | 'RECOVERY_POSSIBLE' | 'DELTA_SYNC' | 'NEEDS_CONFIGURATION' | 'ERROR' | 'EMPTY_PROTECTION_GROUP' | 'DISCONNECTED_FROM_PEER_NO_RECOVERY_POINTS' | 'FULL_SYNC' | 'VOLUME_DELTA_SYNC' | 'VOLUME_FULL_SYNC' | 'FAILING_OVER_COMMITTING' | 'FAILING_OVER_BEFORE_COMMIT' | 'FAILING_OVER_ROLLING_BACK' | 'PROMOTING' | 'MOVING_COMMITTING' | 'MOVING_BEFORE_COMMIT' | 'MOVING_ROLLING_BACK' | 'DELETING' | 'PENDING_REMOVE' | 'BITMAP_SYNC' | 'DISCONNECTED_FROM_PEER' | 'REPLICATION_PAUSED_USER_INITIATED' | 'REPLICATION_PAUSED_SYSTEM_INITIATED' | 'RECOVERY_STORAGE_PROFILE_ERROR' | 'BACKUP' | 'ROLLING_BACK' | 'RECOVERY_STORAGE_ERROR' | 'JOURNAL_STORAGE_ERROR' | 'VM_NOT_PROTECTED_ERROR';

/**
    * Interface for Vpg JSON properties.
    */
export interface VpgJson extends EntityJson {
        service_profile: ServiceProfileJson;
        vms: Array<VpgVmJson>;
        org_uuid: string;
        location_id: string;
        service_profile_uuid: string;
        vpg_identifier: string;
        vpg_name: string;
        organization_name: string;
        actual_rpo: number;
        entities: VpgEntitiesJson;
        status: VpgStatus;
        sub_status: VpgSubStatus;
        priority: VpgPriority;
        vms_count: number;
        last_test: number;
        source_site: string;
        target_site: string;
        provisioned_storage_in_mb: number;
        used_storage_in_mb: number;
        iops: number;
        throughput_in_mb: number;
        service_profile_identifier: string;
        backup_enabled: boolean;
        recovery_site_identifier: string;
        protected_site_identifier: string;
        active_process_stage: ActiveProcessStage;
        recovery_journal_used_storage_in_mb: number;
        recovery_journal_provisioned_storage_in_mb: number;
}
/**
    * Interface for Service Profile JSON properties.
    */
export interface ServiceProfileJson {
        uuid: string;
        location: string;
        service_profile_identifier: string;
        service_profile_name: string;
        description: string;
        history: number;
        max_journal_size_in_percent: number;
        rpo: number;
        test_interval: number;
}
/**
    * Interface for Vpg VM JSON properties.
    */
export interface VpgVmJson {
        location: string;
        org_uuid: string;
        vpg_uuid: string;
        uuid: string;
        vm_name: string;
        vm_identifier: string;
        vpg_name: string;
        organization_name: string;
        actual_rpo: number;
        entities: VpgEntitiesJson;
        status: VpgStatus;
        sub_status: VpgSubStatus;
        priority: VpgPriority;
        source_site: string;
        target_site: string;
        last_test: number;
        provisioned_storage_in_mb: number;
        used_storage_in_mb: number;
        iops: number;
        throughput_in_mb: number;
}
/**
    * Interace for Vpg Entities JSON properties.
    */
export interface VpgEntitiesJson {
        source: EnvironmentType;
        target: EnvironmentType;
}

/**
    * Expanded VPG.
    */
export class ExpandedVpg {
        constructor(_json: ExpandedVpgJson);
        /**
            * The ID of the company that the VPG belongs to.
            */
        get companyId(): string;
        /**
            * Get service profile.
            */
        get serviceProfile(): ServiceProfile | null;
        /**
            * Get vms.
            * @returns {Array<VpgVm>}
            */
        get vms(): Array<VpgVm>;
        /**
            * Get org uuid.
            * @returns {string}
            */
        get orgUuid(): string;
        /**
            * Get location id.
            * @returns {string}
            */
        get locationId(): string;
        /**
            * Get service profile uuid.
            * @returns {string}
            */
        get serviceProfileUuid(): string;
        /**
            * Get vpg identifier.
            * @returns {string}
            */
        get vpgIdentifier(): string;
        /**
            * Get vpg name.
            * @returns {string}
            */
        get vpgName(): string;
        /**
            * Get organization name.
            * @returns {string}
            */
        get organizationName(): string;
        /**
            * Get actual rpo.
            * @returns {number}
            */
        get actualRpo(): number;
        /**
            * Get entities.
            * @returns {VpgEntitiesJson}
            */
        get entities(): VpgEntities;
        /**
            * Get status.
            * @returns {VpgStatus}
            */
        get status(): VpgStatus;
        /**
            * Get sub status.
            * @returns {VpgSubStatus}
            */
        get subStatus(): VpgSubStatus;
        /**
            * Get priority.
            * @returns {VpgPriority}
            */
        get priority(): VpgPriority;
        /**
            * Get vms count.
            * @returns {number}
            */
        get vmsCount(): number;
        /**
            * Get last test.
            * @returns {number}
            */
        get lastTest(): number;
        /**
            * Get source site.
            * @returns {string}
            */
        get sourceSite(): string;
        /**
            * Get target site.
            * @returns {string}
            */
        get targetSite(): string;
        /**
            * Get provisioned storage in mb.
            * @returns {number}
            */
        get provisionedStorageInMb(): number;
        /**
            * Get used storage in mb.
            * @returns {number}
            */
        get usedStorageInMb(): number;
        /**
            * Get iops.
            * @returns {number}
            */
        get iops(): number;
        /**
            * Get throughput in mb.
            * @returns {number}
            */
        get throughputInMb(): number;
        /**
            * Get service profile identifier.
            * @returns {string}
            */
        get serviceProfileIdentifier(): string;
        /**
            * Get backup enabled.
            * @returns {boolean}
            */
        get backupEnabled(): boolean;
        /**
            * Get recovery site identifier.
            * @returns {string}
            */
        get recoverySiteIdentifier(): string;
        /**
            * Get protected site identifier.
            * @returns {string}
            */
        get protectedSiteIdentifier(): string;
        /**
            * Get active process stage.
            * @returns {ActiveProcessStage}
            */
        get activeProcessStage(): ActiveProcessStage;
        /**
            * Get recovery journal used storage mb.
            * @returns {number}
            */
        get recoveryJournalUsedStorageInMb(): number;
        /**
            * Get recovery journal provisioned storage in mb for Vpg
            * @returns {number} recovery journal provisioned storage in mb
            */
        get recoveryJournalProvisionedStorageInMb(): number;
        /**
            * Get uuid.
            * @returns {string}
            */
        get uuid(): string;
        /**
            * Get name.
            * @returns {string}
            */
        get name(): string;
        /**
            * Get deleted.
            * @returns {boolean}
            */
        get deleted(): boolean;
        /**
            * Get deleted date.
            * @returns {number}
            */
        get deletedDate(): number;
        /**
            * Get updated date.
            * @returns {number}
            */
        get updatedDate(): number;
        /**
            * Get the json representation of this class.
            * @returns {ExpandedVpgJson}
            */
        get json(): ExpandedVpgJson;
        /**
            * Return whether or not the vpg is failing over or not.
            * @returns {boolean}
            */
        isFailingOver(): boolean;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Service Profile
    */
export class ServiceProfile {
        constructor(_json: ServiceProfileJson);
        /**
            * Get uuid for Service Profile
            * @returns {string} uuid
            */
        get uuid(): string;
        /**
            * Get location for Service Profile
            * @returns {string} location
            */
        get location(): string;
        /**
            * Get identifier for Service Profile
            * @returns {string} identifier
            */
        get serviceProfileIdentifier(): string;
        /**
            * Get name for Service Profile
            * @returns {string} name
            */
        get serviceProfileName(): string;
        /**
            * Get description for Service Profile
            * @returns {string} description
            */
        get description(): string;
        /**
            * Get history for Service Profile
            * @returns {number} history
            */
        get history(): number;
        /**
            * Get max journal size in percent for Service Profile
            * @returns {number}  max journal size in percent
            */
        get maxJournalSizeInPercent(): number;
        /**
            * Get rpo for Service Profile
            * @returns {number} rpo
            */
        get rpo(): number;
        /**
            * Get test interval for Service Profile
            * @returns {number} test interval
            */
        get testInterval(): number;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {ServiceProfileJson} the API object
            */
        get json(): ServiceProfileJson;
}

/**
  * Vpg Checkpoint Json properties
  */
export interface VpgCheckpointJson {
    checkpoint_identifier: string;
    tag: string;
    time_stamp: number;
}

/**
    * Vpg Checkpoint
    */
export class VpgCheckpoint {
        constructor(_json: VpgCheckpointJson);
        /**
            * Get checkpoint identifier for Vpg Checkpoint
            * @returns {string} identifier
            */
        get checkpointIdentifier(): string;
        /**
            * Get tag for Vpg Checkpoint
            * @returns {string} tag
            */
        get tag(): string;
        /**
            * Get timestamp for Vpg Checkpoint
            * @returns {number} timestamp
            */
        get timestamp(): number;
        /**
            * JSON format
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {VpgCheckpointJson} the API Vpg object
            */
        get json(): VpgCheckpointJson;
}

/**
    * Vpg Entities.
    */
export class VpgEntities {
        constructor(_json: VpgEntitiesJson);
        /**
            * Get source for Vpg Entities
            * @returns {EnvironmentType} source
            */
        get source(): EnvironmentType;
        /**
            * Get target for Vpg Entities
            * @returns {EnvironmentType}
            */
        get target(): EnvironmentType;
        /**
            * JSON format
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {VpgVmJson} the API object
            */
        get json(): VpgEntitiesJson;
}

/**
  * Enumeration of possible commit policy types
  */
export type CommitPolicy = 'ROLLBACK' | 'COMMIT' | 'NONE';

/**
  * Vpg Failover Create Request JSON properties.
  */
export interface VpgFailoverCreateRequestJson {
    checkpoint_identifier: string;
    commit_policy: CommitPolicy;
    shutdown_policy: ShutdownPolicy;
    time_to_wait_before_shutdown_in_sec: number;
    commit_value: number;
}

/**
    * Vpg Failover Report Details Json properties
    */
export interface VpgFailoverReportDetailsJson {
        location_id: string;
        task_uuid: string;
        task_complete_timestamp: number;
        status: Status;
        data: VpgFailoverReportDataJson;
}
/**
    * Vpg Failover Report Data Json properties
    */
export interface VpgFailoverReportDataJson {
        vpg_name: string;
        report_generation_date: string;
        operation_name: string;
        point_in_time: string;
        start_time: string;
        end_time: string;
        rto: string;
        operation_result: string;
        user_notes: string;
        protected_site: string;
        recovery_site: string;
        default_recovery_host: string;
        default_recovery_datastore: string;
        default_failover_move_network: string;
        recovery_organization: string;
        recovery_vdc: string;
        guest_customization: string;
        default_test_recovery_network: string;
        default_recovery_folder: string;
        post_recovery_script: string;
        boot_order_settings_message: string;
        network_mappings: Array<NetworkMappingJson>;
        boot_order_settings: Array<BootOrderSettingsJson>;
        vm_recovery_settings: Array<VmRecoverySettingsJson>;
        detailed_recovery_step_list: Array<DetailedRecoveryStepJson>;
}
/**
    * Network Mapping Json properties
    */
export interface NetworkMappingJson {
        source_network: string;
        failover_move_target_network: string;
        failover_test_target_network: string;
        reverse_configuration_failover_test_network: string;
}
/**
    * Boot Order Setting Json properties
    */
export interface BootOrderSettingsJson {
        name: string;
        vms_in_group: string;
        startup_delay: string;
}
/**
    * Vm Recovery Settings properties
    */
export interface VmRecoverySettingsJson {
        name: string;
        recovery_host: string;
        recovery_networks: Map<string, string>;
        recovery_datastores: Map<string, string>;
        recovery_folder: string;
}
/**
    * Detailed Recovery Step Json properties
    */
export interface DetailedRecoveryStepJson {
        number: string;
        description: string;
        result: string;
        start_time: string;
        end_time: string;
        execution_time: string;
}

/**
  * Enumeration of possible shutdown policy types
  */
export type ShutdownPolicy = 'NONE' | 'SHUTDOWN' | 'FORCE_SHUTDOWN';

/**
  * Enumeration for possible Status types
  */
export type Status = 'FETCHING' | 'GENERATING' | 'READY' | 'ERROR';

/**
  * Vpg Failover Test Alert Request Json properties.
  */
export interface VpgFailoverTestAlertRequestJson {
    email: string;
    weeks_before_alert: number;
}

/**
  * Vpg Failover Test Alert JSON properties.
  */
export interface VpgFailoverTestAlertJson {
    vpg_uuid: string;
    username: string;
    email: string;
    weeks_before_alert: number;
}

/**
    * Vpg Failover Create Request
    */
export class VpgFailoverCreateRequest {
        constructor(failoverCreateRequest: VpgFailoverCreateRequest);
        constructor(VpgFailoverCreateRequestJson: VpgFailoverCreateRequestJson);
        constructor(checkpointIdentifier: string, commitPolicy: CommitPolicy, shutdownPolicy: ShutdownPolicy, timeToWaitBeforeShutdownInSec: number, commitValue: number);
        /**
            * Get checkpoint identifier.
            * @returns {string}
            */
        get checkpointIdentifier(): string;
        /**
            * Get commit policy.
            * @returns {CommitPolicy}
            */
        get commitPolicy(): CommitPolicy;
        /**
            * Get shutdown policy.
            * @returns {ShutdownPolicy}
            */
        get shutdownPolicy(): ShutdownPolicy;
        /**
            * Get time to wait before shutdown in sec.
            * @returns {number}
            */
        get timeToWaitBeforeShutdownInSec(): number;
        /**
            * Get commit value.
            * @returns {number}
            */
        get commitValue(): number;
        /**
            * Get the json representation of this class.
            * @returns {VpgFailoverCreateRequestJson}
            */
        get json(): VpgFailoverCreateRequestJson;
        /**
            * Get the string representation of this class.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Network Mapping
    */
export class NetworkMapping {
        constructor(_json: NetworkMappingJson);
        /**
            * Get source network for Network Mapping
            * @returns {string} source network
            */
        get sourceNetwork(): string;
        /**
            * Get failover move target network for Network Mapping
            * @returns {string} failover move target network
            */
        get failoverMoveTargetNetwork(): string;
        /**
            * Get failover test target network for Network Mapping
            * @returns {string} failover test target network
            */
        get failoverTestTargetNetwork(): string;
        /**
            * Get reverse configuration failover test network for Network Mapping
            * @returns {string} reverse configuration failover test network
            */
        get reverseConfigFailoverTestNetwork(): string;
        /**
            * JSON format
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {NetworkMappingJson} the API __json__ object
            */
        get json(): NetworkMappingJson;
}
/**
    * Boot Order Settings
    */
export class BootOrderSettings {
        constructor(_json: BootOrderSettingsJson);
        /**
            * Get name for Boot Order Settings
            * @returns {string} name
            */
        get name(): string;
        /**
            * Get VMs in group for Boot Order Settings
            * @returns {string} VMs in group
            */
        get vmsInGroup(): string;
        /**
            * Get startup delay for Boot Order Settings
            * @returns {string} startup delay
            */
        get startupDelay(): string;
        /**
            * JSON format
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {BootOrderSettingsJson} the API __json__ object
            */
        get json(): BootOrderSettingsJson;
}
/**
    * Vm Recovery Settings
    */
export class VmRecoverySettings {
        constructor(_json: VmRecoverySettingsJson);
        /**
            * Get name for Vm Recovery Settings
            * @returns {string} name
            */
        get name(): string;
        /**
            * Get recovery hosts for Vm Recovery Settings
            * @returns {string} recovery hosts
            */
        get recoveryHost(): string;
        /**
            * Get recovery networks for Vm Recovery Settings
            * @returns {Map<string, string>} recovery networks
            */
        get recoveryNetworks(): Map<string, string>;
        /**
            * Get recovery data stores for Vm Recovery Settings
            * @returns {Map<string, string>} recovery data stores
            */
        get recoveryDatastores(): Map<string, string>;
        /**
            * Get recovery folder for Vm Recovery Settings
            * @returns {string} recovery folder
            */
        get recoveryFolder(): string;
        /**
            * JSON format
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {VmRecoverySettingsJson} the API __json__ object
            */
        get json(): VmRecoverySettingsJson;
}
/**
    * Detailed Recovery Step
    */
export class DetailedRecoveryStep {
        constructor(_json: DetailedRecoveryStepJson);
        /**
            * Get number for Detailed Recovery Step
            * @returns {string} number
            */
        get number(): string;
        /**
            * Get description for Detailed Recovery Step
            * @returns {string} description
            */
        get description(): string;
        /**
            * Get result for Detailed Recovery Step
            * @returns {string} result
            */
        get result(): string;
        /**
            * Get start time for Detailed Recovery Step
            * @returns {string} start time
            */
        get startTime(): string;
        /**
            * Get end time for Detailed Recovery Step
            * @returns {string} end time
            */
        get endTime(): string;
        /**
            * Get execution time for Detailed Recovery Step
            * @returns {string} execution time
            */
        get executionTime(): string;
        /**
            * JSON format
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {DetailedRecoveryStepJson} the API __json__ object
            */
        get json(): DetailedRecoveryStepJson;
}
/**
    * Vpg Failover Report Data
    */
export class VpgFailoverReportData {
        constructor(_json: VpgFailoverReportDataJson);
        /**
            * Get Vpg name for Vpg Failover Report Data
            * @returns {string} Vpg name
            */
        get vpgName(): string;
        /**
            * Get report generation date for Vpg Failover Report Data
            * @returns {string} report generation date
            */
        get reportGenerationDate(): string;
        /**
            * Get operation name for Vpg Failover Report Data
            * @returns {string} operation name
            */
        get operationName(): string;
        /**
            * Get point in time for Vpg Failover Report Data
            * @returns {string} point in time
            */
        get pointInTime(): string;
        /**
            * Get start time for Vpg Failover Report Data
            * @returns {string} start time
            */
        get startTime(): string;
        /**
            * Get end time for Vpg Failover Report Data
            * @returns {string} end time
            */
        get endTime(): string;
        /**
            * Get rto for Vpg Failover Report Data
            * @returns {string} rto
            */
        get rto(): string;
        /**
            * Get operation result for Vpg Failover Report Data
            * @returns {string} operation result
            */
        get operationResult(): string;
        /**
            * Get user notes for Vpg Failover Report Data
            * @returns {string} user notes
            */
        get userNotes(): string;
        /**
            * Get protected site for Vpg Failover Report Data
            * @returns {string} protected site
            */
        get protectedSite(): string;
        /**
            * Get recovery site for Vpg Failover Report Data
            * @returns {string} recovery site
            */
        get recoverySite(): string;
        /**
            * Get default recovery host for Vpg Failover Report Data
            * @returns {string} default recovery host
            */
        get defaultRecoveryHost(): string;
        /**
            * Get default recovery data store for Vpg Failover Report Data
            * @returns {string} default recovery data store
            */
        get defaultRecoveryDatastore(): string;
        /**
            * Get default failover move network for Vpg Failover Report Data
            * @returns {string} default failover move network
            */
        get defaulFailoverMoveNetwork(): string;
        /**
            * Get recovery organization for Vpg Failover Report Data
            * @returns {string} recovery org
            */
        get recoveryOrg(): string;
        /**
            * Get recovery Vdc for Vpg Failover Report Data
            * @returns {string} recovery Vdc
            */
        get recoveryVdc(): string;
        /**
            * Get guest customization for Vpg Failover Report Data
            * @returns {string} guest customization
            */
        get guestCustomization(): string;
        /**
            * Get default test recovery network for Vpg Failover Report Data
            * @returns {string} default test recovery network
            */
        get defaultTestRecoveryNetwork(): string;
        /**
            * Get default recovery folder for Vpg Failover Report Data
            * @returns {string} default recovery folder
            */
        get defaultRecoveryFolder(): string;
        /**
            * Get post recovery script for Vpg Failover Report Data
            * @returns {string} post recovery script
            */
        get postRecoveryScript(): string;
        /**
            * Get boot order settings message for Vpg Failover Report Data
            * @returns {string} boot order settings message
            */
        get bootOrderSettingsMessage(): string;
        /**
            * Get network mappings for Vpg Failover Report Data
            * @returns {Array<NetworkMapping>} network mappings
            */
        get networkMappings(): Array<NetworkMapping>;
        /**
            * Get boot order settings for Vpg Failover Report Data
            * @returns {Array<BootOrderSettings>} boot order settings
            */
        get bootOrderSettings(): Array<BootOrderSettings>;
        /**
            * Get VM recovery settings for Vpg Failover Report Data
            * @returns {Array<VmRecoverySettings>} VM recovery settings
            */
        get vmRecoverySettings(): Array<VmRecoverySettings>;
        /**
            * Get detailed recovery step list for Vpg Failover Report Data
            * @returns {Array<DetailedRecoveryStep>} detailed recovery step list
            */
        get detailedRecoveryStepList(): Array<DetailedRecoveryStep>;
        /**
            * JSON format
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {VpgFailoverReportDataJson} the API __json__ object
            */
        get json(): VpgFailoverReportDataJson;
}
/**
    * Vpg Failover Report Details
    */
export class VpgFailoverReportDetails {
        constructor(_json: VpgFailoverReportDetailsJson);
        /**
            * Get location id for Vpg Failover Report Details
            * @returns {string} location id
            */
        get locationId(): string;
        /**
            * Get task uuid for Vpg Failover Report Details
            * @returns {string} task uuid
            */
        get taskUuid(): string;
        /**
            * Get task complete timestamp for Vpg Failover Report Details
            * @returns {number} timestamp
            */
        get taskCompleteTimestamp(): number;
        /**
            * Get status for Vpg Failover Report Details
            * @returns {Status} status
            */
        get status(): Status;
        /**
            * Get data for Vpg Failover Report Details
            * @returns {VpgFailoverReportData} data
            */
        get data(): VpgFailoverReportData;
        /**
            * JSON format
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {VpgFailoverReportDetailsJson} the API __json__ object
            */
        get json(): VpgFailoverReportDetailsJson;
}

/**
    * Vpg Failover Test Alert Request.
    */
export class VpgFailoverTestAlertRequest {
        /**
            * Creates a new Vpg Failover Test Alert Request
            * @param {string} email
            * @param {number} weeksBeforeAlert
            */
        constructor(email: string, weeksBeforeAlert: number);
        /**
            * Gets the raw JSON object from the API.
            * @returns {VpgFailoverTestAlertRequestJson} the JSON representation
            */
        get json(): VpgFailoverTestAlertRequestJson;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Vpg Failover Test Alert
    */
export class VpgFailoverTestAlert {
        constructor(_json: VpgFailoverTestAlertJson);
        /**
            * Get Vpg uuid for Failover Test Alert
            * @returns {string} vpg uuid
            */
        get vpgUuid(): string;
        /**
            * Get username for Vpg Failover Test Alert
            * @returns {string} username
            */
        get username(): string;
        /**
            * Get email for Vpg Failover Test Alert
            * @returns {string} email
            */
        get email(): string;
        /**
            * Get weeks before alert for Vpg Failover Test Alert
            * @returns {number} weeks before alert
            */
        get weeksBeforeAlert(): number;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {VpgFailoverTestAlertJson} the API Vpg object
            */
        get json(): VpgFailoverTestAlertJson;
}

/**
    * Vpg VM.
    */
export class VpgVm {
        constructor(_json: VpgVmJson);
        /**
            * Get location id for Vpg VM
            * @returns {string} location id
            */
        get location(): string;
        /**
            * Get org uuid for Vpg Vm
            * @returns {string} org uuid
            */
        get orgUuid(): string;
        /**
            * Get vpg uuid for Vpg VM
            * @returns {string} vpg uuid
            */
        get vpgUuid(): string;
        /**
            * Get uuid for Vpg VM
            * @returns {string} uuid
            */
        get uuid(): string;
        /**
            * Get VM name for Vpg Vm
            * @returns {string} vm name
            */
        get vmName(): string;
        /**
            * Get VM identifier for Vpg VM
            * @returns {string} vm identifier
            */
        get vmIdentifier(): string;
        /**
            * Get org name for Vpg VM
            * @returns {string} org name
            */
        get orgName(): string;
        /**
            * Get actual rpo for Vpg VM
            * @returns {number} actual rpo
            */
        get actualRpo(): number;
        /**
            * Get entities for Vpg VM
            * @returns {VpgEntities} entites
            */
        get entities(): VpgEntities;
        /**
            * Get status for Vpg VM
            * @returns {VpgStatus} status
            */
        get status(): VpgStatus;
        /**
            * Get sub status for Vpg VM
            * @returns {VpgSubStatus} sub status
            */
        get subStatus(): VpgSubStatus;
        /**
            * Get priority for Vpg Vm
            * @returns {VpgPriority} priority
            */
        get priority(): VpgPriority;
        /**
            * Get source site for Vpg VM
            * @returns {string} source site
            */
        get sourceSite(): string;
        /**
            * Get target site for Vpg VM
            * @returns {string} target site
            */
        get targetSite(): string;
        /**
            * Get last test for Vpg VM
            * @returns {number} last test
            */
        get lastTest(): number;
        /**
            * Get provisioned storage in mb for Vpg VM
            * @returns {number} provisioned storage in mb
            */
        get provisionedStorageInMb(): number;
        /**
            * Get used storage in percent for Vpg VM
            * @returns {number} used storage in percent
            */
        get usedStorageInPercent(): number;
        /**
            * Get iops for Vpg VM
            * @returns {number} iops
            */
        get iops(): number;
        /**
            * Get throughput in mb for Vpg VM
            * @returns {number} throughput in mb
            */
        get throughputInMb(): number;
        /**
            * JSON format
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {VpgVmJson} the API object
            */
        get json(): VpgVmJson;
}

/**
    * Virtual Protection Group
    */
export class Vpg extends Entity {
        constructor(_json: VpgJson);
        /**
            * Gets a Vpg by UUID.
            * @param {string} uuid vpg UUID
            * @param {Array<VpgSubEntityRequest>} vpgSubEntities query params
            * @returns {Promise<Vpg>} promise that resolves with the Vpg
            */
        static getVpg(uuid: string, vpgSubEntities: Array<VpgSubEntityRequest>): Promise<Vpg>;
        get entityType(): EntityType;
        /**
            * Get service profile for Vpg.
            * @returns {ServiceProfile | null} service profile or null if there is no service profile for this vpg.
            */
        get serviceProfile(): ServiceProfile | null;
        /**
            * Get VMs for Vpg
            * @returns {Array<VpgVm>} list of Vpg VMs
            */
        get vms(): Array<VpgVm>;
        /**
            * Get the org uuid of Vpg
            * @returns {string} org uuid
            */
        get orgUuid(): string;
        /**
            * Get the location id of Vpg
            * @returns {string} location id
            */
        get locationId(): string;
        /**
            * Get service profile uuid of Vpg
            * @returns {string} service profile uuid
            */
        get serviceProfileUuid(): string;
        /**
            * Get the Vpg identifier of Vpg
            * @returns {string} vpg identifier
            */
        get vpgIdentifier(): string;
        /**
            * Get the Vpg name
            * @returns {string} name
            */
        get vpgName(): string;
        /**
            *  Get org name of Vpg
            * @returns {string} org name
            */
        get orgName(): string;
        /**
            * Get actual rpo of Vpg
            * @returns {number} actual rpo
            */
        get actualRpo(): number;
        /**
            * Get entities for Vpg
            * @returns {VpgEntities} entities
            */
        get entities(): VpgEntities;
        /**
            * Get status of Vpg
            * @returns {VpgStatus} status
            */
        get status(): VpgStatus;
        /**
            * Get sub status of Vpg
            * @returns {VpgSubStatus} sub status
            */
        get subStatus(): VpgSubStatus;
        /**
            * Get priority of Vpg
            * @returns {VpgPriority} priority
            */
        get priority(): VpgPriority;
        /**
            * Get VMs count for Vpg
            * @returns {number} VMs count
            */
        get vmsCount(): number;
        /**
            * Get last test for Vpg
            * @returns {number} last test
            */
        get lastTest(): number;
        /**
            * Get source site for Vpg
            * @returns {string} source sit
            */
        get sourceSite(): string;
        /**
            * Get target site for Vpg
            * @returns {string} target site
            */
        get targetSite(): string;
        /**
            * Get provisioned storage in mb for Vpg
            * @returns {number} provisioned storage in bm
            */
        get provisionedStorageInMb(): number;
        /**
            * Get used storage in percent for Vpg
            * @returns {number} used storage in percent
            */
        get usedStorageInMb(): number;
        /**
            * Get iops for Vpg
            * @returns {number} iops
            */
        get iops(): number;
        /**
            * Get throughput in mb for Vpg
            * @returns {number} throughput in mb
            */
        get throughputInMb(): number;
        /**
            * Get service profile identifier for Vpg
            * @returns {string} service profile identifier
            */
        get serviceProfileIdentifier(): string;
        /**
            * Get is backup enabled boolean for Vpg
            * @returns {boolean} backup enabled
            */
        get isBackupEnabled(): boolean;
        /**
            * Get recovery site identifier for Vpg
            * @returns {string} recovery site identifier
            */
        get recoverySiteIdentifier(): string;
        /**
            * Get protected site identifer for Vpg
            * @returns {string} protected site identifier
            */
        get protectedSiteIdentifier(): string;
        /**
            * Get active provess stage for Vpg
            * @returns {ActiveProcessStage} active process stage
            */
        get activeProcessStage(): ActiveProcessStage;
        /**
            * Get recovery journal used storage in mb for Vpg
            * @returns {number} recovery journal used storage in mb
            */
        get recoveryJournalUsedStorageInMb(): number;
        /**
            * Get recovery journal provisioned storage in mb for Vpg
            * @returns {number} recovery journal provisioned storage in mb
            */
        get recoveryJournalProvisionedStorageInMb(): number;
        /**
            * Return whether or not the vpg is failing over or not.
            * @returns {boolean}
            */
        isFailingOver(): boolean;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {VpgJson} the API Vpg object
            */
        get json(): VpgJson;
        /**
            * Get the failover test alert for Vpg
            * @returns {Promise<VpgFailoverTestAlert>} vpg failover test alert
            */
        getVpgFailoverTestAlert(): Promise<VpgFailoverTestAlert>;
        /**
            * Add a Vpg Failover Test Alert
            * @param {VpgFailoverTestAlertRequest} alertRequest
            * @returns {Promise<VpgFailoverTestAlert>}
            */
        addVpgFailoverTestAlert(alertRequest: VpgFailoverTestAlertRequest): Promise<VpgFailoverTestAlert>;
        /**
            * Remove a Vpg Failover Test Alert
            * @returns {Promise<any>}
            */
        removeVpgFailoverTestAlert(): Promise<any>;
        /**
            * Returns VPG performance samples given a performance series information
            * @param {string} group
            * @param {string} name
            * @param {string} type
            * @param {number} start
            * @param {number} end
            * @returns {Promise<PerfSampleSerie>} perf sample serie
            */
        getVpgPerfFor(group: string, name: string, type: string, start?: number, end?: number): Promise<PerfSamplesSeries>;
        /**
            * Test failover for Vpg.
            * @param {string} checkpointId
            * @returns {Promise<Task>} task
            */
        failoverTest(checkpointId: string): Promise<Task>;
        /**
            * Stop a Vpg failover test and provide feedback as to whether the test was successful
            * @param {boolean} success
            * @param {string} summary
            * @returns {Promise<Task>} task
            */
        failoverTestStop(success: boolean, summary: string): Promise<Task>;
        /**
            * Gets the VMs that belong to the Vpg
            * @returns {Promise<Array<VpgVm>>} vpg vms
            */
        getVmsForVpg(): Promise<Array<VpgVm>>;
        /**
            * Gets the service profile for the Vpg
            * @returns {Promise<ServiceProfile>} service profile
            */
        getServiceProfile(): Promise<ServiceProfile>;
        /**
            * Initiates a live failover on the Vpg
            * @param {VpgFailoverCreateRequest} failoverCreateRequest
            * @returns {Promise<Task>} task
            */
        failover(failoverCreateRequest: VpgFailoverCreateRequest): Promise<Task>;
        /**
            * Commits changes after a live failover for Vpg
            * @returns {Promise<Task>} task
            */
        commitFailover(): Promise<Task>;
        /**
            * Rolls back changes after a live failover for Vpg
            * @returns {Promise<Task>} task
            */
        rollbackFailover(): Promise<Task>;
        /**
            * Get checkpoints for Vpg
            * @returns {Promise<Array<VpgCheckpoint>>} vpg checkpoints
            */
        getCheckpoints(): Promise<Array<VpgCheckpoint>>;
        /**
            * Gets failover task details for a failover.
            * @param {string} taskUuid
            * @returns {Promise<VpgFailoverReportDetails>} vpg failover report detail
            */
        getFailoverTaskDetails(taskUuid: string): Promise<VpgFailoverReportDetails>;
        /**
            * Get a failover report file for a task
            * @param {string} reportUuid the UUID of the task to retrieve the report for
            * @param {string} fileName
            * @returns {Observable<String>}
            */
        downloadFailoverReport(reportUuid: string, fileName?: string): Observable<String>;
        /**
            * Get performance counters for vpg.
            * @return {Promise<Array<PerfCounter>>} performance counters
            */
        getPerformanceCounters(): Promise<Array<PerfCounter>>;
        /**
            * Refreshes the Vpg data by retrieving it from the API again.
            * @returns {Promise<Vpg>} promise that resolves with this object
            */
        refresh(): Promise<Vpg>;
}

/**
    * Event service.
    */
export class EventService {
        /**
            * Get the event type message depending on the type.
            * @param eventType
            * @returns {string} The human readable message.
            */
        static getEventTypeMsg(eventType: EventType): string;
}

/**
    * Iland API HTTP Client.
    */
export class Http {
        /**
            * Constructs a new Http instance.
            * @param {string} baseUrl the base URL of the iland Cloud API
            */
        constructor(baseUrl: string);
        /**
            * Gets a formatted Accept header from a standard MIME and optional version number.
            * @param {string} mime the standard MIME string
            * @param {number} version the targeted version (defaults to the SDK version)
            * @returns {string} the formatted MIME type
            */
        static versionMime(mime: string, version?: number): string;
        /**
            * Performs a request against the iland Cloud API.
            * @param {AxiosRequestConfig} config request configuration
            * @returns {Promise<AxiosResponse>} promise that resolves with the server response
            * @throws {ApiError} if the server responds with an error
            */
        request(config: AxiosRequestConfig): Promise<AxiosResponse>;
        /**
            * Perform a GET request against the iland Cloud API.
            * @param {string} url the URL path
            * @param {AxiosRequestConfig} config request configuration
            * @returns {Promise<AxiosResponse>} promise that resolves with server response
            * @throws {ApiError} if the server responds with an error
            */
        get(url: string, config?: AxiosRequestConfig): Promise<AxiosResponse>;
        /**
            * Perform a DELETE request against the iland Cloud API.
            * @param {string} url the URL path
            * @param {AxiosRequestConfig} config request configuration
            * @returns {Promise<AxiosResponse>} promise that resolves with the server response
            * @throws {ApiError} if the server responds with an error
            */
        delete(url: string, config?: AxiosRequestConfig): Promise<AxiosResponse>;
        /**
            * Perform a POST request against the iland Cloud API.
            * @param {string} url the URL path
            * @param data the data to include in the request body
            * @param {AxiosRequestConfig} config request configuration
            * @returns {Promise<AxiosResponse>} promise that resolves with the server response
            * @throws {ApiError} if the server responds with an error
            */
        post(url: string, data?: any, config?: AxiosRequestConfig): Promise<AxiosResponse>;
        /**
            * Perform a PUT request against the iland Cloud API.
            * @param {string} url the URL path
            * @param data the data to include in the request body
            * @param {AxiosRequestConfig} config request configuration
            * @returns {Promise<AxiosResponse>} promise that resolves with the server response
            * @throws {ApiError} if the server responds with an error
            */
        put(url: string, data?: any, config?: AxiosRequestConfig): Promise<AxiosResponse>;
}

/**
    * IamService
    */
export class IamService {
        /**
            * Check whether or not a user is allowed to perform an action or not.
            * @param {UserWithSecurity} user
            * @param {string} entityUuid
            * @param {PermissionType} permissionType
            * @returns {boolean}
            */
        static isUserPermitted(user: UserWithSecurity, entityUuid: string, permissionType: PermissionType): boolean;
        /**
            * Derive effective policy from an ancestor.
            * @param {CompanyInventory} companyInventory
            * @param {Policy} ancestorPolicy
            * @param {InventoryEntity | undefined} target
            * @returns {Policy | null}
            */
        static deriveEffectivePolicyFromAncestor(companyInventory: CompanyInventory, ancestorPolicy: Policy, target: InventoryEntity | undefined): Policy | null;
        /**
            * Check whether or not an entity is accessible publicly.
            * @param {string} entityUuid
            * @param {PermissionType} permission
            * @returns {boolean}
            */
        static isPubliclyAccessible(entityUuid: string, permission: PermissionType): boolean;
        /**
            * Validate a role creation request.
            * @param {RoleCreationRequest} roleCreationRequest
            * @param {CompanyInventory} companyInventory
            * @returns {Array<Error>}
            */
        static validateRole(roleCreationRequest: RoleCreationRequest, companyInventory: CompanyInventory): Error[];
}

export class LocationService {
        /**
            * Get the public catalogs for a data center location.
            * @param {string} location The location ID
            * @returns {Promise<Array<Catalog>>} promise Promise that resolves with a list of Catalog
            */
        static getPublicCatalogs(location: string): Promise<Array<Catalog>>;
        /**
            * Get the public vapp templates for a data center location.
            * @param {string} location The location ID
            * @returns {Promise<Array<VappTemplate>>} promise Promise that resolves with a list of VappTemplate
            */
        static getPublicVappTemplates(location: string): Promise<Array<VappTemplate>>;
        /**
            * Get the public media for a data center location.
            * @param {string} location The location ID
            * @returns {Promise<Array<Media>>} promise Promise that resolves with a list of Media
            */
        static getPublicMedia(location: string): Promise<Array<Media>>;
        /**
            * Get the VM configuration limits for a data center location.
            * @param {string} location The location ID
            * @returns {Promise<VmConfigurationLimits>} promise Promise that resolves with the VM configuration limits
            */
        static getVmConfigurationLimits(location: string): Promise<VmConfigurationLimits>;
}

/**
    * PermissionService
    */
export class PermissionService {
        /**
            * Map of all permission listed by their PermissionType.
            */
        permissions: Map<PermissionType, Permission>;
        /**
            * Map of all permissions listed by their IamEntityType.
            */
        domainPermissions: Map<IamEntityType, Array<Permission>>;
        /**
            * Get the instance of PermissionService. Singleton implementation.
            * @returns {PermissionService}
            */
        static getInstance(): PermissionService;
        /**
            * Get the decorated permission for the specified permission type.
            * @param {PermissionType} permission
            * @returns {Permission | undefined}
            */
        static getPermission(permission: PermissionType): Permission | undefined;
        /**
            * Get implied permission for the current permission.
            * @param {Array<PermissionType> | undefined} originalPermissions
            * @returns {Array<Permission> | null}
            */
        getImpliedPermissions(originalPermissions: Array<PermissionType> | undefined): Array<Permission>;
        /**
            * Get all available permissions for an IamEntityType.
            * @param {IamEntityType} domain
            * @returns {Array<Permission> | undefined}
            */
        getAvailablePermissionsForDomain(domain: IamEntityType): Array<Permission> | undefined;
        /**
            * Get all required permissions for an IamEntityType.
            * @param {IamEntityType | undefined} domain
            * @returns {Array<Permission> | undefined}
            */
        getRequiredPermissionsForDomain(domain: IamEntityType | undefined): Array<Permission> | undefined;
        /**
            * Get all view permissions for an IamEntityType.
            * @param {IamEntityType | undefined} domain
            * @returns {Permission | undefined}
            */
        getViewPermissionForDomain(domain: IamEntityType | undefined): Permission | undefined;
}

export interface UploadSessionFileInfo {
    fileName: string;
    chunkSizeInBytes: number;
    totalNumberOfChunks: number;
    fileSizeInBytes: number;
}
export interface UploadSessionFileInfoList {
    data: Array<UploadSessionFileInfo>;
}
export interface UploadSessionFileChunkRangeList {
    data: Array<UploadSessionFileChunkRange>;
}
export interface UploadSessionFileChunkRange {
    begin: number;
    end: number;
}
export interface StartUploadSessionParamsFile {
    fileName: string;
    sizeInBytes: number;
}
export interface StartUploadSessionParams {
    manifest: Array<StartUploadSessionParamsFile>;
}
export type FileProgressObservable = Observable<FileProgress>;
export interface UploadErrorJSON {
    message: string | undefined;
    code: number;
}
export class UploadError extends Error {
    constructor(_json: UploadErrorJSON);
    get message(): string;
    get code(): number;
}
export interface FileProgress {
    name: string;
    progressPercentage: number;
}

/**
    * Upload Service provides a wrapper for the iland upload engine to allow robust, resumable uploads of large files.
    */
export abstract class UploadService {
        /**
            * Lists info about the files in an upload session.
            * @param host the upload session host
            * @param sessionID the upload session UUID
            * @returns a promise that resolves with upload session file info list
            */
        static listSessionFileInfo(host: string, sessionID: string): Promise<UploadSessionFileInfoList>;
        /**
            * Lists the missing file chunks for an upload session.
            * @param host the upload session host
            * @param sessionID the upload session UUID
            * @param fileName the name of the file within the upload session
            * @returns a promise that resolves with upload session missing file chunk range list
            */
        static listMissingFileChunks(host: string, sessionID: string, fileName: string): Promise<UploadSessionFileChunkRangeList>;
        /**
            * Gets info for a specific file within an upload session.
            * @param host the upload session host
            * @param sessionID the upload session UUID
            * @param fileName the name of the file within the upload session
            * @returns a promise that resolves with the file info
            */
        static getSessionFileInfo(host: string, sessionID: string, fileName: string): Promise<UploadSessionFileInfo>;
        /**
            * Uploads multiple files to an upload session simultaneously.
            * @param host the upload session host
            * @param sessionID the upload session UUID
            * @param files the list of files to upload
            * @param logger an optional logger to enable console messages for internal process details
            * @returns an observable that emits events to notify consumers of upload progress for each file
            */
        static uploadFiles(host: string, sessionID: string, files: Array<File>, logger?: Logger): FileProgressObservable;
}

/**
    * Custom URL Encoder that matches the RFC3986.
    */
export class URLEncoder {
        /**
            * Encode URI components adhering to RFC 3986.
            * @param {string} str URI Component.
            * @param {boolean} encodeSpaceWithPlusSign If true, encode space char with a "+" instead of "%20".
            * @returns {string} encoded string.
            */
        static encodeURIComponentRFC5987(str: string, encodeSpaceWithPlusSign?: boolean): string;
}

